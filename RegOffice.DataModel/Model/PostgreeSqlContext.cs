using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using System.Net;
using Microsoft.EntityFrameworkCore.Diagnostics;

namespace RegOffice.DataModel.Model
{
    public partial class PostgreeSqlContext : DbContext
    {
        public virtual DbSet<Abonent> Abonents { get; set; }
        public virtual DbSet<Abonent1cPortalContactView> Abonent1cPortalContactViews { get; set; }
        public virtual DbSet<AbonentCount> AbonentCounts { get; set; }
        public virtual DbSet<AbonentDataView> AbonentDataViews { get; set; }
        public virtual DbSet<AbonentDataViewNew> AbonentDataViewNews { get; set; }
        public virtual DbSet<AbonentImportTask> AbonentImportTasks { get; set; }
        public virtual DbSet<AbonentListView> AbonentListViews { get; set; }
        public virtual DbSet<AbonentPerson> AbonentPeoples { get; set; }
        public virtual DbSet<AbonentRecipientForRegion> AbonentRecipientForRegions { get; set; }
        public virtual DbSet<AbonentRegionView> AbonentRegionViews { get; set; }
        public virtual DbSet<AbonentStepView> AbonentStepViews { get; set; }
        public virtual DbSet<AbonentTariff> AbonentTariffs { get; set; }
        public virtual DbSet<AbonentTariffView1c> AbonentTariffView1cs { get; set; }
        public virtual DbSet<AbonentType> AbonentTypes { get; set; }
        public virtual DbSet<AccessLevel> AccessLevels { get; set; }
        public virtual DbSet<Account1c> Account1cs { get; set; }
        public virtual DbSet<AccrRepresentView> AccrRepresentViews { get; set; }
        public virtual DbSet<ActionNumbersView> ActionNumbersViews { get; set; }
        public virtual DbSet<Addr> Addrs { get; set; }
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<AddressObject> AddressObjects { get; set; }
        public virtual DbSet<AddressObjectLevel> AddressObjectLevels { get; set; }
        public virtual DbSet<AddressObjectPrefix> AddressObjectPrefixes { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<AgentBalance> AgentBalances { get; set; }
        public virtual DbSet<AgentBalanceAcceptedView> AgentBalanceAcceptedViews { get; set; }
        public virtual DbSet<AgentBalanceBill> AgentBalanceBills { get; set; }
        public virtual DbSet<AgentBalanceDetail> AgentBalanceDetails { get; set; }
        public virtual DbSet<AgentBalanceDetailChangeRequest> AgentBalanceDetailChangeRequests { get; set; }
        public virtual DbSet<AgentBalanceDetailChangeRequestComment> AgentBalanceDetailChangeRequestComments { get; set; }
        public virtual DbSet<AgentBalanceDetailChangeRequestStep> AgentBalanceDetailChangeRequestSteps { get; set; }
        public virtual DbSet<AgentBalanceGroup> AgentBalanceGroups { get; set; }
        public virtual DbSet<AgentBalanceOffice> AgentBalanceOffices { get; set; }
        public virtual DbSet<AgentBalanceProcessing> AgentBalanceProcessings { get; set; }
        public virtual DbSet<AgentBusinessRegion> AgentBusinessRegions { get; set; }
        public virtual DbSet<AgentContract> AgentContracts { get; set; }
        public virtual DbSet<AgentLevel> AgentLevels { get; set; }
        public virtual DbSet<AgentLocalityRating> AgentLocalityRatings { get; set; }
        public virtual DbSet<AgentLocalityView> AgentLocalityViews { get; set; }
        public virtual DbSet<AgentMerchandise> AgentMerchandises { get; set; }
        public virtual DbSet<AgentRegionRating> AgentRegionRatings { get; set; }
        public virtual DbSet<AgentReward> AgentRewards { get; set; }
        public virtual DbSet<AgentScheme> AgentSchemes { get; set; }
        public virtual DbSet<AgentSetting> AgentSettings { get; set; }
        public virtual DbSet<Altname> Altnames { get; set; }
        public virtual DbSet<AoAbonentContractTariffView> AoAbonentContractTariffViews { get; set; }
        public virtual DbSet<AoAbonentContractTariffViewEx> AoAbonentContractTariffViewExes { get; set; }
        public virtual DbSet<Application> Applications { get; set; }
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<ApplicationStep> ApplicationSteps { get; set; }
        public virtual DbSet<Ar1cView> Ar1cViews { get; set; }
        public virtual DbSet<AstralWorkflowClient> AstralWorkflowClients { get; set; }
        public virtual DbSet<AstralWorkflowProcessing> AstralWorkflowProcessings { get; set; }
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AttributeDocumentType> AttributeDocumentTypes { get; set; }
        public virtual DbSet<AttributeEku> AttributeEkus { get; set; }
        public virtual DbSet<AttributeType> AttributeTypes { get; set; }
        public virtual DbSet<AuthorizationCode> AuthorizationCodes { get; set; }
        public virtual DbSet<Auto1cReportStatistic> Auto1cReportStatistics { get; set; }
        public virtual DbSet<BalanceBuildTask> BalanceBuildTasks { get; set; }
        public virtual DbSet<Bank> Banks { get; set; }
        public virtual DbSet<BillDocument> BillDocuments { get; set; }
        public virtual DbSet<BillDocumentType> BillDocumentTypes { get; set; }
        public virtual DbSet<BillView> BillViews { get; set; }
        public virtual DbSet<BlockedRequisite> BlockedRequisites { get; set; }
        public virtual DbSet<Bonu> Bonus { get; set; }
        public virtual DbSet<BonusType> BonusTypes { get; set; }
        public virtual DbSet<BulkSkziLicenseUploadTask> BulkSkziLicenseUploadTasks { get; set; }
        public virtual DbSet<Ca> Cas { get; set; }
        public virtual DbSet<CaAccreditation> CaAccreditations { get; set; }
        public virtual DbSet<CaAction> CaActions { get; set; }
        public virtual DbSet<CaCertificate> CaCertificates { get; set; }
        public virtual DbSet<CaMessenger> CaMessengers { get; set; }
        public virtual DbSet<CaProductType> CaProductTypes { get; set; }
        public virtual DbSet<CaRequestApi> CaRequestApis { get; set; }
        public virtual DbSet<CaService> CaServices { get; set; }
        public virtual DbSet<CaServiceType> CaServiceTypes { get; set; }
        public virtual DbSet<CaSetting> CaSettings { get; set; }
        public virtual DbSet<CaTemplate> CaTemplates { get; set; }
        public virtual DbSet<CaTemplateAttribute> CaTemplateAttributes { get; set; }
        public virtual DbSet<CaTemplateType> CaTemplateTypes { get; set; }
        public virtual DbSet<CallbackRequest> CallbackRequests { get; set; }
        public virtual DbSet<CallbackRequestType> CallbackRequestTypes { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CcItsBalance> CcItsBalances { get; set; }
        public virtual DbSet<CcItsBalanceDetail> CcItsBalanceDetails { get; set; }
        public virtual DbSet<CemposRecipient> CemposRecipients { get; set; }
        public virtual DbSet<CertTemplate> CertTemplates { get; set; }
        public virtual DbSet<CertTemplateEku> CertTemplateEkus { get; set; }
        public virtual DbSet<CertTemplateProductType> CertTemplateProductTypes { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<CertificateInProduct> CertificateInProducts { get; set; }
        public virtual DbSet<CertificateIrudRegistration> CertificateIrudRegistrations { get; set; }
        public virtual DbSet<CertificateRequest> CertificateRequests { get; set; }
        public virtual DbSet<CertificateRequestStep> CertificateRequestSteps { get; set; }
        public virtual DbSet<CertificateRevocation> CertificateRevocations { get; set; }
        public virtual DbSet<CertificateRevokeHistory> CertificateRevokeHistories { get; set; }
        public virtual DbSet<CertificateRevokeRequest> CertificateRevokeRequests { get; set; }
        public virtual DbSet<CertificateService> CertificateServices { get; set; }
        public virtual DbSet<CertificateServiceSetting> CertificateServiceSettings { get; set; }
        public virtual DbSet<CertificateServiceStep> CertificateServiceSteps { get; set; }
        public virtual DbSet<CertificateStep> CertificateSteps { get; set; }
        public virtual DbSet<CertificateTariff> CertificateTariffs { get; set; }
        public virtual DbSet<CertificateTariffStep> CertificateTariffSteps { get; set; }
        public virtual DbSet<CertificateType> CertificateTypes { get; set; }
        public virtual DbSet<CheckingMode> CheckingModes { get; set; }
        public virtual DbSet<CheckingScheme> CheckingSchemes { get; set; }
        public virtual DbSet<CheckingType> CheckingTypes { get; set; }
        public virtual DbSet<ChildAgentViewAndAbonent> ChildAgentViewAndAbonents { get; set; }
        public virtual DbSet<ChildAgentsView> ChildAgentsViews { get; set; }
        public virtual DbSet<Coefficient> Coefficients { get; set; }
        public virtual DbSet<CoefficientType> CoefficientTypes { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<CompanyGroup> CompanyGroups { get; set; }
        public virtual DbSet<CompetencyCenterReward> CompetencyCenterRewards { get; set; }
        public virtual DbSet<Condition> Conditions { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Contact> Contacts { get; set; }
        public virtual DbSet<ContactPerson> ContactPeoples { get; set; }
        public virtual DbSet<ContactPersonUse> ContactPersonUses { get; set; }
        public virtual DbSet<ContactType> ContactTypes { get; set; }
        public virtual DbSet<ContactUse> ContactUses { get; set; }
        public virtual DbSet<Contract> Contracts { get; set; }
        public virtual DbSet<ContractStep> ContractSteps { get; set; }
        public virtual DbSet<ContractTariff> ContractTariffs { get; set; }
        public virtual DbSet<ContractTariffDiscount> ContractTariffDiscounts { get; set; }
        public virtual DbSet<ContractTariffExtension> ContractTariffExtensions { get; set; }
        public virtual DbSet<ContractTariffStep> ContractTariffSteps { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Crl> Crls { get; set; }
        public virtual DbSet<CrlLink> CrlLinks { get; set; }
        public virtual DbSet<CryptoStorage> CryptoStorages { get; set; }
        public virtual DbSet<CryptoStorageKey> CryptoStorageKeys { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<DiscountType> DiscountTypes { get; set; }
        public virtual DbSet<DisqualifiedPerson> DisqualifiedPeoples { get; set; }
        public virtual DbSet<DistributionView> DistributionViews { get; set; }
        public virtual DbSet<Doc> Docs { get; set; }
        public virtual DbSet<DocType> DocTypes { get; set; }
        public virtual DbSet<DocumentType> DocumentTypes { get; set; }
        public virtual DbSet<DomainEvent> DomainEvents { get; set; }
        public virtual DbSet<Dss> Dsses { get; set; }
        public virtual DbSet<DssApp> DssApps { get; set; }
        public virtual DbSet<DssAuth> DssAuths { get; set; }
        public virtual DbSet<DssAuthKey> DssAuthKeys { get; set; }
        public virtual DbSet<DssAuthKeyStep> DssAuthKeySteps { get; set; }
        public virtual DbSet<DssAuthMeth> DssAuthMeths { get; set; }
        public virtual DbSet<DssAuthMode> DssAuthModes { get; set; }
        public virtual DbSet<DssAuthStep> DssAuthSteps { get; set; }
        public virtual DbSet<DssAuthSystem> DssAuthSystems { get; set; }
        public virtual DbSet<DssStorageType> DssStorageTypes { get; set; }
        public virtual DbSet<DssTariff> DssTariffs { get; set; }
        public virtual DbSet<DssUser> DssUsers { get; set; }
        public virtual DbSet<DssUserAuthStep> DssUserAuthSteps { get; set; }
        public virtual DbSet<DssUserGroup> DssUserGroups { get; set; }
        public virtual DbSet<Eku> Ekus { get; set; }
        public virtual DbSet<EntityType> EntityTypes { get; set; }
        public virtual DbSet<ExtremumAoContractTariffView> ExtremumAoContractTariffViews { get; set; }
        public virtual DbSet<ExtremumLicenseView> ExtremumLicenseViews { get; set; }
        public virtual DbSet<FeedbackRating> FeedbackRatings { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<FileMask> FileMasks { get; set; }
        public virtual DbSet<FileSignature> FileSignatures { get; set; }
        public virtual DbSet<FileType> FileTypes { get; set; }
        public virtual DbSet<Gate> Gates { get; set; }
        public virtual DbSet<GateProductType> GateProductTypes { get; set; }
        public virtual DbSet<GateProtocol> GateProtocols { get; set; }
        public virtual DbSet<GateSetting> GateSettings { get; set; }
        public virtual DbSet<GateUpdater> GateUpdaters { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<Holding> Holdings { get; set; }
        public virtual DbSet<HoldingAbonent> HoldingAbonents { get; set; }
        public virtual DbSet<Interview> Interviews { get; set; }
        public virtual DbSet<InterviewAnswer> InterviewAnswers { get; set; }
        public virtual DbSet<InterviewStep> InterviewSteps { get; set; }
        public virtual DbSet<InvoiceReturnType> InvoiceReturnTypes { get; set; }
        public virtual DbSet<Ip> Ips { get; set; }
        public virtual DbSet<IrucAbonent> IrucAbonents { get; set; }
        public virtual DbSet<IsExistRnsPfr> IsExistRnsPfrs { get; set; }
        public virtual DbSet<Issuer> Issuers { get; set; }
        public virtual DbSet<IssuerAccreditation> IssuerAccreditations { get; set; }
        public virtual DbSet<It> Its { get; set; }
        public virtual DbSet<ItsDistributor> ItsDistributors { get; set; }
        public virtual DbSet<ItsHistory> ItsHistories { get; set; }
        public virtual DbSet<ItsProcessedFileHistory> ItsProcessedFileHistories { get; set; }
        public virtual DbSet<ItsProfSubscription> ItsProfSubscriptions { get; set; }
        public virtual DbSet<KcrIssue> KcrIssues { get; set; }
        public virtual DbSet<Key> Keys { get; set; }
        public virtual DbSet<KeyPermission> KeyPermissions { get; set; }
        public virtual DbSet<KeySerialNumber> KeySerialNumbers { get; set; }
        public virtual DbSet<Kladr> Kladrs { get; set; }
        public virtual DbSet<License> Licenses { get; set; }
        public virtual DbSet<LicenseDetail> LicenseDetails { get; set; }
        public virtual DbSet<LicenseInProduct> LicenseInProducts { get; set; }
        public virtual DbSet<LicensePool> LicensePools { get; set; }
        public virtual DbSet<LicensePoolStep> LicensePoolSteps { get; set; }
        public virtual DbSet<LicenseStep> LicenseSteps { get; set; }
        public virtual DbSet<LicenseType> LicenseTypes { get; set; }
        public virtual DbSet<Limit> Limits { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<LogExtended> LogExtendeds { get; set; }
        public virtual DbSet<LogExtendedDetail> LogExtendedDetails { get; set; }
        public virtual DbSet<LogExtendedOperationDesc> LogExtendedOperationDescs { get; set; }
        public virtual DbSet<LogType> LogTypes { get; set; }
        public virtual DbSet<LogV2> LogV2s { get; set; }
        public virtual DbSet<LogV222> LogV222s { get; set; }
        public virtual DbSet<LoginFailAttempt> LoginFailAttempts { get; set; }
        public virtual DbSet<MachineReadableProxyType> MachineReadableProxyTypes { get; set; }
        public virtual DbSet<MemberReserveKey> MemberReserveKeys { get; set; }
        public virtual DbSet<Merchandise> Merchandises { get; set; }
        public virtual DbSet<MerchandiseBill> MerchandiseBills { get; set; }
        public virtual DbSet<MerchandiseGroup> MerchandiseGroups { get; set; }
        public virtual DbSet<MerchandiseGroupItem> MerchandiseGroupItems { get; set; }
        public virtual DbSet<MerchandiseGroupType> MerchandiseGroupTypes { get; set; }
        public virtual DbSet<MerchandiseType> MerchandiseTypes { get; set; }
        public virtual DbSet<MercuryMessenger> MercuryMessengers { get; set; }
        public virtual DbSet<MercuryMessengerStep> MercuryMessengerSteps { get; set; }
        public virtual DbSet<MercuryPlugin> MercuryPlugins { get; set; }
        public virtual DbSet<MercuryRecipient> MercuryRecipients { get; set; }
        public virtual DbSet<MercuryRecipientStep> MercuryRecipientSteps { get; set; }
        public virtual DbSet<MercuryRecipientView> MercuryRecipientViews { get; set; }
        public virtual DbSet<MercuryRoute> MercuryRoutes { get; set; }
        public virtual DbSet<Messenger> Messengers { get; set; }
        public virtual DbSet<MessengerCertificate> MessengerCertificates { get; set; }
        public virtual DbSet<MessengerRecipient> MessengerRecipients { get; set; }
        public virtual DbSet<MessengerSuffix> MessengerSuffixes { get; set; }
        public virtual DbSet<MessengerUpdater> MessengerUpdaters { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleTariff> ModuleTariffs { get; set; }
        public virtual DbSet<ModuleType> ModuleTypes { get; set; }
        public virtual DbSet<MonitoringView> MonitoringViews { get; set; }
        public virtual DbSet<News> News { get; set; }
        public virtual DbSet<NewsBrowsing> NewsBrowsings { get; set; }
        public virtual DbSet<NewsFile> NewsFiles { get; set; }
        public virtual DbSet<NewsLastVisit> NewsLastVisits { get; set; }
        public virtual DbSet<NewsReview> NewsReviews { get; set; }
        public virtual DbSet<NewsSetting> NewsSettings { get; set; }
        public virtual DbSet<NewsVisibility> NewsVisibilities { get; set; }
        public virtual DbSet<NotificationTemplate> NotificationTemplates { get; set; }
        public virtual DbSet<NotificationTemplateRequest> NotificationTemplateRequests { get; set; }
        public virtual DbSet<NotificationTemplateRequestType> NotificationTemplateRequestTypes { get; set; }
        public virtual DbSet<NotificationTemplateState> NotificationTemplateStates { get; set; }
        public virtual DbSet<Number> Numbers { get; set; }
        public virtual DbSet<Object> Objects { get; set; }
        public virtual DbSet<ObjectType> ObjectTypes { get; set; }
        public virtual DbSet<OfdDevice> OfdDevices { get; set; }
        public virtual DbSet<OfdDeviceType> OfdDeviceTypes { get; set; }
        public virtual DbSet<OfdDiscount> OfdDiscounts { get; set; }
        public virtual DbSet<OfdPin> OfdPins { get; set; }
        public virtual DbSet<OfdPinSetting> OfdPinSettings { get; set; }
        public virtual DbSet<OfdPinTemplate> OfdPinTemplates { get; set; }
        public virtual DbSet<OfdPinTemplateLimit> OfdPinTemplateLimits { get; set; }
        public virtual DbSet<OfdPinType> OfdPinTypes { get; set; }
        public virtual DbSet<OfdPrefix> OfdPrefixes { get; set; }
        public virtual DbSet<OfdProduct> OfdProducts { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<OfficeCertificate> OfficeCertificates { get; set; }
        public virtual DbSet<OfficeDocType> OfficeDocTypes { get; set; }
        public virtual DbSet<OfficeSetting> OfficeSettings { get; set; }
        public virtual DbSet<OfficeTeam> OfficeTeams { get; set; }
        public virtual DbSet<OfficeTeamPerson> OfficeTeamPeoples { get; set; }
        public virtual DbSet<Okopf> Okopfs { get; set; }
        public virtual DbSet<OneSAbonentContractTariffView> OneSAbonentContractTariffViews { get; set; }
        public virtual DbSet<OneSAbonentContractTariffViewEx> OneSAbonentContractTariffViewExes { get; set; }
        public virtual DbSet<Operation> Operations { get; set; }
        public virtual DbSet<OperationLog> OperationLogs { get; set; }
        public virtual DbSet<OperatorIruc> OperatorIrucs { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrgUnit> OrgUnits { get; set; }
        public virtual DbSet<PassportDataType> PassportDataTypes { get; set; }
        public virtual DbSet<PassportType> PassportTypes { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<PermissionType> PermissionTypes { get; set; }
        public virtual DbSet<Person> Peoples { get; set; }
        public virtual DbSet<PersonDoc> PersonDocs { get; set; }
        public virtual DbSet<PfrLayoutScheme> PfrLayoutSchemes { get; set; }
        public virtual DbSet<PfrProvider> PfrProviders { get; set; }
        public virtual DbSet<PfrSchemeFileMask> PfrSchemeFileMasks { get; set; }
        public virtual DbSet<PfrSchemeSubjectMask> PfrSchemeSubjectMasks { get; set; }
        public virtual DbSet<PfrSchemeType> PfrSchemeTypes { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<PlanDetail> PlanDetails { get; set; }
        public virtual DbSet<Plugin> Plugins { get; set; }
        public virtual DbSet<PluginTariff> PluginTariffs { get; set; }
        public virtual DbSet<Point> Points { get; set; }
        public virtual DbSet<PointStep> PointSteps { get; set; }
        public virtual DbSet<PointUse> PointUses { get; set; }
        public virtual DbSet<PointUseType> PointUseTypes { get; set; }
        public virtual DbSet<PointZone> PointZones { get; set; }
        public virtual DbSet<PortalAccount> PortalAccounts { get; set; }
        public virtual DbSet<PortalType> PortalTypes { get; set; }
        public virtual DbSet<Post> Posts { get; set; }
        public virtual DbSet<PotentialAbonent> PotentialAbonents { get; set; }
        public virtual DbSet<PotentialAbonentCall> PotentialAbonentCalls { get; set; }
        public virtual DbSet<PotentialAbonentCallState> PotentialAbonentCallStates { get; set; }
        public virtual DbSet<PotentialAbonentComment> PotentialAbonentComments { get; set; }
        public virtual DbSet<PotentialAbonentCommentType> PotentialAbonentCommentTypes { get; set; }
        public virtual DbSet<PotentialAbonentContactCatalog> PotentialAbonentContactCatalogs { get; set; }
        public virtual DbSet<PotentialAbonentEgai> PotentialAbonentEgais { get; set; }
        public virtual DbSet<PotentialAbonentPerson> PotentialAbonentPeoples { get; set; }
        public virtual DbSet<PotentialAbonentProductType> PotentialAbonentProductTypes { get; set; }
        public virtual DbSet<PotentialAbonentProvider> PotentialAbonentProviders { get; set; }
        public virtual DbSet<PotentialAbonentRegNum> PotentialAbonentRegNums { get; set; }
        public virtual DbSet<PotentialAbonentRejectionReason> PotentialAbonentRejectionReasons { get; set; }
        public virtual DbSet<PotentialAbonentRt> PotentialAbonentRts { get; set; }
        public virtual DbSet<PotentialAbonentStep> PotentialAbonentSteps { get; set; }
        public virtual DbSet<PotentialAbonentStepType> PotentialAbonentStepTypes { get; set; }
        public virtual DbSet<PotentialAbonentTariff> PotentialAbonentTariffs { get; set; }
        public virtual DbSet<PotentialAbonentTariffAbonent> PotentialAbonentTariffAbonents { get; set; }
        public virtual DbSet<PotentialAbonentTariffType> PotentialAbonentTariffTypes { get; set; }
        public virtual DbSet<PotentialAbonentTradingPlatform> PotentialAbonentTradingPlatforms { get; set; }
        public virtual DbSet<PotentialAbonentTradingPlatformType> PotentialAbonentTradingPlatformTypes { get; set; }
        public virtual DbSet<PotentialAbonentUcb> PotentialAbonentUcbs { get; set; }
        public virtual DbSet<PotentialAbonentUserRegion> PotentialAbonentUserRegions { get; set; }
        public virtual DbSet<PotentialAbonentWorkflow> PotentialAbonentWorkflows { get; set; }
        public virtual DbSet<Price> Prices { get; set; }
        public virtual DbSet<PriceDiscount> PriceDiscounts { get; set; }
        public virtual DbSet<PriceDiscountStep> PriceDiscountSteps { get; set; }
        public virtual DbSet<PriceGroup> PriceGroups { get; set; }
        public virtual DbSet<PriceScheme> PriceSchemes { get; set; }
        public virtual DbSet<PriceSection> PriceSections { get; set; }
        public virtual DbSet<PriceTariff> PriceTariffs { get; set; }
        public virtual DbSet<PriceTariffStep> PriceTariffSteps { get; set; }
        public virtual DbSet<PriceTrend> PriceTrends { get; set; }
        public virtual DbSet<ProcessingMode> ProcessingModes { get; set; }
        public virtual DbSet<ProcessingProduct> ProcessingProducts { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductChecking> ProductCheckings { get; set; }
        public virtual DbSet<ProductCheckingStep> ProductCheckingSteps { get; set; }
        public virtual DbSet<ProductContractTariff> ProductContractTariffs { get; set; }
        public virtual DbSet<ProductContractTariffView> ProductContractTariffViews { get; set; }
        public virtual DbSet<ProductDoc> ProductDocs { get; set; }
        public virtual DbSet<ProductNetNode> ProductNetNodes { get; set; }
        public virtual DbSet<ProductNetNodeStep> ProductNetNodeSteps { get; set; }
        public virtual DbSet<ProductNotice> ProductNotices { get; set; }
        public virtual DbSet<ProductPassportChecking> ProductPassportCheckings { get; set; }
        public virtual DbSet<ProductPerson> ProductPeoples { get; set; }
        public virtual DbSet<ProductPersonAvailableProtocol> ProductPersonAvailableProtocols { get; set; }
        public virtual DbSet<ProductPersonHistory> ProductPersonHistories { get; set; }
        public virtual DbSet<ProductPersonHistoryActionType> ProductPersonHistoryActionTypes { get; set; }
        public virtual DbSet<ProductPersonHistorySourceType> ProductPersonHistorySourceTypes { get; set; }
        public virtual DbSet<ProductPersonKey> ProductPersonKeys { get; set; }
        public virtual DbSet<ProductPersonKeyStep> ProductPersonKeySteps { get; set; }
        public virtual DbSet<ProductPersonStep> ProductPersonSteps { get; set; }
        public virtual DbSet<ProductPotentialMember> ProductPotentialMembers { get; set; }
        public virtual DbSet<ProductPotentialMemberProtocol> ProductPotentialMemberProtocols { get; set; }
        public virtual DbSet<ProductSkrinInfo> ProductSkrinInfos { get; set; }
        public virtual DbSet<ProductStep> ProductSteps { get; set; }
        public virtual DbSet<ProductTransferLog> ProductTransferLogs { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<ProlongationShortDataSummary> ProlongationShortDataSummaries { get; set; }
        public virtual DbSet<ProlongationShortDatum> ProlongationShortDatas { get; set; }
        public virtual DbSet<PromotionType> PromotionTypes { get; set; }
        public virtual DbSet<PropDict> PropDicts { get; set; }
        public virtual DbSet<PropType> PropTypes { get; set; }
        public virtual DbSet<ProtectionClass> ProtectionClasses { get; set; }
        public virtual DbSet<Protocol> Protocols { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<ProxyAgent> ProxyAgents { get; set; }
        public virtual DbSet<PurchaseType> PurchaseTypes { get; set; }
        public virtual DbSet<Ra> Ras { get; set; }
        public virtual DbSet<RaStep> RaSteps { get; set; }
        public virtual DbSet<RatingView> RatingViews { get; set; }
        public virtual DbSet<Recipient> Recipients { get; set; }
        public virtual DbSet<RecipientCertificate> RecipientCertificates { get; set; }
        public virtual DbSet<RecipientDuplicate> RecipientDuplicates { get; set; }
        public virtual DbSet<RecipientUnit> RecipientUnits { get; set; }
        public virtual DbSet<RecipientUnitUpdater> RecipientUnitUpdaters { get; set; }
        public virtual DbSet<RecipientUpdater> RecipientUpdaters { get; set; }
        public virtual DbSet<Reflex> Reflexes { get; set; }
        public virtual DbSet<ReflexMessenger> ReflexMessengers { get; set; }
        public virtual DbSet<ReflexProduct> ReflexProducts { get; set; }
        public virtual DbSet<ReflexProductType> ReflexProductTypes { get; set; }
        public virtual DbSet<ReflexRule> ReflexRules { get; set; }
        public virtual DbSet<ReflexType> ReflexTypes { get; set; }
        public virtual DbSet<ReflexTypeSystem> ReflexTypeSystems { get; set; }
        public virtual DbSet<ReflexUseType> ReflexUseTypes { get; set; }
        public virtual DbSet<RoRefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<RegBankRequest> RegBankRequests { get; set; }
        public virtual DbSet<RegBankRequestStep> RegBankRequestSteps { get; set; }
        public virtual DbSet<RegCertRequest> RegCertRequests { get; set; }
        public virtual DbSet<RegCertRequestStep> RegCertRequestSteps { get; set; }
        public virtual DbSet<RegFileType> RegFileTypes { get; set; }
        public virtual DbSet<RegRequest> RegRequests { get; set; }
        public virtual DbSet<RegRequestAccount> RegRequestAccounts { get; set; }
        public virtual DbSet<RegRequestChecking> RegRequestCheckings { get; set; }
        public virtual DbSet<RegRequestCheckingStep> RegRequestCheckingSteps { get; set; }
        public virtual DbSet<RegRequestComment> RegRequestComments { get; set; }
        public virtual DbSet<RegRequestConfirmedStep> RegRequestConfirmedSteps { get; set; }
        public virtual DbSet<RegRequestContact> RegRequestContacts { get; set; }
        public virtual DbSet<RegRequestContactUse> RegRequestContactUses { get; set; }
        public virtual DbSet<RegRequestDoc> RegRequestDocs { get; set; }
        public virtual DbSet<RegRequestEgrulRequest> RegRequestEgrulRequests { get; set; }
        public virtual DbSet<RegRequestFeedback> RegRequestFeedbacks { get; set; }
        public virtual DbSet<RegRequestGate> RegRequestGates { get; set; }
        public virtual DbSet<RegRequestMember> RegRequestMembers { get; set; }
        public virtual DbSet<RegRequestMemberAvailableProtocol> RegRequestMemberAvailableProtocols { get; set; }
        public virtual DbSet<RegRequestMemberContact> RegRequestMemberContacts { get; set; }
        public virtual DbSet<RegRequestMemberContactUse> RegRequestMemberContactUses { get; set; }
        public virtual DbSet<RegRequestMemberDssApp> RegRequestMemberDssApps { get; set; }
        public virtual DbSet<RegRequestPassportChecking> RegRequestPassportCheckings { get; set; }
        public virtual DbSet<RegRequestPlugin> RegRequestPlugins { get; set; }
        public virtual DbSet<RegRequestPotentialMember> RegRequestPotentialMembers { get; set; }
        public virtual DbSet<RegRequestPotentialMemberProtocol> RegRequestPotentialMemberProtocols { get; set; }
        public virtual DbSet<RegRequestRecipient> RegRequestRecipients { get; set; }
        public virtual DbSet<RegRequestRoute> RegRequestRoutes { get; set; }
        public virtual DbSet<RegRequestService> RegRequestServices { get; set; }
        public virtual DbSet<RegRequestStep> RegRequestSteps { get; set; }
        public virtual DbSet<RegRequestStepProductView> RegRequestStepProductViews { get; set; }
        public virtual DbSet<RegRequestSummaryView> RegRequestSummaryViews { get; set; }
        public virtual DbSet<RegRequestTariff> RegRequestTariffs { get; set; }
        public virtual DbSet<RegRequestTeam> RegRequestTeams { get; set; }
        public virtual DbSet<RegRequestTransferLog> RegRequestTransferLogs { get; set; }
        public virtual DbSet<RegRequestType> RegRequestTypes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<RegionStatistic> RegionStatistics { get; set; }
        public virtual DbSet<RegionTimeZone> RegionTimeZones { get; set; }
        public virtual DbSet<RejectedRegRequest> RejectedRegRequests { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<ReportQuery> ReportQueries { get; set; }
        public virtual DbSet<Request1c> Request1cs { get; set; }
        public virtual DbSet<RequestRegionView> RequestRegionViews { get; set; }
        public virtual DbSet<RequestWithoutPartnerView> RequestWithoutPartnerViews { get; set; }
        public virtual DbSet<RevocationReason> RevocationReasons { get; set; }
        public virtual DbSet<RewardOption> RewardOptions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleGroup> RoleGroups { get; set; }
        public virtual DbSet<RoleModule> RoleModules { get; set; }
        public virtual DbSet<RoutePfr> RoutePfrs { get; set; }
        public virtual DbSet<SalecenterRegionView> SalecenterRegionViews { get; set; }
        public virtual DbSet<SberbankDocument> SberbankDocuments { get; set; }
        public virtual DbSet<SendedBill> SendedBills { get; set; }
        public virtual DbSet<Server> Servers { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceBalanceDetail> ServiceBalanceDetails { get; set; }
        public virtual DbSet<ServiceMode> ServiceModes { get; set; }
        public virtual DbSet<ServiceType> ServiceTypes { get; set; }
        public virtual DbSet<Setting> Settings { get; set; }
        public virtual DbSet<SignQualification> SignQualifications { get; set; }
        public virtual DbSet<SkziLicense> SkziLicenses { get; set; }
        public virtual DbSet<SmevRequestStage> SmevRequestStages { get; set; }
        public virtual DbSet<SmevStageType> SmevStageTypes { get; set; }
        public virtual DbSet<So> Sos { get; set; }
        public virtual DbSet<Socrbase> Socrbases { get; set; }
        public virtual DbSet<SosCertificate> SosCertificates { get; set; }
        public virtual DbSet<Soun> Souns { get; set; }
        public virtual DbSet<StatisticProvider> StatisticProviders { get; set; }
        public virtual DbSet<Step> Steps { get; set; }
        public virtual DbSet<StepReason> StepReasons { get; set; }
        public virtual DbSet<StorageType> StorageTypes { get; set; }
        public virtual DbSet<Street> Streets { get; set; }
        public virtual DbSet<SubjectType> SubjectTypes { get; set; }
        public virtual DbSet<SubscriptionRegionCount1cFull> SubscriptionRegionCount1cFulls { get; set; }
        public virtual DbSet<SubscriptionRegionCount1cWeek> SubscriptionRegionCount1cWeeks { get; set; }
        public virtual DbSet<SubscriptionRegionCountIt> SubscriptionRegionCountIts { get; set; }
        public virtual DbSet<Tag> Tags { get; set; }
        public virtual DbSet<TagGroup> TagGroups { get; set; }
        public virtual DbSet<Tariff> Tariffs { get; set; }
        public virtual DbSet<TariffAttribute> TariffAttributes { get; set; }
        public virtual DbSet<TariffAttributeCa> TariffAttributeCas { get; set; }
        public virtual DbSet<TariffAttributeLimit> TariffAttributeLimits { get; set; }
        public virtual DbSet<TariffCalcCompany> TariffCalcCompanies { get; set; }
        public virtual DbSet<TariffCalcComplexPrice> TariffCalcComplexPrices { get; set; }
        public virtual DbSet<TariffCalcFeaturesList> TariffCalcFeaturesLists { get; set; }
        public virtual DbSet<TariffCalcOrgNalType> TariffCalcOrgNalTypes { get; set; }
        public virtual DbSet<TariffCalcPrice> TariffCalcPrices { get; set; }
        public virtual DbSet<TariffCalcPriceType> TariffCalcPriceTypes { get; set; }
        public virtual DbSet<TariffCalcTariff> TariffCalcTariffs { get; set; }
        public virtual DbSet<TariffDiscount> TariffDiscounts { get; set; }
        public virtual DbSet<TariffDiscountRule> TariffDiscountRules { get; set; }
        public virtual DbSet<TariffGroup> TariffGroups { get; set; }
        public virtual DbSet<TariffLimit> TariffLimits { get; set; }
        public virtual DbSet<TariffType> TariffTypes { get; set; }
        public virtual DbSet<TariffZone> TariffZones { get; set; }
        public virtual DbSet<TaxSystem> TaxSystems { get; set; }
        public virtual DbSet<Token> Tokens { get; set; }
        public virtual DbSet<TokenType> TokenTypes { get; set; }
        public virtual DbSet<TradingPlatformRegistrationRequest> TradingPlatformRegistrationRequests { get; set; }
        public virtual DbSet<TradingPlatformTariffAttribute> TradingPlatformTariffAttributes { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TransactionType> TransactionTypes { get; set; }
        public virtual DbSet<TransferTariffLog> TransferTariffLogs { get; set; }
        public virtual DbSet<Transition> Transitions { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<UnitType> UnitTypes { get; set; }
        public virtual DbSet<UpdateSystem> UpdateSystems { get; set; }
        public virtual DbSet<UseType> UseTypes { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserEmailRegistered> UserEmailRegistereds { get; set; }
        public virtual DbSet<UserFintender> UserFintenders { get; set; }
        public virtual DbSet<UserPassword> UserPasswords { get; set; }
        public virtual DbSet<UserPromotionConfirmed> UserPromotionConfirmeds { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserRoleAccessInformation> UserRoleAccessInformations { get; set; }
        public virtual DbSet<UserSetting> UserSettings { get; set; }
        public virtual DbSet<UserTrust> UserTrusts { get; set; }
        public virtual DbSet<ValueType> ValueTypes { get; set; }
        public virtual DbSet<Version> Versions { get; set; }
        public virtual DbSet<VipnetNode> VipnetNodes { get; set; }
        public virtual DbSet<VipnetUser> VipnetUsers { get; set; }
        public virtual DbSet<VisibilityType> VisibilityTypes { get; set; }
        public virtual DbSet<WorkCalendar> WorkCalendars { get; set; }
        public virtual DbSet<Workflow> Workflows { get; set; }
        public virtual DbSet<WorkflowDocType> WorkflowDocTypes { get; set; }
        public virtual DbSet<WorkflowFeedback> WorkflowFeedbacks { get; set; }
        public virtual DbSet<WorkflowService> WorkflowServices { get; set; }
        public virtual DbSet<WorkflowServiceStep> WorkflowServiceSteps { get; set; }
        public virtual DbSet<WorkflowType> WorkflowTypes { get; set; }

        public PostgreeSqlContext()
        {
        }

        public PostgreeSqlContext(DbContextOptions<PostgreeSqlContext> options) : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //optionsBuilder
            //    .ConfigureWarnings(w => w.Ignore(RelationalEventId.QueryClientEvaluationWarning));

            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Host=192.168.1.56;Database=regofficex;Username=registrator;Password=ujhdjgajr");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("pathman", "pg_pathman")
                .HasPostgresExtension("dblink");

            modelBuilder.Entity<Abonent>(entity =>
            {
                entity.HasKey(e => e.AbonentId)
                    .HasName("pk_abonent");

                entity.ToTable("ro_abonent");

                entity.HasAnnotation("Relational:Comment", "Таблица абонентов");

                entity.HasIndex(e => e.AbonentTypeId, "abonent_abonent_type_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "abonent_company_group_id_idx");

                entity.HasIndex(e => e.LocationAddressId, "abonent_location_address_id_idx");

                entity.HasIndex(e => e.OfficeId, "abonent_office_id_idx");

                entity.HasIndex(e => e.OkopfId, "abonent_okopf_id_idx");

                entity.HasIndex(e => e.PostalAddressId, "abonent_postal_address_id_idx");

                entity.HasIndex(e => e.ShortName, "abonent_short_name_idx");

                entity.HasIndex(e => e.UserId, "abonent_user_id_idx");

                entity.HasIndex(e => e.RegionId, "idx_region_id");

                entity.HasIndex(e => e.RnsPfr, "idx_rns_pfr");

                entity.HasIndex(e => e.Inn, "inn");

                entity.HasIndex(e => e.AbonentGuid, "ro_abonent_abonent_guid_key")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentLogin, "sk_abonent_login")
                    .IsUnique();

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "sk_inn_kpp")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Код");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.AbonentLogin)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_login")
                    .HasComment("Логин");

                entity.Property(e => e.AbonentPassword)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_password")
                    .HasComment("Пароль");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BankName)
                    .HasColumnType("character varying")
                    .HasColumnName("bank_name")
                    .HasComment("Наименование банка");

                entity.Property(e => e.Bic)
                    .HasMaxLength(9)
                    .HasColumnName("bic")
                    .HasComment("БИК");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Головной абонент");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people")
                    .HasComment("Контакты");

                entity.Property(e => e.CorrespondentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("correspondent_account")
                    .HasComment("Корреспондентский счёт");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.EmplParentNo)
                    .HasMaxLength(5)
                    .HasColumnName("empl_parent_no")
                    .HasComment("Код подчиненности ФСС");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax")
                    .HasComment("Факс");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LocationAddressId)
                    .HasColumnName("location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.OkopfId)
                    .HasColumnName("okopf_id")
                    .HasComment("ОКОПФ");

                entity.Property(e => e.PaymentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("payment_account")
                    .HasComment("Расчетный счет");

                entity.Property(e => e.PersonalAccount)
                    .HasMaxLength(20)
                    .HasColumnName("personal_account")
                    .HasComment("Лицевой счет");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostalAddressId)
                    .HasColumnName("postal_address_id")
                    .HasComment("Юридический адрес");

                entity.Property(e => e.RawContacts)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_contacts")
                    .HasComment("Необработанные данные контактов");

                entity.Property(e => e.RawLocationAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_location_address")
                    .HasComment("Необработанные данные фактического адреса");

                entity.Property(e => e.RawPostalAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("raw_postal_address")
                    .HasComment("Необработанные данные почтового адреса");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Ид. региона");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.RnsFssSub)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss_sub")
                    .HasComment("Рег. номер ФСС обособленного подразделения");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("st_rns_pfr")
                    .HasComment("Рег. номер ПФР работодателя");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.Abonents)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.InverseCompanyGroup)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.LocationAddress)
                    .WithMany(p => p.AbonentLocationAddresses)
                    .HasForeignKey(d => d.LocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_location_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.Abonents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Okopf)
                    .WithMany(p => p.Abonents)
                    .HasForeignKey(d => d.OkopfId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_okopf");

                entity.HasOne(d => d.PostalAddress)
                    .WithMany(p => p.AbonentPostalAddresses)
                    .HasForeignKey(d => d.PostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_postal_address");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Abonents)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Abonents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<Abonent1cPortalContactView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_1c_portal_contact_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ContactsJson).HasColumnName("contacts_json");
            });

            modelBuilder.Entity<AbonentCount>(entity =>
            {
                entity.HasKey(e => e.CountRecordId)
                    .HasName("pk_count_record_id");

                entity.ToTable("ro_abonent_count");

                entity.HasAnnotation("Relational:Comment", "Таблица подсчета абонентов");

                entity.HasIndex(e => e.OfficeId, "abonent_count_office_id_idx");

                entity.HasIndex(e => e.PeriodEnd, "abonent_count_period_end_id_idx");

                entity.HasIndex(e => e.PeriodStart, "abonent_count_period_start_idx");

                entity.HasIndex(e => e.ProductTypeId, "abonent_count_product_type_id_idx");

                entity.Property(e => e.CountRecordId)
                    .HasColumnName("count_record_id")
                    .HasComment("Идентификатор записи");

                entity.Property(e => e.ActiveAtEnd)
                    .HasColumnName("active_at_end")
                    .HasComment("Число активных в конце периода");

                entity.Property(e => e.ActiveAtStart)
                    .HasColumnName("active_at_start")
                    .HasComment("Число активных в начале периода");

                entity.Property(e => e.Connected)
                    .HasColumnName("connected")
                    .HasComment("Число новых подключившихся в период");

                entity.Property(e => e.Disconnected)
                    .HasColumnName("disconnected")
                    .HasComment("Число отключившихся в период");

                entity.Property(e => e.Expired)
                    .HasColumnName("expired")
                    .HasComment("Число абонентов с истекшими тарифами");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PeriodEnd)
                    .HasPrecision(0)
                    .HasColumnName("period_end");

                entity.Property(e => e.PeriodStart)
                    .HasPrecision(0)
                    .HasColumnName("period_start");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.AbonentCounts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.AbonentCounts)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<AbonentDataView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_data_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_name");

                entity.Property(e => e.ClStepType).HasColumnName("cl_step_type");

                entity.Property(e => e.CompanyGroupCount).HasColumnName("company_group_count");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CompanyGroupNameList).HasColumnName("company_group_name_list");

                entity.Property(e => e.CrStepType).HasColumnName("cr_step_type");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IrucStepType).HasColumnName("iruc_step_type");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");
            });

            modelBuilder.Entity<AbonentDataViewNew>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_data_view_new");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_name");

                entity.Property(e => e.CompanyGroupCount).HasColumnName("company_group_count");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CompanyGroupNameList).HasColumnName("company_group_name_list");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.ProductTypes).HasColumnName("product_types");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");
            });

            modelBuilder.Entity<AbonentImportTask>(entity =>
            {
                entity.HasKey(e => e.TaskId)
                    .HasName("pk_task");

                entity.ToTable("ro_abonent_import_task");

                entity.HasAnnotation("Relational:Comment", "Таблица задач по импорту абонентов");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasDefaultValueSql("3")
                    .HasComment("Тип импортируемых абонентов");

                entity.Property(e => e.InputFileData)
                    .HasColumnName("input_file_data")
                    .HasComment("Данные входного файла");

                entity.Property(e => e.OutputFileData)
                    .HasColumnName("output_file_data")
                    .HasComment("Данные выходного файла");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskFileName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("task_file_name")
                    .HasComment("Наименование файла");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, осуществивший импорт");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.AbonentImportTasks)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.AbonentImportTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AbonentImportTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<AbonentListView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_list_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.CompanyGroup)
                    .HasMaxLength(500)
                    .HasColumnName("company_group");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.RegistrationDate).HasColumnName("registration_date");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<AbonentPerson>(entity =>
            {
                entity.HasKey(e => e.AbonentPersonId)
                    .HasName("pk_abonent_person");

                entity.ToTable("ro_abonent_person");

                entity.HasAnnotation("Relational:Comment", "Таблица сотрудников");

                entity.HasIndex(e => e.AbonentId, "abonent_person_abonent_id_idx");

                entity.HasIndex(e => e.OrgUnitId, "abonent_person_org_unit_id_idx");

                entity.HasIndex(e => e.PersonId, "abonent_person_person_id_idx");

                entity.HasIndex(e => e.PostId, "abonent_person_post_id_idx");

                entity.HasIndex(e => new { e.AbonentId, e.PersonId, e.PostId, e.OrgUnitId }, "sk_abonent_person")
                    .IsUnique();

                entity.Property(e => e.AbonentPersonId)
                    .HasColumnName("abonent_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Document)
                    .HasMaxLength(100)
                    .HasColumnName("document")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasComment("Дата документа");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(10)
                    .HasColumnName("document_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Подразделение");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Личность");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.PostName)
                    .HasColumnType("character varying")
                    .HasColumnName("post_name");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.AbonentPeople)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.OrgUnit)
                    .WithMany(p => p.AbonentPeople)
                    .HasForeignKey(d => d.OrgUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_org_unit");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.AbonentPeople)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("fk_person");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.AbonentPeople)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");
            });

            modelBuilder.Entity<AbonentRecipientForRegion>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_recipient_for_region");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ConnectionDate)
                    .HasPrecision(0)
                    .HasColumnName("connection_date");

                entity.Property(e => e.IsIndividual).HasColumnName("is_individual");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<AbonentRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_region_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentLogin)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_login");

                entity.Property(e => e.AbonentPassword)
                    .HasMaxLength(50)
                    .HasColumnName("abonent_password");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.CompanyGroupId).HasColumnName("company_group_id");

                entity.Property(e => e.ContactPeople)
                    .HasColumnType("character varying")
                    .HasColumnName("contact_people");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LocationAddressId).HasColumnName("location_address_id");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OkopfId).HasColumnName("okopf_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.PostalAddressId).HasColumnName("postal_address_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.StRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("st_rns_pfr");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<AbonentStepView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_step_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.StepId).HasColumnName("step_id");
            });

            modelBuilder.Entity<AbonentTariff>(entity =>
            {
                entity.HasKey(e => e.ContractTariffGuid)
                    .HasName("pk_abonent_tariff");

                entity.ToTable("ro_abonent_tariff");

                entity.Property(e => e.ContractTariffGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("contract_tariff_guid")
                    .HasComment("Гуид тарифа по договору");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .HasColumnName("agent_code")
                    .HasComment("Внешний код партнёра");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn")
                    .HasComment("ИНН агента");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp")
                    .HasComment("КПП агента");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование агента");

                entity.Property(e => e.Contacts)
                    .HasColumnType("character varying")
                    .HasColumnName("contacts")
                    .HasComment("Контакты абонента");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OptionId)
                    .HasMaxLength(100)
                    .HasColumnName("option_id")
                    .HasComment("Ид. опции");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.RegisteredName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegistrationDate)
                    .HasColumnName("registration_date")
                    .HasComment("Дата регистрации");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SyncDate)
                    .HasColumnName("sync_date")
                    .HasComment("Дата синхронизации с порталом 1С");

                entity.Property(e => e.TariffGuid)
                    .HasColumnName("tariff_guid")
                    .HasComment("Гуид тарифа");

                entity.Property(e => e.Uin)
                    .HasMaxLength(100)
                    .HasColumnName("uin")
                    .HasComment("Идентификационный номер пользователя 1С");

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");
            });

            modelBuilder.Entity<AbonentTariffView1c>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_abonent_tariff_view_1c");

                entity.Property(e => e.AgentCode)
                    .HasMaxLength(10)
                    .HasColumnName("agent_code");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ContactsJson).HasColumnName("contacts_json");

                entity.Property(e => e.ContractTariffGuid).HasColumnName("contract_tariff_guid");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.OptionId)
                    .HasMaxLength(100)
                    .HasColumnName("option_id");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.TariffGuid).HasColumnName("tariff_guid");
            });

            modelBuilder.Entity<AbonentType>(entity =>
            {
                entity.HasKey(e => e.AbonentTypeId)
                    .HasName("pk_abonent_type");

                entity.ToTable("ro_abonent_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов абонентов");

                entity.HasIndex(e => e.AbonentTypeName, "sk_abonent_type_name")
                    .IsUnique();

                entity.Property(e => e.AbonentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("abonent_type_id")
                    .HasComment("Код");

                entity.Property(e => e.AbonentTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("abonent_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IrucTitle)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("iruc_title")
                    .HasComment("Тип ИРУЦ");
            });

            modelBuilder.Entity<AccessLevel>(entity =>
            {
                entity.HasKey(e => e.AccessLevelId)
                    .HasName("pk_access_level");

                entity.ToTable("ro_access_level");

                entity.HasAnnotation("Relational:Comment", "Таблица уровней доступа");

                entity.HasIndex(e => e.LevelPriority, "ro_access_level_level_priority_key")
                    .IsUnique();

                entity.HasIndex(e => e.AccessLevelName, "sk_access_level_name")
                    .IsUnique();

                entity.Property(e => e.AccessLevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("access_level_id")
                    .HasComment("Код");

                entity.Property(e => e.AccessLevelName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("access_level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelPriority)
                    .HasColumnName("level_priority")
                    .HasComment("Приоритет операции");
            });

            modelBuilder.Entity<Account1c>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("pk_account_1c");

                entity.ToTable("ro_account_1c");

                entity.HasAnnotation("Relational:Comment", "Таблица учетных записей ЛК 1С");

                entity.HasIndex(e => new { e.Login, e.Email }, "sk_account_login_email")
                    .IsUnique();

                entity.HasIndex(e => e.Uin, "sk_account_uin")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .HasColumnName("account_id")
                    .HasComment("Идиентификатор");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Login)
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Uin)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("uin")
                    .HasComment("Идентификационный номер пользователя 1С");
            });

            modelBuilder.Entity<AccrRepresentView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_accr_represent_view");

                entity.Property(e => e.AccrRepr)
                    .HasMaxLength(500)
                    .HasColumnName("accr_repr");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.ArInn)
                    .HasMaxLength(12)
                    .HasColumnName("ar_inn");

                entity.Property(e => e.ArKpp)
                    .HasMaxLength(9)
                    .HasColumnName("ar_kpp");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.DomainIn)
                    .HasMaxLength(100)
                    .HasColumnName("domain_in");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.MercuryGuid).HasColumnName("mercury_guid");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(100)
                    .HasColumnName("pseudonym");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<ActionNumbersView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_action_numbers_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ActionNumber).HasColumnName("action_number");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.RegistrationDate).HasColumnName("registration_date");
            });

            modelBuilder.Entity<Addr>(entity =>
            {
                entity.HasKey(e => e.AddrId)
                    .HasName("pk_addr");

                entity.ToTable("ro_addr");

                entity.HasAnnotation("Relational:Comment", "Таблица адрес (временная)");

                entity.HasIndex(e => e.RegionId, "addr_region_id_idx");

                entity.Property(e => e.AddrId)
                    .HasColumnName("addr_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Area)
                    .HasMaxLength(100)
                    .HasColumnName("area")
                    .HasComment("Район");

                entity.Property(e => e.Building)
                    .HasMaxLength(64)
                    .HasColumnName("building")
                    .HasComment("Дом");

                entity.Property(e => e.Bulk)
                    .HasMaxLength(64)
                    .HasColumnName("bulk")
                    .HasComment("Корпус");

                entity.Property(e => e.City)
                    .HasMaxLength(64)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.FiasGuid)
                    .HasColumnName("fias_guid")
                    .HasComment("Идентификатор ФИАС адреса");

                entity.Property(e => e.FiasStringView)
                    .HasColumnType("character varying")
                    .HasColumnName("fias_string_view")
                    .HasComment("Строковое представление ФИАС адреса");

                entity.Property(e => e.FiasXml)
                    .HasColumnType("xml")
                    .HasColumnName("fias_xml")
                    .HasComment("ФИАС адрес в формате XML");

                entity.Property(e => e.Flat)
                    .HasMaxLength(64)
                    .HasColumnName("flat")
                    .HasComment("Квартира");

                entity.Property(e => e.Locality)
                    .HasMaxLength(128)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.Street)
                    .HasMaxLength(200)
                    .HasColumnName("street")
                    .HasComment("Улица");

                entity.Property(e => e.StreetAddress)
                    .HasMaxLength(128)
                    .HasColumnName("street_address")
                    .HasComment("Адрес, начиная с улицы");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Addrs)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");
            });

            modelBuilder.Entity<Address>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("pk_address");

                entity.ToTable("ro_address");

                entity.HasAnnotation("Relational:Comment", "Таблица адресов");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AreaId)
                    .HasColumnName("area_id")
                    .HasComment("Район");

                entity.Property(e => e.Building)
                    .HasMaxLength(64)
                    .HasColumnName("building")
                    .HasComment("Дом");

                entity.Property(e => e.Bulk)
                    .HasMaxLength(64)
                    .HasColumnName("bulk")
                    .HasComment("Корпус");

                entity.Property(e => e.CityId)
                    .HasColumnName("city_id")
                    .HasComment("Город");

                entity.Property(e => e.Flat)
                    .HasMaxLength(64)
                    .HasColumnName("flat")
                    .HasComment("Квартира");

                entity.Property(e => e.LocalityId)
                    .HasColumnName("locality_id")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code")
                    .HasComment("Индекс");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.StreetId)
                    .HasColumnName("street_id")
                    .HasComment("Улица");

                entity.HasOne(d => d.Area)
                    .WithMany(p => p.AddressAreas)
                    .HasForeignKey(d => d.AreaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_area");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.AddressCities)
                    .HasForeignKey(d => d.CityId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_city");

                entity.HasOne(d => d.Locality)
                    .WithMany(p => p.AddressLocalities)
                    .HasForeignKey(d => d.LocalityId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_locality");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.AddressRegions)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.Street)
                    .WithMany(p => p.AddressStreets)
                    .HasForeignKey(d => d.StreetId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_street");
            });

            modelBuilder.Entity<AddressObject>(entity =>
            {
                entity.HasKey(e => e.AddressObjectId)
                    .HasName("pk_address_object");

                entity.ToTable("ro_address_object");

                entity.HasAnnotation("Relational:Comment", "Таблица объектов адреса");

                entity.HasIndex(e => e.AddressObjectCode, "sk_address_object_code")
                    .IsUnique();

                entity.Property(e => e.AddressObjectId)
                    .HasColumnName("address_object_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AddressObjectCode)
                    .IsRequired()
                    .HasMaxLength(19)
                    .HasColumnName("address_object_code")
                    .HasComment("Код");

                entity.Property(e => e.AddressObjectName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("address_object_name")
                    .HasComment("Наименование");

                entity.Property(e => e.AreaTaxCode)
                    .HasMaxLength(6)
                    .HasColumnName("area_tax_code")
                    .HasComment("Код тер. уч. ИФНС");

                entity.Property(e => e.Okato)
                    .HasMaxLength(11)
                    .HasColumnName("okato")
                    .HasComment("ОКАТО");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Родитель");

                entity.Property(e => e.PostalCode)
                    .HasMaxLength(6)
                    .HasColumnName("postal_code");

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Префикс");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(6)
                    .HasColumnName("tax_code")
                    .HasComment("Код ИФНС");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasOne(d => d.Prefix)
                    .WithMany(p => p.AddressObjects)
                    .HasForeignKey(d => d.PrefixId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_prefix");
            });

            modelBuilder.Entity<AddressObjectLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("pk_address_object_level_id");

                entity.ToTable("ro_address_object_level");

                entity.HasAnnotation("Relational:Comment", "Таблица уровней адреса");

                entity.HasIndex(e => e.LevelName, "sk_address_object_level_name")
                    .IsUnique();

                entity.Property(e => e.LevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("level_id")
                    .HasComment("Код");

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelNote)
                    .HasColumnType("character varying")
                    .HasColumnName("level_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<AddressObjectPrefix>(entity =>
            {
                entity.HasKey(e => e.PrefixId)
                    .HasName("pk_address_object_prefix");

                entity.ToTable("ro_address_object_prefix");

                entity.HasAnnotation("Relational:Comment", "Таблица префиксов адреса");

                entity.Property(e => e.PrefixId)
                    .ValueGeneratedNever()
                    .HasColumnName("prefix_id")
                    .HasComment("Код");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(29)
                    .HasColumnName("full_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasComment("Уровень");

                entity.Property(e => e.PrefixName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("prefix_name")
                    .HasComment("Сокращение");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.AddressObjectPrefixes)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");
            });

            modelBuilder.Entity<Agent>(entity =>
            {
                entity.HasKey(e => e.AgentId)
                    .HasName("pk_agent");

                entity.ToTable("ro_agent");

                entity.HasAnnotation("Relational:Comment", "Таблица партнеров");

                entity.HasIndex(e => e.AbonentId, "agent_abonent_id_idx");

                entity.HasIndex(e => e.ContractId, "agent_contract_id_idx");

                entity.HasIndex(e => e.Cuid, "agent_cuid_idx");

                entity.HasIndex(e => e.LevelAucId, "agent_level_auc_id_idx");

                entity.HasIndex(e => e.LevelId, "agent_level_id_idx");

                entity.HasIndex(e => e.OldParentId, "agent_old_parent_id_idx");

                entity.HasIndex(e => e.ParentId, "agent_parent_id_idx");

                entity.HasIndex(e => e.AgentGuid, "ro_agent_agent_guid_key")
                    .IsUnique();

                entity.HasIndex(e => e.BusinessRegionId, "ro_agent_business_region_id_idx");

                entity.HasIndex(e => new { e.AbonentId, e.ContractId, e.LevelId }, "sk_abonent_contract")
                    .IsUnique();

                entity.HasIndex(e => new { e.AgentName, e.AbonentId }, "sk_agent")
                    .IsUnique();

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.AgentGuid)
                    .HasColumnName("agent_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.AgentName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование");

                entity.Property(e => e.BusinessRegionId)
                    .HasColumnName("business_region_id")
                    .HasComment("Идентификатор бизнес-региона");

                entity.Property(e => e.Code1c)
                    .HasMaxLength(10)
                    .HasColumnName("code_1c")
                    .HasComment("Код партнера 1С");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Cuid)
                    .HasMaxLength(9)
                    .HasColumnName("cuid")
                    .IsFixedLength()
                    .HasComment("СМ");

                entity.Property(e => e.Distributor1c)
                    .HasColumnName("distributor_1c")
                    .HasComment("Признак агента 1С");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронная почта партнера");

                entity.Property(e => e.InvoicePrefix)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_prefix");

                entity.Property(e => e.IsBit)
                    .HasColumnName("is_bit")
                    .HasComment("Признак партнёра БИТ");

                entity.Property(e => e.LevelAucId)
                    .HasColumnName("level_auc_id")
                    .HasComment("Уровень сертификации партнера");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasDefaultValueSql("4")
                    .HasComment("Уровень");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OldParentId).HasColumnName("old_parent_id");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Владелец");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон партнера");

                entity.Property(e => e.SupportEmail)
                    .HasMaxLength(100)
                    .HasColumnName("support_email")
                    .HasComment("Электронная почта");

                entity.Property(e => e.SupportPhone)
                    .HasMaxLength(24)
                    .HasColumnName("support_phone")
                    .HasComment("Телефон горячей линии");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.Agents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.BusinessRegion)
                    .WithMany(p => p.Agents)
                    .HasForeignKey(d => d.BusinessRegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_agent_business_region");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Agents)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Cu)
                    .WithMany(p => p.Agents)
                    .HasForeignKey(d => d.Cuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cuid");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.Agents)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");

                entity.HasOne(d => d.OldParent)
                    .WithMany(p => p.InverseOldParent)
                    .HasForeignKey(d => d.OldParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_old_parent");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasMany(d => d.Messengers)
                    .WithMany(p => p.Agents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoMessengerAgent",
                        l => l.HasOne<Messenger>().WithMany().HasForeignKey("MessengerId").HasConstraintName("fk_messenger"),
                        r => r.HasOne<Agent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        j =>
                        {
                            j.HasKey("AgentId", "MessengerId").HasName("pk_messenger_agent");

                            j.ToTable("ro_messenger_agent").HasAnnotation("Relational:Comment", "Таблица предпочтительных курьеров партнеров");

                            j.HasIndex(new[] { "AgentId" }, "messenger_agent_agent_id_idx");

                            j.HasIndex(new[] { "MessengerId" }, "messenger_agent_messenger_id_idx");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");

                            j.IndexerProperty<int>("MessengerId").HasColumnName("messenger_id").HasComment("Курьер");
                        });

                entity.HasMany(d => d.Regions)
                    .WithMany(p => p.Agents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoAgentRegion",
                        l => l.HasOne<Region>().WithMany().HasForeignKey("RegionId").HasConstraintName("fk_region"),
                        r => r.HasOne<Agent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        j =>
                        {
                            j.HasKey("AgentId", "RegionId").HasName("pk_agent_region");

                            j.ToTable("ro_agent_region").HasAnnotation("Relational:Comment", "Регионы партнеров");

                            j.HasIndex(new[] { "AgentId" }, "agent_region_agent_id_idx");

                            j.HasIndex(new[] { "RegionId" }, "agent_region_region_id_idx");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");

                            j.IndexerProperty<int>("RegionId").HasColumnName("region_id").HasComment("Регион");
                        });
            });

            modelBuilder.Entity<AgentBalance>(entity =>
            {
                entity.HasKey(e => e.BalanceId)
                    .HasName("pk_agent_balance");

                entity.ToTable("ro_agent_balance");

                entity.HasAnnotation("Relational:Comment", "Ежемесячные сверки между партнером и Центром продаж");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth }, "idx_agent_balance_year_month");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth, e.AgentId }, "idx_agent_balance_year_month_agent_id");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth, e.ParentId }, "idx_agent_balance_year_month_parent_id");

                entity.HasIndex(e => e.BalanceMonth, "idx_ro_agent_balance_month");

                entity.HasIndex(e => e.ParentId, "idx_ro_agent_balance_parent_id");

                entity.HasIndex(e => e.BalanceYear, "idx_ro_agent_balance_year");

                entity.HasIndex(e => new { e.BalanceYear, e.BalanceMonth }, "idx_ro_agent_balance_year_month");

                entity.HasIndex(e => new { e.AgentId, e.BalanceYear, e.BalanceMonth, e.ParentId }, "idx_ro_gent_balance_year_month_agent_id_parent_id")
                    .IsUnique();

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор сверки");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.Ao5AgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("ao5_agent_percent_reward")
                    .HasComment("% вознаграждения агента АО5");

                entity.Property(e => e.BalanceMonth)
                    .HasColumnName("balance_month")
                    .HasComment("Месяц сверки");

                entity.Property(e => e.BalanceYear)
                    .HasColumnName("balance_year")
                    .HasComment("Год сверки");

                entity.Property(e => e.BillAcceptDate)
                    .HasColumnName("bill_accept_date")
                    .HasComment("Дата одобрения счетов 1СО");

                entity.Property(e => e.EtpAcceptDate)
                    .HasColumnName("etp_accept_date")
                    .HasComment("Дата одобрения сверки ЭТП партнёром");

                entity.Property(e => e.EtpAgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("etp_agent_percent_reward")
                    .HasComment("% вознаграждения агента ЭТП");

                entity.Property(e => e.EtpBillAcceptDate)
                    .HasColumnName("etp_bill_accept_date")
                    .HasComment("Дата одобрения счета ЭТП(Астрал-ЭТ)");

                entity.Property(e => e.EtpScAcceptDate)
                    .HasColumnName("etp_sc_accept_date")
                    .HasComment("Дата одобрения сверки ЭТП ЦП");

                entity.Property(e => e.EtpVendorAcceptDate)
                    .HasColumnName("etp_vendor_accept_date")
                    .HasComment("Дата одобрения вендором");

                entity.Property(e => e.LastUnacceptDate)
                    .HasPrecision(0)
                    .HasColumnName("last_unaccept_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата, когда сверка стала не одобреной");

                entity.Property(e => e.MercuryAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("mercury_accept_date")
                    .HasComment("Дата одобрения сверки АО");

                entity.Property(e => e.MercuryAgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("mercury_agent_percent_reward")
                    .HasComment("% вознаграждения агента Астрал-отчёт");

                entity.Property(e => e.MercuryScPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("mercury_sc_percent_reward")
                    .HasComment("% вознаграждения ЦП Астрал-отчёт");

                entity.Property(e => e.OfdBillAcceptDate)
                    .HasColumnName("ofd_bill_accept_date")
                    .HasComment("Дата одобрения счета ОФД");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("ЦП");

                entity.Property(e => e.PartnerAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("partner_accept_date")
                    .HasComment("Дата одобрения сверки партнером");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.SaleCenterAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("sale_center_accept_date")
                    .HasComment("Дата одобрения сверки Центром продаж");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentBalances)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<AgentBalanceAcceptedView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_balance_accepted_view");

                entity.Property(e => e.AcceptedDate).HasColumnName("accepted_date");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.BalanceMonth).HasColumnName("balance_month");

                entity.Property(e => e.BalanceYear).HasColumnName("balance_year");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NotAcceptedAmount).HasColumnName("not_accepted_amount");
            });

            modelBuilder.Entity<AgentBalanceBill>(entity =>
            {
                entity.HasKey(e => new { e.BillId, e.BalanceId })
                    .HasName("pk_balance_id_bill_id");

                entity.ToTable("ro_agent_balance_bill");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Ид. счёта");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Ид. баланса");

                entity.Property(e => e.BalanceGroupId)
                    .HasColumnName("balance_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Ид. группы");

                entity.HasOne(d => d.BalanceGroup)
                    .WithMany(p => p.AgentBalanceBills)
                    .HasForeignKey(d => d.BalanceGroupId)
                    .HasConstraintName("fk_balance_group");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.AgentBalanceBills)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("fk_balance");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.AgentBalanceBills)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("fk_bill");
            });

            modelBuilder.Entity<AgentBalanceDetail>(entity =>
            {
                entity.HasKey(e => e.BalanceDetailId)
                    .HasName("pk_agent_balance_detail");

                entity.ToTable("ro_agent_balance_detail");

                entity.HasAnnotation("Relational:Comment", "Позиции в сверке между партнером и Центром продаж");

                entity.HasIndex(e => e.AgentBalanceGroupId, "idx_agent_balance_detail_balance_group_id");

                entity.HasIndex(e => new { e.BalanceId, e.AgentBalanceGroupId }, "idx_agent_balance_detail_balance_id_balance_group_id");

                entity.HasIndex(e => e.ContractTariffId, "idx_balance_detail_contract_tariff_id");

                entity.HasIndex(e => e.AccrRepresentId, "idx_ro_agent_balance_detail_accr_represent_id");

                entity.HasIndex(e => e.BalanceId, "idx_ro_agent_balance_detail_balance_id");

                entity.HasIndex(e => e.CompanyGroup2Id, "idx_ro_agent_balance_detail_company_group_id");

                entity.HasIndex(e => e.UpdateRequired, "idx_ro_agent_balance_detail_update_required")
                    .HasFilter("(update_required = true)");

                entity.HasIndex(e => new { e.BalanceId, e.ContractTariffId, e.AbonentId }, "sk_agent_balance_detail")
                    .IsUnique();

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Идентификатор позиции в сверке");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Сверяемый абонент");

                entity.Property(e => e.AbonentTariffInitialDate).HasColumnName("abonent_tariff_initial_date");

                entity.Property(e => e.AbonentTariffName)
                    .HasMaxLength(200)
                    .HasColumnName("abonent_tariff_name");

                entity.Property(e => e.AbonentTariffRegDate)
                    .HasPrecision(0)
                    .HasColumnName("abonent_tariff_reg_date");

                entity.Property(e => e.AccrRepresentId)
                    .HasColumnName("accr_represent_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.AgentBalanceGroupId)
                    .HasColumnName("agent_balance_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Ид. группы");

                entity.Property(e => e.AgentCost)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_cost")
                    .HasComment("Стоимость для партнёра");

                entity.Property(e => e.AgentPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("agent_percent_reward")
                    .HasComment("% вознаграждения партнёра");

                entity.Property(e => e.AgentSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_sum_reward")
                    .HasComment("Сумма вознаграждения партнёра");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Сверка");

                entity.Property(e => e.CaServicePrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("ca_service_price")
                    .HasComment("Услуги УЦ");

                entity.Property(e => e.CcPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("cc_percent_reward")
                    .HasComment("% вознаграждения ЦК");

                entity.Property(e => e.CcSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("cc_sum_reward")
                    .HasComment("Сумма вознаграждения ЦК");

                entity.Property(e => e.CompanyGroup2Id)
                    .HasColumnName("company_group2_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupInn)
                    .HasMaxLength(12)
                    .HasColumnName("company_group_inn")
                    .HasComment("ИНН головной организации ГК");

                entity.Property(e => e.CompanyGroupKpp)
                    .HasMaxLength(12)
                    .HasColumnName("company_group_kpp")
                    .HasComment("КПП головной организации ГК");

                entity.Property(e => e.CompanyGroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("company_group_name")
                    .HasComment("Наименование ГК");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Контракт-тариф");

                entity.Property(e => e.Cost)
                    .HasPrecision(15, 2)
                    .HasColumnName("cost")
                    .HasComment("Стоимость");

                entity.Property(e => e.Cost1c)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost_1c")
                    .HasComment("Стоимость для 1С");

                entity.Property(e => e.CreationDate)
                    .HasPrecision(0)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.Deleted)
                    .HasColumnName("deleted")
                    .HasComment("Удалено");

                entity.Property(e => e.DeletedUserId)
                    .HasColumnName("deleted_user_id")
                    .HasComment("Удаливший пользователь");

                entity.Property(e => e.DeletionDate)
                    .HasPrecision(0)
                    .HasColumnName("deletion_date")
                    .HasComment("Дата удаления");

                entity.Property(e => e.DiscountArticle)
                    .HasMaxLength(50)
                    .HasColumnName("discount_article")
                    .HasComment("Артикул скидки");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("документ, подтверждающий скидку");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.IsBonus)
                    .HasColumnName("is_bonus")
                    .HasComment("Бонусное подключение");

                entity.Property(e => e.IsExtension)
                    .HasColumnName("is_extension")
                    .HasComment("Признак расширения тарифа");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Подключение в рамках подписки ИТС ПРОФ");

                entity.Property(e => e.IsPaid)
                    .HasColumnName("is_paid")
                    .HasComment("Платное подключение");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Первичный тариф");

                entity.Property(e => e.ItsOptionId)
                    .HasMaxLength(100)
                    .HasColumnName("its_option_id")
                    .HasComment("Ид. опции ИТС");

                entity.Property(e => e.MainTariffInitialDate).HasColumnName("main_tariff_initial_date");

                entity.Property(e => e.MainTariffRegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("main_tariff_registered_name")
                    .HasComment("Наименование основного тарифа Астрал-Отчёт");

                entity.Property(e => e.MainTariffRegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("main_tariff_registration_date")
                    .HasComment("Дата регистрации основного тарифа Астрал-Отчёт");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.NumberNew)
                    .HasColumnName("number_new")
                    .HasDefaultValueSql("1")
                    .HasComment("Новое количество");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Ид. офиса");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name")
                    .HasComment("Наименование офиса");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("% скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.PriceTariffArticle)
                    .HasMaxLength(50)
                    .HasColumnName("price_tariff_article")
                    .HasComment("Номенклатура 1С");

                entity.Property(e => e.RegisteredName)
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование тарифа");

                entity.Property(e => e.RegistraionNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("registraion_number")
                    .HasComment("Регистрационный номер продукта");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.ScCaServicePrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_ca_service_price")
                    .HasComment("Услуги УЦ ЦП");

                entity.Property(e => e.ScCost)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_cost")
                    .HasComment("Стоимость для ЦП");

                entity.Property(e => e.ScPercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("sc_percent_reward")
                    .HasComment("% вознаграждения ЦП");

                entity.Property(e => e.ScSumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_sum_reward")
                    .HasComment("Сумма вознаграждения ЦП");

                entity.Property(e => e.SpecialNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("special_number")
                    .HasComment("Специальное разрешение");

                entity.Property(e => e.SubscriberUin1c)
                    .HasMaxLength(255)
                    .HasColumnName("subscriber_uin_1c")
                    .HasComment("Ид. подписчика 1С");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Текущий тариф");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.Uin1c)
                    .HasMaxLength(255)
                    .HasColumnName("uin_1c")
                    .HasComment("Ид. пользователя 1С");

                entity.Property(e => e.UpdateRequired)
                    .HasColumnName("update_required")
                    .HasDefaultValueSql("false")
                    .HasComment("Требуется обновить запись");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.AgentBalanceDetailAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AccrRepresent)
                    .WithMany(p => p.AgentBalanceDetailAccrRepresents)
                    .HasForeignKey(d => d.AccrRepresentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_agent_balance_detail_fk2");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.AgentBalanceGroupId)
                    .HasConstraintName("ro_agent_balance_detail_agent_balance_group_id");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("ro_agent_balance_detail_fk");

                entity.HasOne(d => d.CompanyGroup2)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.CompanyGroup2Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_agent_balance_detail_fk3");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.AgentBalanceDetailCompanyGroups)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_agent_balance_detail_fk4");

                entity.HasOne(d => d.DeletedUser)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.DeletedUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_deleted_user_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_agent_balance_detail_office_id");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_agent_balance_detail_fk1");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.AgentBalanceDetails)
                    .HasForeignKey(d => d.TariffZoneId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_zone");
            });

            modelBuilder.Entity<AgentBalanceDetailChangeRequest>(entity =>
            {
                entity.HasKey(e => e.BalanceDetailChangeRequestId)
                    .HasName("pk_agent_balance_detail_change_request");

                entity.ToTable("ro_agent_balance_detail_change_request");

                entity.HasAnnotation("Relational:Comment", "Заявки на изменение позиции сверки");

                entity.HasIndex(e => e.BalanceDetailId, "agent_balance_detail_change_request_balance_detail_id_idx");

                entity.HasIndex(e => e.CreationTime, "agent_balance_detail_change_request_creation_time_idx");

                entity.HasIndex(e => e.DiscountId, "agent_balance_detail_change_request_discount_id_idx");

                entity.HasIndex(e => e.StepId, "agent_balance_detail_change_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_change_request_user_id_idx");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_detail_chang_balance_detail_change_request_seq'::regclass)")
                    .HasComment("Идентификатор заявки");

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Позиция в сверке, по которой пришло заявление на изменение");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания заявки");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.FinalPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("final_price")
                    .HasComment("Цена, утверждённая Вендором");

                entity.Property(e => e.RequestPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("request_price")
                    .HasComment("Цена, которую предлагает Партнер или ЦП");

                entity.Property(e => e.StartPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("start_price")
                    .HasComment("Цена, указанная в сверке");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.ToDelete)
                    .HasColumnName("to_delete")
                    .HasComment("Флаг запроса на удаление позиции");

                entity.Property(e => e.UpdateTime)
                    .HasColumnName("update_time")
                    .HasComment("Время последнего обновления заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, подавший заявку на изменение позиции");

                entity.HasOne(d => d.BalanceDetail)
                    .WithMany(p => p.AgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.BalanceDetailId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_balance_detail");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.AgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.DiscountId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.AgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AgentBalanceDetailChangeRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<AgentBalanceDetailChangeRequestComment>(entity =>
            {
                entity.HasKey(e => e.RequestCommentId)
                    .HasName("pk_agent_balance_detail_change_request_comment");

                entity.ToTable("ro_agent_balance_detail_change_request_comment");

                entity.HasAnnotation("Relational:Comment", "Комментарии по заявке на изменение позиции в сверке");

                entity.HasIndex(e => e.CreationTime, "agent_balance_detail_change_request_comment_creation_time_idx");

                entity.HasIndex(e => e.BalanceDetailChangeRequestId, "agent_balance_detail_change_request_comment_request_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_change_request_comment_user_id_idx");

                entity.Property(e => e.RequestCommentId)
                    .HasColumnName("request_comment_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_detail_change_request_c_request_comment_id_seq'::regclass)")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasComment("Заявка на изменение позиции в сверке");

                entity.Property(e => e.CommentText)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnName("comment_text")
                    .HasComment("Текст комментария");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время добавления комментария");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, добавивший комментарий");

                entity.HasOne(d => d.BalanceDetailChangeRequest)
                    .WithMany(p => p.AgentBalanceDetailChangeRequestComments)
                    .HasForeignKey(d => d.BalanceDetailChangeRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_balance_detail_change_request");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AgentBalanceDetailChangeRequestComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Files)
                    .WithMany(p => p.RequestComments)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoAgentBalanceDetailChangeRequestFile",
                        l => l.HasOne<File>().WithMany().HasForeignKey("FileId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_file"),
                        r => r.HasOne<AgentBalanceDetailChangeRequestComment>().WithMany().HasForeignKey("RequestCommentId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_request_comment"),
                        j =>
                        {
                            j.HasKey("RequestCommentId", "FileId").HasName("pk_agent_balance_detail_change_request_file");

                            j.ToTable("ro_agent_balance_detail_change_request_file").HasAnnotation("Relational:Comment", "Прикреплённые файлы к комментарию по заявке на изменение позиции в сверке");

                            j.HasIndex(new[] { "RequestCommentId" }, "agent_balance_detail_change_request_file_request_comment_id_idx");

                            j.HasIndex(new[] { "FileId" }, "agent_balance_detail_request_file_file_id_idx");

                            j.IndexerProperty<int>("RequestCommentId").HasColumnName("request_comment_id").HasComment("Комментарий по заявке");

                            j.IndexerProperty<int>("FileId").HasColumnName("file_id").HasComment("Файл, прикреплённый к заявке");
                        });
            });

            modelBuilder.Entity<AgentBalanceDetailChangeRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.BalanceDetailChangeRequestId, e.LogTime, e.StepId })
                    .HasName("pk_agent_balance_detail_change_request_step");

                entity.ToTable("ro_agent_balance_detail_change_request_step");

                entity.HasAnnotation("Relational:Comment", "Состояния заявки на изменение позиции сверки");

                entity.HasIndex(e => e.BalanceDetailChangeRequestId, "agent_balance_detail_request_step_detail_change_request_id_idx");

                entity.HasIndex(e => e.StepId, "agent_balance_detail_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "agent_balance_detail_request_step_user_id_idx");

                entity.Property(e => e.BalanceDetailChangeRequestId)
                    .HasColumnName("balance_detail_change_request_id")
                    .HasComment("Идентификатор заявки");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время смены состояния заявки");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, сменивший состояние заявки");

                entity.HasOne(d => d.BalanceDetailChangeRequest)
                    .WithMany(p => p.AgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.BalanceDetailChangeRequestId)
                    .HasConstraintName("fk_balance_detail_change_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.AgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AgentBalanceDetailChangeRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<AgentBalanceGroup>(entity =>
            {
                entity.HasKey(e => e.AgentBalanceGroupId)
                    .HasName("pk_agent_balance_group");

                entity.ToTable("ro_agent_balance_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп продуктов сверки");

                entity.HasIndex(e => e.AgentBalanceGroupName, "sk_agent_balance_group_name")
                    .IsUnique();

                entity.Property(e => e.AgentBalanceGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Идентификатор группы");

                entity.Property(e => e.AgentBalanceGroupName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("agent_balance_group_name")
                    .HasComment("Наименование группы");
            });

            modelBuilder.Entity<AgentBalanceOffice>(entity =>
            {
                entity.HasKey(e => e.BalanceOfficeId)
                    .HasName("ro_agent_balance_office_pkey");

                entity.ToTable("ro_agent_balance_office");

                entity.HasAnnotation("Relational:Comment", "Ежемесячные сверки между партнером и офисами БИТ");

                entity.HasIndex(e => new { e.BalanceId, e.OfficeId }, "sk_agent_balance_period")
                    .IsUnique();

                entity.Property(e => e.BalanceOfficeId)
                    .HasColumnName("balance_office_id")
                    .HasDefaultValueSql("nextval('ro_agent_balance_office_agent_balance_office_id_seq'::regclass)")
                    .HasComment("Идентификатор сверки по офисам");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Баланс");

                entity.Property(e => e.OfficeAcceptDate)
                    .HasPrecision(0)
                    .HasColumnName("office_accept_date")
                    .HasComment("Дата одобрения сверки офисом");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.HasOne(d => d.Balance)
                    .WithMany(p => p.AgentBalanceOffices)
                    .HasForeignKey(d => d.BalanceId)
                    .HasConstraintName("fk_balance");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.AgentBalanceOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_balance_office");
            });

            modelBuilder.Entity<AgentBalanceProcessing>(entity =>
            {
                entity.HasKey(e => e.AgentBalanceGroupId)
                    .HasName("pk_agent_balance_processing");

                entity.ToTable("ro_agent_balance_processing");

                entity.HasAnnotation("Relational:Comment", "Таблица сверок в обработке");

                entity.Property(e => e.AgentBalanceGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Сверка");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время блокировки");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithOne(p => p.AgentBalanceProcessing)
                    .HasForeignKey<AgentBalanceProcessing>(d => d.AgentBalanceGroupId)
                    .HasConstraintName("fk_agent_balance_group");
            });

            modelBuilder.Entity<AgentBusinessRegion>(entity =>
            {
                entity.HasKey(e => e.BusinessRegionId)
                    .HasName("ro_agent_business_region_pkey");

                entity.ToTable("ro_agent_business_region");

                entity.HasAnnotation("Relational:Comment", "Таблица бизнес регионов");

                entity.Property(e => e.BusinessRegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("business_region_id")
                    .HasComment("Идентификатор бизнес-региона");

                entity.Property(e => e.BusinessRegionName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("business_region_name")
                    .HasComment("Название бизнес-региона");
            });

            modelBuilder.Entity<AgentContract>(entity =>
            {
                entity.HasKey(e => e.AgentContractId)
                    .HasName("pk_agent_contract");

                entity.ToTable("ro_agent_contract");

                entity.HasAnnotation("Relational:Comment", "Таблица договоров");

                entity.HasIndex(e => e.AgentId, "idx_ro_agent_contract_agent_id");

                entity.HasIndex(e => e.ContractTypeId, "idx_ro_agent_contract_contract_type_id");

                entity.HasIndex(e => e.OfficeId, "idx_ro_agent_contract_office_id");

                entity.Property(e => e.AgentContractId)
                    .HasColumnName("agent_contract_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Агент");

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("contract_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("contract_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentContracts)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.ContractType)
                    .WithMany(p => p.AgentContracts)
                    .HasForeignKey(d => d.ContractTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.AgentContracts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<AgentLevel>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("pk_agent_level_id");

                entity.ToTable("ro_agent_level");

                entity.HasAnnotation("Relational:Comment", "Таблица уровней партнеров");

                entity.HasIndex(e => e.LevelName, "sk_agent_level_name")
                    .IsUnique();

                entity.Property(e => e.LevelId)
                    .ValueGeneratedNever()
                    .HasColumnName("level_id")
                    .HasComment("Код");

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("level_name")
                    .HasComment("Наименование");

                entity.Property(e => e.LevelNote)
                    .HasColumnType("character varying")
                    .HasColumnName("level_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<AgentLocalityRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_locality_rating");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.Locality).HasColumnName("locality");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<AgentLocalityView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_locality_view");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.Locality).HasColumnName("locality");

                entity.Property(e => e.PartnerCount).HasColumnName("partner_count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.SaleCenterCount).HasColumnName("sale_center_count");
            });

            modelBuilder.Entity<AgentMerchandise>(entity =>
            {
                entity.HasKey(e => e.AgentMerchandiseId)
                    .HasName("pk_agent_merchandise");

                entity.ToTable("ro_agent_merchandise");

                entity.HasAnnotation("Relational:Comment", "Список номенклатур у партнера");

                entity.Property(e => e.AgentMerchandiseId).HasColumnName("agent_merchandise_id");

                entity.Property(e => e.BillFromAgentId)
                    .HasColumnName("bill_from_agent_id")
                    .HasComment("Агент от которого выставляется счет");

                entity.Property(e => e.BillToAgentId)
                    .HasColumnName("bill_to_agent_id")
                    .HasComment("Ид партнера которому выставляется счет");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Ид номенклатуры");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.BillFromAgent)
                    .WithMany(p => p.AgentMerchandiseBillFromAgents)
                    .HasForeignKey(d => d.BillFromAgentId)
                    .HasConstraintName("fk_bill_agent");

                entity.HasOne(d => d.BillToAgent)
                    .WithMany(p => p.AgentMerchandiseBillToAgents)
                    .HasForeignKey(d => d.BillToAgentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_agent");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.AgentMerchandises)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_merchandise");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.AgentMerchandises)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<AgentRegionRating>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_agent_region_rating");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<AgentReward>(entity =>
            {
                entity.HasKey(e => e.RewardId)
                    .HasName("pk_agent_reward");

                entity.ToTable("ro_agent_reward");

                entity.HasAnnotation("Relational:Comment", "Таблица вознаграждений партнеров");

                entity.HasIndex(e => e.AgentId, "agent_reward_agent_id_idx");

                entity.HasIndex(e => e.BonusId, "agent_reward_bonus_id_idx");

                entity.HasIndex(e => e.ContractTariffId, "agent_reward_contract_tariff_id_idx");

                entity.Property(e => e.RewardId)
                    .HasColumnName("reward_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.BonusId)
                    .HasColumnName("bonus_id")
                    .HasComment("Премия");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Тариф по договору");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.SumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Сумма вознаграждения");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentRewards)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Bonus)
                    .WithMany(p => p.AgentRewards)
                    .HasForeignKey(d => d.BonusId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_bonus");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.AgentRewards)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");
            });

            modelBuilder.Entity<AgentScheme>(entity =>
            {
                entity.HasKey(e => e.SchemeId)
                    .HasName("pk_agent_scheme");

                entity.ToTable("ro_agent_scheme");

                entity.HasAnnotation("Relational:Comment", "Таблица партнерских схем");

                entity.HasIndex(e => e.AgentId, "agent_scheme_agent_id_idx");

                entity.HasIndex(e => e.LevelId, "agent_scheme_level_id_idx");

                entity.HasIndex(e => e.ParentId, "agent_scheme_parent_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "agent_scheme_product_type_id_idx");

                entity.HasIndex(e => e.RegionId, "agent_scheme_region_id_idx");

                entity.HasIndex(e => new { e.ProductTypeId, e.TransferPointId }, "sk_transfer_point")
                    .IsUnique();

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Dealer)
                    .IsRequired()
                    .HasColumnName("dealer")
                    .HasDefaultValueSql("true")
                    .HasComment("Дилер");

                entity.Property(e => e.LevelId)
                    .HasColumnName("level_id")
                    .HasDefaultValueSql("4")
                    .HasComment("Уровень");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Принадлежность");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentSchemeAgents)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Level)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.LevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_level");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.AgentSchemeParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_parent");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.PriceId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AgentSchemes)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Bonus)
                    .WithMany(p => p.Schemes)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoBonusScheme",
                        l => l.HasOne<Bonu>().WithMany().HasForeignKey("BonusId").HasConstraintName("fk_bonus"),
                        r => r.HasOne<AgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("fk_scheme"),
                        j =>
                        {
                            j.HasKey("SchemeId", "BonusId").HasName("pk_bonus_scheme");

                            j.ToTable("ro_bonus_scheme").HasAnnotation("Relational:Comment", "Таблица премий для схемы");

                            j.HasIndex(new[] { "BonusId" }, "bonus_scheme_bonus_id_idx");

                            j.HasIndex(new[] { "SchemeId" }, "bonus_scheme_scheme_id_idx");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Схема");

                            j.IndexerProperty<int>("BonusId").HasColumnName("bonus_id").HasComment("Премия");
                        });
            });

            modelBuilder.Entity<AgentSetting>(entity =>
            {
                entity.HasKey(e => new { e.AgentId, e.SettingId })
                    .HasName("pk_agent_setting");

                entity.ToTable("ro_agent_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек агентов");

                entity.HasIndex(e => e.AgentId, "agent_setting_agent_id_idx");

                entity.HasIndex(e => e.SettingId, "agent_setting_setting_id_idx");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Агент");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.AgentSettings)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.AgentSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AgentSettings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<Altname>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_altnames");

                entity.HasAnnotation("Relational:Comment", "Таблица соотвествия");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Уровень");

                entity.Property(e => e.Newcode)
                    .HasMaxLength(19)
                    .HasColumnName("newcode")
                    .HasComment("Новый код");

                entity.Property(e => e.Oldcode)
                    .HasMaxLength(19)
                    .HasColumnName("oldcode")
                    .HasComment("Старый код");
            });

            modelBuilder.Entity<AoAbonentContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ao_abonent_contract_tariff_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<AoAbonentContractTariffViewEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ao_abonent_contract_tariff_view_ex");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Prolongated).HasColumnName("prolongated");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<Application>(entity =>
            {
                entity.HasKey(e => e.ApplicationId)
                    .HasName("pk_application");

                entity.ToTable("ro_application");

                entity.HasAnnotation("Relational:Comment", "Таблица приложений");

                entity.HasIndex(e => e.StepId, "application_step_id_idx");

                entity.HasIndex(e => e.ApplicationName, "sk_application_name")
                    .IsUnique();

                entity.Property(e => e.ApplicationId)
                    .ValueGeneratedNever()
                    .HasColumnName("application_id")
                    .HasComment("Код");

                entity.Property(e => e.ApplicationName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("application_name")
                    .HasComment("Наименование");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Description)
                    .HasMaxLength(150)
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.OffTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Applications)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<ApplicationSetting>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.SettingId })
                    .HasName("pk_application_setting");

                entity.ToTable("ro_application_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек приложений");

                entity.HasIndex(e => e.ApplicationId, "application_setting_application_id_idx");

                entity.HasIndex(e => e.SettingId, "application_setting_setting_id_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationSettings)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.ApplicationSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<ApplicationStep>(entity =>
            {
                entity.HasKey(e => new { e.ApplicationId, e.StepId, e.LogTime })
                    .HasName("pk_application_step");

                entity.ToTable("ro_application_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний приложений");

                entity.HasIndex(e => e.ApplicationId, "application_step_application_id_idx");

                entity.HasIndex(e => e.StepId, "application_step_step_id_idx");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ApplicationSteps)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ApplicationSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<Ar1cView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_ar_1c_view");

                entity.Property(e => e.Domain)
                    .HasMaxLength(100)
                    .HasColumnName("domain");

                entity.Property(e => e.MercuryId).HasColumnName("mercury_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");
            });

            modelBuilder.Entity<AstralWorkflowClient>(entity =>
            {
                entity.HasKey(e => e.WorkflowGuid)
                    .HasName("ro_astral_workflow_client_pk");

                entity.ToTable("ro_astral_workflow_client");

                entity.Property(e => e.WorkflowGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_guid");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.CreateDate).HasColumnName("create_date");

                entity.Property(e => e.GateGuid).HasColumnName("gate_guid");

                entity.Property(e => e.LastRegRequestId).HasColumnName("last_reg_request_id");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.AstralWorkflowClients)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_abonent_abonent_id_fk");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.AstralWorkflowClients)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_certificate_certificate_id_fk");

                entity.HasOne(d => d.LastRegRequest)
                    .WithMany(p => p.AstralWorkflowClients)
                    .HasForeignKey(d => d.LastRegRequestId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_astral_workflow_client_ro_reg_request_reg_request_id_fk");
            });

            modelBuilder.Entity<AstralWorkflowProcessing>(entity =>
            {
                entity.HasKey(e => e.AgentId)
                    .HasName("ro_astral_workflow_processing_pkey");

                entity.ToTable("ro_astral_workflow_processing");

                entity.Property(e => e.AgentId)
                    .ValueGeneratedNever()
                    .HasColumnName("agent_id");

                entity.Property(e => e.AutoProcessing).HasColumnName("auto_processing");
            });

            modelBuilder.Entity<Attribute>(entity =>
            {
                entity.HasKey(e => e.AttributeId)
                    .HasName("pk_attribute");

                entity.ToTable("ro_attribute");

                entity.HasAnnotation("Relational:Comment", "Таблица атрибутов (номенклатуры)");

                entity.HasIndex(e => e.AttributeTypeId, "attribute_attribute_type_id_idx");

                entity.HasIndex(e => new { e.AttributeName, e.AttributeTypeId }, "sk_attribute")
                    .IsUnique();

                entity.HasIndex(e => e.AttributeGuid, "sk_attribute_guid")
                    .IsUnique();

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AttributeGuid)
                    .HasColumnName("attribute_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.AttributeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("attribute_name")
                    .HasComment("Наименование");

                entity.Property(e => e.AttributeTypeId)
                    .HasColumnName("attribute_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.AttributeType)
                    .WithMany(p => p.Attributes)
                    .HasForeignKey(d => d.AttributeTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_attribute_type");
            });

            modelBuilder.Entity<AttributeDocumentType>(entity =>
            {
                entity.HasKey(e => new { e.AttributeId, e.DocTypeId })
                    .HasName("pk_attribute_document_type");

                entity.ToTable("ro_attribute_document_type");

                entity.HasAnnotation("Relational:Comment", "Таблица документов требуемых для атрибута");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("ИД атрибута");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("ИД типа документа");

                entity.Property(e => e.OnlyForProxy)
                    .HasColumnName("only_for_proxy")
                    .HasComment("Документ требуется только к доверенности");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.AttributeDocumentTypes)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute_id");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.AttributeDocumentTypes)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("fk_doc_id");
            });

            modelBuilder.Entity<AttributeEku>(entity =>
            {
                entity.HasKey(e => new { e.AttributeId, e.EkuId })
                    .HasName("pk_attribute_eku");

                entity.ToTable("ro_attribute_eku");

                entity.HasAnnotation("Relational:Comment", "Таблица расширений сертификата для атрибута");

                entity.HasIndex(e => e.AttributeId, "attribute_eku_attribute_id_idx");

                entity.HasIndex(e => e.EkuId, "attribute_eku_eku_id_idx");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Расширение");

                entity.Property(e => e.IsOptional).HasColumnName("is_optional");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Опциональный ОИД");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.AttributeEkus)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Eku)
                    .WithMany(p => p.AttributeEkus)
                    .HasForeignKey(d => d.EkuId)
                    .HasConstraintName("fk_eku");
            });

            modelBuilder.Entity<AttributeType>(entity =>
            {
                entity.HasKey(e => e.AttributeTypeId)
                    .HasName("pk_attribute_type");

                entity.ToTable("ro_attribute_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов атрибутов");

                entity.HasIndex(e => e.AttributeTypeName, "sk_attribute_type_name")
                    .IsUnique();

                entity.Property(e => e.AttributeTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("attribute_type_id")
                    .HasComment("Код");

                entity.Property(e => e.AttributeTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("attribute_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<AuthorizationCode>(entity =>
            {
                entity.HasKey(e => e.IdAuthorizationCode)
                    .HasName("sk_authorization_codes_pkey");

                entity.ToTable("ro_authorization_codes");

                entity.HasAnnotation("Relational:Comment", "Таблица кодов авторизации");

                entity.HasIndex(e => e.AuthorizationId, "sk_authorization_id_key")
                    .IsUnique();

                entity.HasIndex(e => e.AuthorizationSecretKey, "sk_authorization_secret_key")
                    .IsUnique();

                entity.Property(e => e.IdAuthorizationCode)
                    .HasColumnName("id_authorization_code")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorizationCount)
                    .HasColumnName("authorization_count")
                    .HasComment("Счетчик авторизации");

                entity.Property(e => e.AuthorizationId)
                    .HasColumnName("authorization_id")
                    .HasComment("Идентификатор авторизации");

                entity.Property(e => e.AuthorizationSecretKey)
                    .HasColumnName("authorization_secret_key")
                    .HasComment("Секретный ключ");
            });

            modelBuilder.Entity<Auto1cReportStatistic>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("pk_auto_1c_report_statistics");

                entity.ToTable("ro_auto_1c_report_statistics");

                entity.HasAnnotation("Relational:Comment", "Таблица для формирования автоматических отчётов по 1СО и 1С-ЭТП");

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ActiveAbonents)
                    .HasColumnName("active_abonents")
                    .HasComment("Количество активных пользователей");

                entity.Property(e => e.EightDaysCount)
                    .HasColumnName("eight_days_count")
                    .HasComment("Срок от 6 до 8 дней");

                entity.Property(e => e.EtpActiveAbonents)
                    .HasColumnName("etp_active_abonents")
                    .HasComment("Количество активных пользователей 1С-ЭТП");

                entity.Property(e => e.EtpMoreDaysCount)
                    .HasColumnName("etp_more_days_count")
                    .HasComment("ЭТП Срок от 28 дней");

                entity.Property(e => e.EtpPaRegRequests)
                    .HasColumnName("etp_pa_reg_requests")
                    .HasComment("Количество зарегистрированных заявок 1С-ЭТП(ПА)");

                entity.Property(e => e.EtpPartners)
                    .HasColumnName("etp_partners")
                    .HasComment("Количество партнеров 1С-ЭТП");

                entity.Property(e => e.EtpRecievedRegRequests)
                    .HasColumnName("etp_recieved_reg_requests")
                    .HasComment("ЭТП количество поступивших заявок");

                entity.Property(e => e.EtpRegRequests)
                    .HasColumnName("etp_reg_requests")
                    .HasComment("Количество зарегистрированных заявок 1С-ЭТП");

                entity.Property(e => e.EtpRequests)
                    .HasColumnName("etp_requests")
                    .HasComment("Количество заявок 1С-ЭТП на подключение и продление");

                entity.Property(e => e.EtpSevenDaysCount)
                    .HasColumnName("etp_seven_days_count")
                    .HasComment("ЭТП Срок от 2 до 7 дней");

                entity.Property(e => e.EtpTwentyEightDaysCount)
                    .HasColumnName("etp_twenty_eight_days_count")
                    .HasComment("ЭТП Срок от 7 до 28 дней");

                entity.Property(e => e.EtpTwoDaysCount)
                    .HasColumnName("etp_two_days_count")
                    .HasComment("ЭТП Срок от 0 до 2 дней");

                entity.Property(e => e.EtpUnactiveAbonents)
                    .HasColumnName("etp_unactive_abonents")
                    .HasComment("Количество отвала абонентов");

                entity.Property(e => e.EtpUnprocRegRequests)
                    .HasColumnName("etp_unproc_reg_requests")
                    .HasComment("ЭТП количество принятых, но неотправленных в обработку заявок");

                entity.Property(e => e.Exclusive)
                    .HasColumnName("exclusive")
                    .HasComment("Льготные");

                entity.Property(e => e.FourDaysCount)
                    .HasColumnName("four_days_count")
                    .HasComment("Срок от 2 до 4 дней");

                entity.Property(e => e.MoreDaysCount)
                    .HasColumnName("more_days_count")
                    .HasComment("Срок от 8 дней");

                entity.Property(e => e.Paid)
                    .HasColumnName("paid")
                    .HasComment("Платные");

                entity.Property(e => e.Partners)
                    .HasColumnName("partners")
                    .HasComment("Количество партнеров");

                entity.Property(e => e.RecievedRegRequests)
                    .HasColumnName("recieved_reg_requests")
                    .HasComment("Количество поступивших заявок");

                entity.Property(e => e.RegRequest)
                    .HasColumnName("reg_request")
                    .HasComment("Поступившие заявки за неделю");

                entity.Property(e => e.RegisteredAbonents)
                    .HasColumnName("registered_abonents")
                    .HasComment("Количество зарегистрированных пользователей");

                entity.Property(e => e.ReportDate)
                    .HasColumnName("report_date")
                    .HasComment("Дата отчёта");

                entity.Property(e => e.SixDaysCount)
                    .HasColumnName("six_days_count")
                    .HasComment("Срок от 4 до 6 дней");

                entity.Property(e => e.SupportStatDataCallsEtsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_calls_ets_json")
                    .HasComment("Ответ сервиса статистики работы ТП по ЭТП(звонки)");

                entity.Property(e => e.SupportStatDataCallsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_calls_json")
                    .HasComment("Ответ сервиса статистики работы ТП по 1С(звонки)");

                entity.Property(e => e.SupportStatDataIncidentsEtsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_incidents_ets_json")
                    .HasComment("Ответ сервиса статистики работы ТП(инциденты)");

                entity.Property(e => e.SupportStatDataIncidentsJson)
                    .HasColumnType("character varying")
                    .HasColumnName("support_stat_data_incidents_json")
                    .HasComment("Ответ сервиса статистики работы ТП по 1C(инциденты)");

                entity.Property(e => e.TotalBonus)
                    .HasColumnName("total_bonus")
                    .HasComment("Действующие бонусные лицензии");

                entity.Property(e => e.TotalExclusive)
                    .HasColumnName("total_exclusive")
                    .HasComment("Действующие льготные лицензии");

                entity.Property(e => e.TotalPaid)
                    .HasColumnName("total_paid")
                    .HasComment("Действующие платные лицензии");

                entity.Property(e => e.TwoDaysCount)
                    .HasColumnName("two_days_count")
                    .HasComment("Срок от 0 до 2 дней");

                entity.Property(e => e.UnactiveExclusive)
                    .HasColumnName("unactive_exclusive")
                    .HasComment("Отвал льготных лицензий");

                entity.Property(e => e.UnactivePaid)
                    .HasColumnName("unactive_paid")
                    .HasComment("Отвал платных лицензий");

                entity.Property(e => e.UnprocRegRequests)
                    .HasColumnName("unproc_reg_requests")
                    .HasComment("Количество принятых, но не отправленных в обработку заявок");
            });

            modelBuilder.Entity<BalanceBuildTask>(entity =>
            {
                entity.HasKey(e => e.BalanceBuildTaskId)
                    .HasName("pk_balance_build_task_id");

                entity.ToTable("ro_balance_build_task");

                entity.HasAnnotation("Relational:Comment", "Таблица задач по построению сверок");

                entity.HasIndex(e => new { e.AgentBalanceGroupId, e.BalanceYear, e.BalanceMonth, e.StepId }, "idx_balance_build_task_group_year_month_step");

                entity.Property(e => e.BalanceBuildTaskId)
                    .HasColumnName("balance_build_task_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentBalanceGroupId)
                    .HasColumnName("agent_balance_group_id")
                    .HasComment("Тип сверки");

                entity.Property(e => e.BalanceMonth)
                    .HasColumnName("balance_month")
                    .HasComment("Месяц сверки");

                entity.Property(e => e.BalanceYear)
                    .HasColumnName("balance_year")
                    .HasComment("Год сверки");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания задачи");

                entity.Property(e => e.FinishTime)
                    .HasPrecision(0)
                    .HasColumnName("finish_time")
                    .HasComment("Время окончания выполнения задачи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasComment("Время начала выполнения задачи");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, создавший задачу");

                entity.HasOne(d => d.AgentBalanceGroup)
                    .WithMany(p => p.BalanceBuildTasks)
                    .HasForeignKey(d => d.AgentBalanceGroupId)
                    .HasConstraintName("fk_agent_balance_group");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.BalanceBuildTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.BalanceBuildTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.HasKey(e => e.Bic)
                    .HasName("ro_bank_pkey");

                entity.ToTable("ro_bank");

                entity.HasAnnotation("Relational:Comment", "Справочник банков");

                entity.Property(e => e.Bic)
                    .HasMaxLength(9)
                    .HasColumnName("bic")
                    .HasComment("БИК");

                entity.Property(e => e.BankName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("bank_name")
                    .HasComment("Наименование банка");

                entity.Property(e => e.City)
                    .HasColumnType("character varying")
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.CorrespondentAccount)
                    .HasMaxLength(20)
                    .HasColumnName("correspondent_account")
                    .HasComment("Корреспондентский счёт");

                entity.Property(e => e.OffDate)
                    .HasColumnName("off_date")
                    .HasComment("Дата отключения");
            });

            modelBuilder.Entity<BillDocument>(entity =>
            {
                entity.HasKey(e => e.BillDocumentId)
                    .HasName("pk_bill_document");

                entity.ToTable("ro_bill_document");

                entity.HasIndex(e => e.BillId, "bill_document_bill_id_idx");

                entity.HasIndex(e => e.DocumentId, "bill_document_document_id_idx");

                entity.HasIndex(e => e.DocumentTypeId, "bill_document_document_type_id_idx");

                entity.Property(e => e.BillDocumentId).HasColumnName("bill_document_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.DocumentDate)
                    .HasPrecision(0)
                    .HasColumnName("document_date");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("document_number");

                entity.Property(e => e.DocumentTypeId).HasColumnName("document_type_id");

                entity.Property(e => e.PaidSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("paid_sum")
                    .HasComment("Сумма платежа");

                entity.Property(e => e.PaymentGuid)
                    .HasColumnName("payment_guid")
                    .HasComment("Идентификатор платежа");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.BillDocuments)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_bill");

                entity.HasOne(d => d.DocumentType)
                    .WithMany(p => p.BillDocuments)
                    .HasForeignKey(d => d.DocumentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_document_type");
            });

            modelBuilder.Entity<BillDocumentType>(entity =>
            {
                entity.HasKey(e => e.DocumentTypeId)
                    .HasName("pk_bill_document_type");

                entity.ToTable("ro_bill_document_type");

                entity.Property(e => e.DocumentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("document_type_id");

                entity.Property(e => e.DocumentTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("document_type_name");
            });

            modelBuilder.Entity<BillView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_bill_view");

                entity.Property(e => e.ActDocDate)
                    .HasPrecision(0)
                    .HasColumnName("act_doc_date");

                entity.Property(e => e.ActNdsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("act_nds_doc_date");

                entity.Property(e => e.ActNdsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("act_nds_number");

                entity.Property(e => e.ActNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("act_number");

                entity.Property(e => e.BillDate)
                    .HasPrecision(0)
                    .HasColumnName("bill_date");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.BillNdsSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_nds_sum");

                entity.Property(e => e.BillNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("bill_number");

                entity.Property(e => e.BillPayedSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_payed_sum");

                entity.Property(e => e.BillTotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_total_sum");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time");

                entity.Property(e => e.CancelTime)
                    .HasPrecision(0)
                    .HasColumnName("cancel_time");

                entity.Property(e => e.InvoiceDocDate)
                    .HasPrecision(0)
                    .HasColumnName("invoice_doc_date");

                entity.Property(e => e.InvoiceNdsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("invoice_nds_doc_date");

                entity.Property(e => e.InvoiceNdsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_nds_number");

                entity.Property(e => e.InvoiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_number");

                entity.Property(e => e.InvoiceReturnTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_return_type_name");

                entity.Property(e => e.IsSent).HasColumnName("is_sent");

                entity.Property(e => e.Notice)
                    .HasColumnType("character varying")
                    .HasColumnName("notice");

                entity.Property(e => e.PaidDate).HasColumnName("paid_date");

                entity.Property(e => e.ProductDocDate)
                    .HasPrecision(0)
                    .HasColumnName("product_doc_date");

                entity.Property(e => e.ProductNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("product_number");

                entity.Property(e => e.ProductndsDocDate)
                    .HasPrecision(0)
                    .HasColumnName("productnds_doc_date");

                entity.Property(e => e.ProductndsNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("productnds_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<BlockedRequisite>(entity =>
            {
                entity.HasKey(e => e.BlockedRequisiteId)
                    .HasName("ro_blocked_requisite_pkey");

                entity.ToTable("ro_blocked_requisite");

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "idx_blocked_requisite_inn_kpp")
                    .IsUnique();

                entity.HasIndex(e => e.Ogrn, "idx_blocked_requisite_ogrn");

                entity.HasIndex(e => e.Snils, "idx_blocked_requisite_snils")
                    .IsUnique();

                entity.Property(e => e.BlockedRequisiteId)
                    .HasColumnName("blocked_requisite_id")
                    .HasComment("Ид");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания записи");

                entity.Property(e => e.FirstName)
                    .HasMaxLength(64)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LastName)
                    .HasMaxLength(64)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(64)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(128)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.BlockedRequisites)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_blocked_requisite_user_id");
            });

            modelBuilder.Entity<Bonu>(entity =>
            {
                entity.HasKey(e => e.BonusId)
                    .HasName("pk_bonus");

                entity.ToTable("ro_bonus");

                entity.HasAnnotation("Relational:Comment", "Таблица премий");

                entity.HasIndex(e => e.BonusTypeId, "bonus_bonus_type_id_idx");

                entity.Property(e => e.BonusId)
                    .HasColumnName("bonus_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BonusName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("bonus_name")
                    .HasComment("Наименование");

                entity.Property(e => e.BonusTypeId)
                    .HasColumnName("bonus_type_id")
                    .HasComment("Тип премии");

                entity.Property(e => e.BonusValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("bonus_value")
                    .HasComment("Значение");

                entity.Property(e => e.MaxNumber)
                    .HasColumnName("max_number")
                    .HasComment("Максимальное количество");

                entity.Property(e => e.MinNumber)
                    .HasColumnName("min_number")
                    .HasComment("Минимальное количество");

                entity.Property(e => e.Percent)
                    .IsRequired()
                    .HasColumnName("percent")
                    .HasDefaultValueSql("true")
                    .HasComment("Относительная/абсолютная");

                entity.HasOne(d => d.BonusType)
                    .WithMany(p => p.Bonus)
                    .HasForeignKey(d => d.BonusTypeId)
                    .HasConstraintName("fk_bonus_type");
            });

            modelBuilder.Entity<BonusType>(entity =>
            {
                entity.HasKey(e => e.BonusTypeId)
                    .HasName("pk_bonus_type");

                entity.ToTable("ro_bonus_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов премий");

                entity.HasIndex(e => e.BonusTypeName, "sk_bonus_type_name")
                    .IsUnique();

                entity.Property(e => e.BonusTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("bonus_type_id")
                    .HasComment("Код");

                entity.Property(e => e.BonusTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("bonus_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<BulkSkziLicenseUploadTask>(entity =>
            {
                entity.HasKey(e => e.BulkSkziLicenseUploadTaskId)
                    .HasName("pk_bulk_skzi_license_upload_task");

                entity.ToTable("ro_bulk_skzi_license_upload_task");

                entity.Property(e => e.BulkSkziLicenseUploadTaskId)
                    .HasColumnName("bulk_skzi_license_upload_task_id")
                    .HasDefaultValueSql("nextval('ro_bulk_skzi_license_upload_t_bulk_skzi_license_upload_task_seq'::regclass)");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.FinishTime)
                    .HasPrecision(0)
                    .HasColumnName("finish_time");

                entity.Property(e => e.LicenseListFileId).HasColumnName("license_list_file_id");

                entity.Property(e => e.LicensesPdfFileId).HasColumnName("licenses_pdf_file_id");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.LicenseListFile)
                    .WithMany(p => p.BulkSkziLicenseUploadTaskLicenseListFiles)
                    .HasForeignKey(d => d.LicenseListFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_license_list_file");

                entity.HasOne(d => d.LicensesPdfFile)
                    .WithMany(p => p.BulkSkziLicenseUploadTaskLicensesPdfFiles)
                    .HasForeignKey(d => d.LicensesPdfFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_licenses_pdf_file");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.BulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.MerchandiseId)
                    .HasConstraintName("ro_bulk_skzi_license_upload_task_merchandise_id_fkey");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.BulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.BulkSkziLicenseUploadTasks)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<Ca>(entity =>
            {
                entity.HasKey(e => e.CaId)
                    .HasName("pk_ca");

                entity.ToTable("ro_ca");

                entity.HasAnnotation("Relational:Comment", "Таблица центров сертификации");

                entity.HasIndex(e => e.DefaultCuid, "ca_default_cuid_idx");

                entity.HasIndex(e => e.Inn, "ca_inn_idx");

                entity.HasIndex(e => e.CaName, "sk_ca_name")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateId, "sk_certificate")
                    .IsUnique();

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("ca_name")
                    .HasComment("Наименование");

                entity.Property(e => e.CaShortName)
                    .HasMaxLength(255)
                    .HasColumnName("ca_short_name")
                    .HasComment("Внешнее имя");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Cертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DefaultCuid)
                    .HasMaxLength(9)
                    .HasColumnName("default_cuid")
                    .IsFixedLength()
                    .HasComment("СМ по умолчанию");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН УЦ");

                entity.Property(e => e.IsCryptopro)
                    .HasColumnName("is_cryptopro")
                    .HasComment("Крипто ПРО");

                entity.Property(e => e.IsQualified)
                    .HasColumnName("is_qualified")
                    .HasComment("Квалифицированный");

                entity.Property(e => e.IsSolid)
                    .HasColumnName("is_solid")
                    .HasComment("Признак СУЦ(Солидный УЦ)");

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("Издатель");

                entity.Property(e => e.Mnemonic)
                    .HasMaxLength(50)
                    .HasColumnName("mnemonic")
                    .HasComment("Мнемоника");

                entity.Property(e => e.NetNumber)
                    .HasMaxLength(4)
                    .HasColumnName("net_number")
                    .HasComment("Номер сети ViPNet");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PolicyOid)
                    .HasMaxLength(40)
                    .HasColumnName("policy_oid")
                    .HasComment("Объектный идентификатор политики");

                entity.Property(e => e.PolicyUrl)
                    .HasMaxLength(100)
                    .HasColumnName("policy_url")
                    .HasComment("Адрес документа политики");

                entity.Property(e => e.PrefixDuc)
                    .HasMaxLength(3)
                    .HasColumnName("prefix_duc")
                    .HasComment("Префикс ДУЦ");

                entity.Property(e => e.SystemNameDuc)
                    .HasMaxLength(20)
                    .HasColumnName("system_name_duc")
                    .HasComment("Системное имя ДУЦ");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.Ca)
                    .HasForeignKey<Ca>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.DefaultCu)
                    .WithMany(p => p.Cas)
                    .HasForeignKey(d => d.DefaultCuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_default_cuid");

                entity.HasOne(d => d.Issuer)
                    .WithMany(p => p.Cas)
                    .HasForeignKey(d => d.IssuerId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("issuer_fk");
            });

            modelBuilder.Entity<CaAccreditation>(entity =>
            {
                entity.HasKey(e => e.CaAccreditationId)
                    .HasName("ro_ca_accreditation_pk");

                entity.ToTable("ro_ca_accreditation");

                entity.HasAnnotation("Relational:Comment", "Таблица аккредитаций УЦ");

                entity.HasIndex(e => e.CaId, "ca_id_index");

                entity.Property(e => e.CaAccreditationId)
                    .HasColumnName("ca_accreditation_id")
                    .HasComment("Идентификатор аккредитации");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.ReceivedAt)
                    .HasPrecision(0)
                    .HasColumnName("received_at")
                    .HasComment("Дата получения аккредитации");

                entity.Property(e => e.RevokedAt)
                    .HasPrecision(0)
                    .HasColumnName("revoked_at")
                    .HasComment("Дата отзыва аккредитации");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaAccreditations)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("ca_fk");
            });

            modelBuilder.Entity<CaAction>(entity =>
            {
                entity.HasKey(e => e.ActionId)
                    .HasName("pk_ca_action");

                entity.ToTable("ro_ca_action");

                entity.HasAnnotation("Relational:Comment", "Действие на УЦ");

                entity.HasIndex(e => e.ActionDescription, "sk_ca_action")
                    .IsUnique();

                entity.Property(e => e.ActionId)
                    .ValueGeneratedNever()
                    .HasColumnName("action_id")
                    .HasComment("Код");

                entity.Property(e => e.ActionDescription)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("action_description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<CaCertificate>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.CertificateId })
                    .HasName("pk_ca_certificate");

                entity.ToTable("ro_ca_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов ЦС");

                entity.HasIndex(e => e.CaId, "ca_certificate_ca_id_idx");

                entity.HasIndex(e => e.CertificateId, "ca_certificate_certificate_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Центр сертификации");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaCertificates)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CaCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");
            });

            modelBuilder.Entity<CaMessenger>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.MessengerId })
                    .HasName("pk_ca_messenger");

                entity.ToTable("ro_ca_messenger");

                entity.HasAnnotation("Relational:Comment", "Таблица связи УЦ и курьеров");

                entity.HasIndex(e => e.CaId, "ca_messenger_ca_id_idx");

                entity.HasIndex(e => e.MessengerId, "ca_messenger_messenger_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaMessengers)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.CaMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<CaProductType>(entity =>
            {
                entity.HasKey(e => new { e.CaId, e.ProductTypeId })
                    .HasName("pk_ca_product_type");

                entity.ToTable("ro_ca_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица разрешенных УЦ для типа программы");

                entity.HasIndex(e => e.CaId, "ca_product_type_ca_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "ca_product_type_product_type_id_idx");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип программы");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Является УЦ по умолчанию для типа продукта");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения УЦ для типа продукта");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaProductTypes)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.CaProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<CaRequestApi>(entity =>
            {
                entity.HasKey(e => e.CaRequestApiId)
                    .HasName("pk_ca_request_api");

                entity.ToTable("ro_ca_request_api");

                entity.HasAnnotation("Relational:Comment", "API для запросов на сертификат");

                entity.HasIndex(e => e.CaId, "sk_ca_id")
                    .IsUnique();

                entity.Property(e => e.CaRequestApiId)
                    .ValueGeneratedNever()
                    .HasColumnName("ca_request_api_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.CallbackUrl)
                    .IsRequired()
                    .HasColumnName("callback_url")
                    .HasComment("Url отправки ответа (сертификата) от внешней системы");

                entity.Property(e => e.EntrypointUrl)
                    .IsRequired()
                    .HasColumnName("entrypoint_url")
                    .HasComment("Url для отправки запроса на сертификат");

                entity.Property(e => e.ExternalCaGuid)
                    .HasColumnName("external_ca_guid")
                    .HasComment("Идентификатор УЦ во внешней системе");

                entity.Property(e => e.OffTime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("off_time")
                    .HasComment("неактивен (not null)");

                entity.HasOne(d => d.Ca)
                    .WithOne(p => p.CaRequestApi)
                    .HasForeignKey<CaRequestApi>(d => d.CaId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_ro_ca_request_api");
            });

            modelBuilder.Entity<CaService>(entity =>
            {
                entity.HasKey(e => new { e.CaServiceTypeId, e.SchemeId })
                    .HasName("idx_scheme_id_service_type_id");

                entity.ToTable("ro_ca_service");

                entity.HasIndex(e => e.CaServiceTypeId, "fki_ca_service_type_id");

                entity.HasIndex(e => e.SchemeId, "fki_scheme_id");

                entity.Property(e => e.CaServiceTypeId)
                    .HasColumnName("ca_service_type_id")
                    .HasComment("Тип услуги");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Схема");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.HasOne(d => d.CaServiceType)
                    .WithMany(p => p.CaServices)
                    .HasForeignKey(d => d.CaServiceTypeId)
                    .HasConstraintName("fk_ca_service_type_id");

                entity.HasOne(d => d.Scheme)
                    .WithMany(p => p.CaServices)
                    .HasForeignKey(d => d.SchemeId)
                    .HasConstraintName("fk_scheme_id");
            });

            modelBuilder.Entity<CaServiceType>(entity =>
            {
                entity.HasKey(e => e.CaServiceTypeId)
                    .HasName("ro_ca_service_type_pkey");

                entity.ToTable("ro_ca_service_type");

                entity.HasIndex(e => e.CaServiceTypeName, "idx_ca_service_type_name")
                    .IsUnique();

                entity.Property(e => e.CaServiceTypeId)
                    .HasColumnName("ca_service_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaServiceTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("ca_service_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<CaSetting>(entity =>
            {
                entity.HasKey(e => e.CaSettingId)
                    .HasName("pk_ca_setting");

                entity.ToTable("ro_ca_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек УЦ");

                entity.HasIndex(e => e.CaId, "ca_setting_ca_id_idx");

                entity.HasIndex(e => e.SettingId, "ca_setting_setting_id_idx");

                entity.Property(e => e.CaSettingId)
                    .HasColumnName("ca_setting_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaSettings)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.CaSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<CaTemplate>(entity =>
            {
                entity.HasKey(e => e.TemplateId)
                    .HasName("pk_ca_template");

                entity.ToTable("ro_ca_template");

                entity.HasAnnotation("Relational:Comment", "Таблица шаблонов для УЦ");

                entity.HasIndex(e => e.CaId, "ca_template_ca_id_idx");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Удостоверяющий центр");

                entity.Property(e => e.TemplateOid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("template_oid")
                    .HasComment("Идентификатор шаблона");

                entity.Property(e => e.TemplateTypeId)
                    .HasColumnName("template_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Идентификатор шаблона");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.CaTemplates)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.TemplateType)
                    .WithMany(p => p.CaTemplates)
                    .HasForeignKey(d => d.TemplateTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template_type");
            });

            modelBuilder.Entity<CaTemplateAttribute>(entity =>
            {
                entity.HasKey(e => new { e.CaTemplateId, e.AttributeId })
                    .HasName("ro_ca_template_attribute_pk");

                entity.ToTable("ro_ca_template_attribute");

                entity.HasAnnotation("Relational:Comment", "Таблица атрибутов шаблонов УЦ");

                entity.HasIndex(e => e.CaTemplateId, "ca_template_attribute_template_idx");

                entity.HasIndex(e => e.AttributeId, "ro_ca_template_attribute_attribute_idx");

                entity.HasIndex(e => e.ValidityUnitId, "ro_ca_template_attribute_validity_unit_id_idx");

                entity.Property(e => e.CaTemplateId)
                    .HasColumnName("ca_template_id")
                    .HasComment("Шаблон УЦ");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Ед. времени срока");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.CaTemplateAttributes)
                    .HasForeignKey(d => d.AttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.CaTemplate)
                    .WithMany(p => p.CaTemplateAttributes)
                    .HasForeignKey(d => d.CaTemplateId)
                    .HasConstraintName("fk_template");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.CaTemplateAttributes)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<CaTemplateType>(entity =>
            {
                entity.HasKey(e => e.TemplateTypeId)
                    .HasName("ro_ca_template_type_pkey");

                entity.ToTable("ro_ca_template_type");

                entity.HasAnnotation("Relational:Comment", "Шаблоны Крипто про");

                entity.Property(e => e.TemplateTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("template_type_id")
                    .HasComment("Идентификатор шаблона");

                entity.Property(e => e.TemplateName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("template_name")
                    .HasComment("Наименование шаблона");
            });

            modelBuilder.Entity<CallbackRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId)
                    .HasName("pk_callback_request");

                entity.ToTable("ro_callback_request");

                entity.HasAnnotation("Relational:Comment", "Таблица запросов обратных звонков в call-center");

                entity.HasIndex(e => e.CallbackRequestTypeId, "callback_request_callback_request_type_id_idx");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackRequestTypeId)
                    .HasColumnName("callback_request_type_id")
                    .HasComment("Тип запроса на обратный звонок");

                entity.Property(e => e.CalloutId)
                    .HasColumnName("callout_id")
                    .HasComment("Номер задачи от call-center");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DiagReportId)
                    .HasMaxLength(11)
                    .HasColumnName("diag_report_id")
                    .HasComment("Идентификатор диагностического отчета");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН абонента");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Имя абонента");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(11)
                    .HasColumnName("phone")
                    .HasComment("Номер телефона");

                entity.HasOne(d => d.CallbackRequestType)
                    .WithMany(p => p.CallbackRequests)
                    .HasForeignKey(d => d.CallbackRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_callback_request_type");
            });

            modelBuilder.Entity<CallbackRequestType>(entity =>
            {
                entity.HasKey(e => e.CallbackRequestTypeId)
                    .HasName("pk_callback_request_type");

                entity.ToTable("ro_callback_request_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов запросов на обратный звонок");

                entity.HasIndex(e => e.CallbackRequestTypeName, "sk_callback_request_type_name")
                    .IsUnique();

                entity.Property(e => e.CallbackRequestTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("callback_request_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CallbackRequestTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("callback_request_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.HasKey(e => e.CategoryId)
                    .HasName("pk_category");

                entity.ToTable("ro_category");

                entity.HasAnnotation("Relational:Comment", "Таблица категорий абонентов");

                entity.HasIndex(e => e.CategoryName, "sk_category_name")
                    .IsUnique();

                entity.Property(e => e.CategoryId)
                    .ValueGeneratedNever()
                    .HasColumnName("category_id")
                    .HasComment("Код");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("category_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<CcItsBalance>(entity =>
            {
                entity.HasKey(e => e.BalanceId)
                    .HasName("ro_competence_center_its_reward_pkey");

                entity.ToTable("ro_cc_its_balance");

                entity.HasIndex(e => new { e.AgentId, e.Year, e.Month }, "ro_competence_center_its_reward_idx")
                    .IsUnique();

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("ЦК");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("% вознаграждения");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.CcItsBalances)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("ro_competence_center_its_reward_fk");
            });

            modelBuilder.Entity<CcItsBalanceDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_cc_its_balance_detail");

                entity.HasIndex(e => new { e.BalanceId, e.AbonentId, e.ContractTariffId }, "ro_cc_its_balance_detail_idx")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Идентификатор абонента");

                entity.Property(e => e.BalanceId)
                    .HasColumnName("balance_id")
                    .HasComment("Идентификатор баланса");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Идентификатор тарифа по договору");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Позиция по вознаграждению за ИТС");

                entity.Property(e => e.SumReward)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Сумма вознаграждения");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.AbonentId)
                //    .HasConstraintName("ro_cc_its_balance_detail_fk1");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.BalanceId)
                //    .HasConstraintName("ro_cc_its_balance_detail_fk");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.ContractTariffId)
                //    .HasConstraintName("ro_cc_its_balance_detail_fk2");
            });

            modelBuilder.Entity<CemposRecipient>(entity =>
            {
                entity.HasKey(e => e.CemposRecipientId)
                    .HasName("ro_cempos_recipient_pkey");

                entity.ToTable("ro_cempos_recipient");

                entity.HasIndex(e => e.RegionCode, "idx_cempos_recipient_region_code");

                entity.Property(e => e.CemposRecipientId)
                    .HasColumnName("cempos_recipient_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид");

                entity.Property(e => e.City)
                    .HasMaxLength(100)
                    .HasColumnName("city")
                    .HasComment("Город");

                entity.Property(e => e.Date)
                    .HasColumnName("date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Завершение перехода");

                entity.Property(e => e.RecipientCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientCodeOld)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code_old")
                    .HasComment("Старый код");

                entity.Property(e => e.RecipientName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionCode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код региона");
            });

            modelBuilder.Entity<CertTemplate>(entity =>
            {
                entity.HasKey(e => e.CertTemplateId)
                    .HasName("pk_cert_template");

                entity.ToTable("ro_cert_template");

                entity.HasAnnotation("Relational:Comment", "Таблица шаблонов сертификатов");

                entity.HasIndex(e => e.CertTemplateName, "sk_cert_template_name")
                    .IsUnique();

                entity.Property(e => e.CertTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("cert_template_id")
                    .HasComment("Код");

                entity.Property(e => e.CertTemplateName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("cert_template_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<CertTemplateEku>(entity =>
            {
                entity.HasKey(e => new { e.CertTemplateId, e.EkuId })
                    .HasName("pk_cert_template_eku");

                entity.ToTable("ro_cert_template_eku");

                entity.HasAnnotation("Relational:Comment", "Таблица расширений для шаблонов сертификатов");

                entity.HasIndex(e => e.CertTemplateId, "cert_template_eku_cert_template_id_idx");

                entity.HasIndex(e => e.EkuId, "cert_template_eku_eku_id_idx");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Расширение");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательное");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.CertTemplateEkus)
                    .HasForeignKey(d => d.CertTemplateId)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Eku)
                    .WithMany(p => p.CertTemplateEkus)
                    .HasForeignKey(d => d.EkuId)
                    .HasConstraintName("fk_eku");
            });

            modelBuilder.Entity<CertTemplateProductType>(entity =>
            {
                entity.HasKey(e => new { e.CertTemplateId, e.ProductTypeId })
                    .HasName("pk_cert_template_product_type");

                entity.ToTable("ro_cert_template_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица разрешенных шаблонов сертификата для типа программы");

                entity.HasIndex(e => e.CertTemplateId, "cert_template_product_type_cert_template_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "cert_template_product_type_product_type_id_idx");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип программы");

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.CertTemplateProductTypes)
                    .HasForeignKey(d => d.CertTemplateId)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.CertTemplateProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<Certificate>(entity =>
            {
                entity.HasKey(e => e.CertificateId)
                    .HasName("pk_certificate");

                entity.ToTable("ro_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов");

                entity.HasIndex(e => e.CertId, "certificate_cert_id_idx");

                entity.HasIndex(e => e.CertificateTypeId, "certificate_certificate_type_id_idx");

                entity.HasIndex(e => e.ReceiptId, "certificate_receipt_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_step_id_idx");

                entity.HasIndex(e => e.SubjectKeyId, "certificate_subject_key_id_idx");

                entity.HasIndex(e => e.ThumbPrint, "certificate_thumb_print_idx");

                entity.HasIndex(e => e.TrustCertificateId, "certificate_trust_certificate_id_idx");

                entity.HasIndex(e => e.EndTime, "idx_certificate_end_time");

                entity.HasIndex(e => e.InitialTime, "idx_certificate_initial_time");

                entity.HasIndex(e => new { e.CommonName, e.ThumbPrint }, "sk_certificate_cn_tp")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateGuid, "sk_certificate_guid")
                    .IsUnique();

                entity.HasIndex(e => new { e.SerialNumber, e.IssuerCommonName }, "sk_certificate_sn_icn")
                    .IsUnique();

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorityKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("authority_key_id")
                    .HasComment("Идентификатор ключа издателя");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertificateGuid)
                    .HasColumnName("certificate_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.CertificateTypeId)
                    .HasColumnName("certificate_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CommonName)
                    .HasMaxLength(300)
                    .HasColumnName("common_name")
                    .HasComment("Общее имя");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.IssuerCommonName)
                    .HasMaxLength(255)
                    .HasColumnName("issuer_common_name")
                    .HasComment("Общее имя издателя");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ReceiptId)
                    .HasColumnName("receipt_id")
                    .HasComment("Печатная форма расписки");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("serial_number")
                    .HasComment("Серийный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.SubjectKeyId)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.ThumbPrint)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("thumb_print")
                    .HasComment("Отпечаток");

                entity.Property(e => e.TrustCertificateId)
                    .HasColumnName("trust_certificate_id")
                    .HasComment("Корневой");

                entity.HasOne(d => d.CertificateType)
                    .WithMany(p => p.Certificates)
                    .HasForeignKey(d => d.CertificateTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_type");

                entity.HasOne(d => d.Receipt)
                    .WithMany(p => p.Certificates)
                    .HasForeignKey(d => d.ReceiptId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_receipt");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Certificates)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TrustCertificate)
                    .WithMany(p => p.InverseTrustCertificate)
                    .HasForeignKey(d => d.TrustCertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_trust_certificate");
            });

            modelBuilder.Entity<CertificateInProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_certificate_in_product");

                entity.Property(e => e.CertificateId).HasColumnName("certificate_id");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");
            });

            modelBuilder.Entity<CertificateIrudRegistration>(entity =>
            {
                entity.HasKey(e => e.CertificateRegistrationId)
                    .HasName("pk_certificate_registration_id");

                entity.ToTable("ro_certificate_irud_registration");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний регистрации сертификатов в ИРУД");

                entity.HasIndex(e => e.CertificateId, "ro_certificate_irud_registration_certificate_id");

                entity.HasIndex(e => e.CertificateStateId, "ro_certificate_irud_registration_certificate_state_id");

                entity.HasIndex(e => e.ProductId, "ro_certificate_irud_registration_product_id");

                entity.HasIndex(e => e.CertificateRegistrationStepId, "ro_certificate_irud_registration_registration_step_id");

                entity.HasIndex(e => e.SosId, "ro_certificate_irud_registration_sos_id");

                entity.Property(e => e.CertificateRegistrationId)
                    .HasColumnName("certificate_registration_id")
                    .HasDefaultValueSql("nextval('ro_certificate_irud_registratio_certificate_registration_id_seq'::regclass)")
                    .HasComment("Идентификатор регистрации сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Идентификатор сертификата");

                entity.Property(e => e.CertificateRegistrationStepId)
                    .HasColumnName("certificate_registration_step_id")
                    .HasComment("Идентификатор статуса процесса регистрации сертификата");

                entity.Property(e => e.CertificateStateId)
                    .HasColumnName("certificate_state_id")
                    .HasComment("Идентификатор состояния сертификата в ИРУД");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.RegistrationTime)
                    .HasColumnName("registration_time")
                    .HasComment("Время регистрации сертификата");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("Идентификатор спецоператора");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateIrudRegistrations)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.CertificateRegistrationStep)
                    .WithMany(p => p.CertificateIrudRegistrationCertificateRegistrationSteps)
                    .HasForeignKey(d => d.CertificateRegistrationStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_registration_step");

                entity.HasOne(d => d.CertificateState)
                    .WithMany(p => p.CertificateIrudRegistrationCertificateStates)
                    .HasForeignKey(d => d.CertificateStateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate_state");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CertificateIrudRegistrations)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.CertificateIrudRegistrations)
                    .HasForeignKey(d => d.SosId)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<CertificateRequest>(entity =>
            {
                entity.HasKey(e => e.CertificateRequestId)
                    .HasName("pk_certificate_request");

                entity.ToTable("ro_certificate_request");

                entity.HasAnnotation("Relational:Comment", "Таблица запросов на сертификат");

                entity.HasIndex(e => e.CertRequestId, "certificate_request_cert_request_id_idx");

                entity.HasIndex(e => e.CertificateRequestGuid, "sk_certificate_request_guid")
                    .IsUnique();

                entity.Property(e => e.CertificateRequestId)
                    .HasColumnName("certificate_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertificateRequestGuid)
                    .HasColumnName("certificate_request_guid")
                    .HasComment("Гуид");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.PublicKey)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateRequests)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_certificate_request_fk");
            });

            modelBuilder.Entity<CertificateRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateRequestId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_request_step");

                entity.ToTable("ro_certificate_request_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний продуктов");

                entity.Property(e => e.CertificateRequestId)
                    .HasColumnName("certificate_request_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnType("character varying")
                    .HasColumnName("error_msg")
                    .HasComment("Ошибка");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.PreviousStepId)
                    .HasColumnName("previous_step_id")
                    .HasComment("Предыдущие состояние");

                entity.HasOne(d => d.CertificateRequest)
                    .WithMany(p => p.CertificateRequestSteps)
                    .HasForeignKey(d => d.CertificateRequestId)
                    .HasConstraintName("fk_certificate_request");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.CertificateRequestStepNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.PreviousStep)
                    .WithMany(p => p.CertificateRequestStepPreviousSteps)
                    .HasForeignKey(d => d.PreviousStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_previous_step");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateRequestStepSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<CertificateRevocation>(entity =>
            {
                entity.HasKey(e => e.CertificateId)
                    .HasName("pk_certificate_revocation");

                entity.ToTable("ro_certificate_revocation");

                entity.HasAnnotation("Relational:Comment", "Автоматический отзыв сертификата");

                entity.HasIndex(e => e.ActionId, "certificate_revocation_action_id_idx");

                entity.HasIndex(e => e.ReasonId, "certificate_revocation_reason_id_idx");

                entity.Property(e => e.CertificateId)
                    .ValueGeneratedNever()
                    .HasColumnName("certificate_id")
                    .HasComment("Отзываемый сертификат");

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasComment("Действие");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Причина отзыва");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasComment("Время начала действия");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.CertificateRevocations)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_action");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.CertificateRevocation)
                    .HasForeignKey<CertificateRevocation>(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.CertificateRevocations)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_revocation_reason");
            });

            modelBuilder.Entity<CertificateRevokeHistory>(entity =>
            {
                entity.HasKey(e => e.CertificateRevokeHistoryId)
                    .HasName("ro_certificate_revoke_history_pkey");

                entity.ToTable("ro_certificate_revoke_history");

                entity.Property(e => e.CertificateRevokeHistoryId)
                    .HasColumnName("certificate_revoke_history_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateRevokeId)
                    .HasColumnName("certificate_revoke_id")
                    .HasComment("Заявление на отзыв сертификата");

                entity.Property(e => e.ChangeTime)
                    .HasColumnName("change_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата изменения");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.FileName)
                    .HasColumnName("file_name")
                    .HasComment("Имя файла");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус заявки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь, изменивший заявление");

                entity.HasOne(d => d.CertificateRevoke)
                    .WithMany(p => p.CertificateRevokeHistories)
                    .HasForeignKey(d => d.CertificateRevokeId)
                    .HasConstraintName("ro_certificate_revoke_history_fk1");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.CertificateRevokeHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_certificate_revoke_history_fk");
            });

            modelBuilder.Entity<CertificateRevokeRequest>(entity =>
            {
                entity.HasKey(e => e.CertificateRevokeRequestId)
                    .HasName("ro_certificate_revoke_request_pkey");

                entity.ToTable("ro_certificate_revoke_request");

                entity.Property(e => e.CertificateRevokeRequestId)
                    .HasColumnName("certificate_revoke_request_id")
                    .HasComment("Ид заявки на отзыв сертификата");

                entity.Property(e => e.BlockedTime)
                    .HasPrecision(0)
                    .HasColumnName("blocked_time")
                    .HasComment("Время блокировки");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Отозванный сертификат");

                entity.Property(e => e.Comment)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания заявки");

                entity.Property(e => e.Executor)
                    .HasColumnName("executor")
                    .HasComment("Сотрудник УЦ подтвердивший/отклонивший заявку");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Прикрепленный файл");

                entity.Property(e => e.Is1cEtpPartner)
                    .HasColumnName("is_1c_etp_partner")
                    .HasComment("Заявка от партнера 1С-ЭТП");

                entity.Property(e => e.IsShowEmploeeUc)
                    .HasColumnName("is_show_emploee_uc")
                    .HasDefaultValueSql("true")
                    .HasComment("Видимость заявки сотруднику УЦ");

                entity.Property(e => e.StepBeforeBlock)
                    .HasColumnName("step_before_block")
                    .HasComment("Статус до блокировки");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус заявки");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateRevokeRequests)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_certificate_revoke_request_certificate_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateRevokeRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_certificate_revoke_request_step_id");
            });

            modelBuilder.Entity<CertificateService>(entity =>
            {
                entity.HasKey(e => e.CertificateServiceId)
                    .HasName("pk_certificate_service_certificate_service_id");

                entity.ToTable("ro_certificate_service");

                entity.HasIndex(e => e.CertificateId, "idx_certificate_service_certificate_id");

                entity.HasIndex(e => e.StepId, "idx_certificate_service_step_id");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasDefaultValueSql("nextval('ro_certificate_service_service_id_seq'::regclass)")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Ид. сертификата");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Тип сертивиса");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateServices)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate_service_certificate_id");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.CertificateServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_certificate_service_service_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateServices)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_certificate_service_step_id");
            });

            modelBuilder.Entity<CertificateServiceSetting>(entity =>
            {
                entity.HasKey(e => new { e.CertificateServiceId, e.SettingId })
                    .HasName("pk_certificate_service_setting");

                entity.ToTable("ro_certificate_service_setting");

                entity.HasIndex(e => new { e.SettingId, e.Value }, "certificate_service_setting_setting_id_value");

                entity.HasIndex(e => e.CertificateServiceId, "idx_certificate_service_setting_certificate_service_id");

                entity.HasIndex(e => e.SettingId, "idx_certificate_service_setting_setting_id");

                entity.HasIndex(e => e.Value, "idx_certificate_service_setting_value");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.Value)
                    .HasMaxLength(100)
                    .HasColumnName("value")
                    .HasComment("Значение настройки");

                entity.HasOne(d => d.CertificateService)
                    .WithMany(p => p.CertificateServiceSettings)
                    .HasForeignKey(d => d.CertificateServiceId)
                    .HasConstraintName("fk_certificate_service_setting_certificate_service_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.CertificateServiceSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_certificate_service_setting_setting_id");
            });

            modelBuilder.Entity<CertificateServiceStep>(entity =>
            {
                entity.HasKey(e => e.CertificateServiceStepId)
                    .HasName("pk_ro_certificate_service_step_id");

                entity.ToTable("ro_certificate_service_step");

                entity.HasIndex(e => e.CertificateServiceId, "idx_certificate_service_step_service_id");

                entity.Property(e => e.CertificateServiceStepId)
                    .HasColumnName("certificate_service_step_id")
                    .HasComment("Ид");

                entity.Property(e => e.CertificateServiceId)
                    .HasColumnName("certificate_service_id")
                    .HasComment("Ид. сервиса");

                entity.Property(e => e.LogTime)
                    .HasPrecision(6)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.CertificateService)
                    .WithMany(p => p.CertificateServiceSteps)
                    .HasForeignKey(d => d.CertificateServiceId)
                    .HasConstraintName("fk_certificate_service_step_certificate_service_id");
            });

            modelBuilder.Entity<CertificateStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_step");

                entity.ToTable("ro_certificate_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний сертификатов");

                entity.HasIndex(e => e.ActionId, "certificate_step_action_id_idx");

                entity.HasIndex(e => e.CertificateId, "certificate_step_certificate_id_idx");

                entity.HasIndex(e => e.ReasonId, "certificate_step_reason_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_step_step_id_idx");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ActionEndTime)
                    .HasPrecision(0)
                    .HasColumnName("action_end_time")
                    .HasComment("Дата и время окончания действия");

                entity.Property(e => e.ActionId)
                    .HasColumnName("action_id")
                    .HasComment("Идентификатор действия");

                entity.Property(e => e.ActionStartTime)
                    .HasPrecision(0)
                    .HasColumnName("action_start_time")
                    .HasComment("Дата и время начала действия");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Идентификатор причины");

                entity.HasOne(d => d.Action)
                    .WithMany(p => p.CertificateSteps)
                    .HasForeignKey(d => d.ActionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_action");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateSteps)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Reason)
                    .WithMany(p => p.CertificateSteps)
                    .HasForeignKey(d => d.ReasonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_reason");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<CertificateTariff>(entity =>
            {
                entity.HasKey(e => e.CertificateTariffId)
                    .HasName("pk_certificate_tariff");

                entity.ToTable("ro_certificate_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица услуг УЦ");

                entity.HasIndex(e => e.AgentId, "certificate_tariff_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "certificate_tariff_certificate_id_idx");

                entity.HasIndex(e => e.ProductId, "certificate_tariff_product_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_tariff_step_id_idx");

                entity.Property(e => e.CertificateTariffId)
                    .HasColumnName("certificate_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum")
                    .HasComment("Стоимость");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.CertificateTariffs)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.CertificateTariffs)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.CertificateTariffs)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<CertificateTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.CertificateTariffId, e.StepId, e.LogTime })
                    .HasName("pk_certificate_tariff_step");

                entity.ToTable("ro_certificate_tariff_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний услуг УЦ");

                entity.HasIndex(e => e.CertificateTariffId, "certificate_tariff_step_certificate_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "certificate_tariff_step_step_id_idx");

                entity.Property(e => e.CertificateTariffId)
                    .HasColumnName("certificate_tariff_id")
                    .HasComment("Услуга УЦ");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.CertificateTariff)
                    .WithMany(p => p.CertificateTariffSteps)
                    .HasForeignKey(d => d.CertificateTariffId)
                    .HasConstraintName("fk_certificate_tariff");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.CertificateTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<CertificateType>(entity =>
            {
                entity.HasKey(e => e.CertificateTypeId)
                    .HasName("pk_certificate_type");

                entity.ToTable("ro_certificate_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов сертификатов");

                entity.HasIndex(e => e.CertificateTypeName, "sk_certificate_type_name")
                    .IsUnique();

                entity.Property(e => e.CertificateTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("certificate_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CertificateTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("certificate_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<CheckingMode>(entity =>
            {
                entity.HasKey(e => e.CheckingModeId)
                    .HasName("pk_checking_mode");

                entity.ToTable("ro_checking_mode");

                entity.HasAnnotation("Relational:Comment", "Таблица с режимами проверки");

                entity.Property(e => e.CheckingModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("checking_mode_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание режима");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .HasColumnName("name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<CheckingScheme>(entity =>
            {
                entity.HasKey(e => e.SchemeId)
                    .HasName("pk_checking_scheme");

                entity.ToTable("ro_checking_scheme");

                entity.HasAnnotation("Relational:Comment", "Таблица схемы проверок");

                entity.HasIndex(e => e.CheckingModeId, "checking_scheme_checking_mode_id_idx");

                entity.HasIndex(e => e.CheckingTypeId, "checking_scheme_checking_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "checking_scheme_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "checking_scheme_product_type_id_idx");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingModeId)
                    .HasColumnName("checking_mode_id")
                    .HasComment("Режим проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.CheckingMode)
                    .WithMany(p => p.CheckingSchemes)
                    .HasForeignKey(d => d.CheckingModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_mode");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.CheckingSchemes)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.CheckingSchemes)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.CheckingSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<CheckingType>(entity =>
            {
                entity.HasKey(e => e.CheckingTypeId)
                    .HasName("pk_checking_type");

                entity.ToTable("ro_checking_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов проверок");

                entity.HasIndex(e => e.CheckingTypeName, "sk_checking_type_name")
                    .IsUnique();

                entity.Property(e => e.CheckingTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("checking_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CheckingTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("checking_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ChildAgentViewAndAbonent>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_child_agent_view_and_abonent");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CompetentionCenterId).HasColumnName("competention_center_id");

                entity.Property(e => e.CompetentionCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competention_center_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.SaleCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("sale_center_name");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<ChildAgentsView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_child_agents_view");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.CompetentionCenterId).HasColumnName("competention_center_id");

                entity.Property(e => e.CompetentionCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competention_center_name");

                entity.Property(e => e.LevelId).HasColumnName("level_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.SaleCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("sale_center_name");
            });

            modelBuilder.Entity<Coefficient>(entity =>
            {
                entity.HasKey(e => e.CoefficientId)
                    .HasName("pk_coefficien_id");

                entity.ToTable("ro_coefficient");

                entity.HasAnnotation("Relational:Comment", "Сведения о ценах и налогах");

                entity.Property(e => e.CoefficientId)
                    .HasColumnName("coefficient_id")
                    .HasDefaultValueSql("nextval('ro_price_tax_price_id_seq'::regclass)");

                entity.Property(e => e.CoefficientTypeId)
                    .HasColumnName("coefficient_type_id")
                    .HasComment("Тип коэффициента (цена, налог)");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Ид номенклатуры");

                entity.Property(e => e.Value)
                    .HasColumnName("value")
                    .HasComment("Значение");
            });

            modelBuilder.Entity<CoefficientType>(entity =>
            {
                entity.HasKey(e => e.CoefficientTypeId)
                    .HasName("pk_coefficient_id");

                entity.ToTable("ro_coefficient_type");

                entity.HasAnnotation("Relational:Comment", "Типы цен и налогов");

                entity.Property(e => e.CoefficientTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("coefficient_type_id")
                    .HasComment("Тип коэффициента");

                entity.Property(e => e.CoefficientTypeName)
                    .HasColumnType("character varying")
                    .HasColumnName("coefficient_type_name")
                    .HasComment("Имя типа");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_comment_pkey");

                entity.ToTable("ro_comment");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasColumnType("character varying")
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");
            });

            modelBuilder.Entity<CompanyGroup>(entity =>
            {
                entity.HasKey(e => e.CompanyGroupId)
                    .HasName("pk_company_group");

                entity.ToTable("ro_company_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп компаний");

                entity.HasIndex(e => e.AbonentId, "company_group_abonent_id_idx");

                entity.HasIndex(e => e.CompanyGroupName, "company_group_name_idx");

                entity.HasIndex(e => e.OfficeId, "company_group_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "company_group_product_type_id_idx");

                entity.HasIndex(e => e.CompanyGroupGuid, "ro_company_group_company_group_guid_key")
                    .IsUnique();

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Главная организация");

                entity.Property(e => e.CompanyGroupGuid)
                    .HasColumnName("company_group_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.CompanyGroupName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("company_group_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.CompanyGroups)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.CompanyGroups)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.CompanyGroups)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                //entity.HasMany(d => d.Abonents)
                //    .WithMany(p => p.CompanyGroups)
                //    .UsingEntity<Dictionary<string, object>>(
                //        "RoCompanyGroupAbonent",
                //        l => l.HasOne<Abonent>().WithMany().HasForeignKey("AbonentId").HasConstraintName("fk_abonent"),
                //        r => r.HasOne<CompanyGroup>().WithMany().HasForeignKey("CompanyGroupId").HasConstraintName("fk_company_group"),
                //        j =>
                //        {
                //            j.HasKey("CompanyGroupId", "AbonentId").HasName("pk_company_group_abonent");

                //            j.ToTable("ro_company_group_abonent").HasAnnotation("Relational:Comment", "Таблица членов группы компаний");

                //            j.HasIndex(new[] { "AbonentId" }, "company_group_abonent_abonent_id_idx");

                //            j.HasIndex(new[] { "CompanyGroupId" }, "company_group_abonent_company_group_id_idx");

                //            j.IndexerProperty<int>("CompanyGroupId").HasColumnName("company_group_id").HasComment("Группа компаний");

                //            j.IndexerProperty<int>("AbonentId").HasColumnName("abonent_id").HasComment("Компания");
                //        });
            });

            modelBuilder.Entity<CompetencyCenterReward>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_competency_center_reward");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward");
            });

            modelBuilder.Entity<Condition>(entity =>
            {
                entity.HasKey(e => e.ConditionId)
                    .HasName("pk_condition");

                entity.ToTable("ro_condition");

                entity.HasAnnotation("Relational:Comment", "Таблица условий");

                entity.HasIndex(e => e.ConditionGuid, "sk_condition")
                    .IsUnique();

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ConditionGuid)
                    .HasColumnName("condition_guid")
                    .HasComment("ГУИД условия");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<Config>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_config");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("key");

                entity.Property(e => e.Value)
                    .HasColumnType("character varying")
                    .HasColumnName("value");
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_contact");

                entity.ToTable("ro_contact");

                entity.HasAnnotation("Relational:Comment", "Контактные данные");

                entity.HasIndex(e => e.ContactValue, "contact_contact_value_idx");

                entity.HasIndex(e => e.ProductId, "contact_product_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_type_id_idx");

                entity.HasIndex(e => new { e.ProductId, e.TypeId, e.ContactValue }, "sk_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Contacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<ContactPerson>(entity =>
            {
                entity.HasKey(e => e.ContactPersonId)
                    .HasName("pk_contact_person");

                entity.ToTable("ro_contact_person");

                entity.HasAnnotation("Relational:Comment", "Контактные данные сотрудников");

                entity.HasIndex(e => e.ProductPersonId, "contact_person_product_person_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_person_type_id_idx");

                entity.HasIndex(e => new { e.ProductPersonId, e.TypeId, e.ContactValue }, "sk_contact_person")
                    .IsUnique();

                entity.Property(e => e.ContactPersonId)
                    .HasColumnName("contact_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ContactPeople)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ContactPeople)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<ContactPersonUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactPersonId, e.TypeId })
                    .HasName("pk_contact__person_use");

                entity.ToTable("ro_contact_person_use");

                entity.HasAnnotation("Relational:Comment", "Использование контактов сотрудников");

                entity.HasIndex(e => e.ContactPersonId, "contact_person_use_contact_person_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_person_use_type_id_idx");

                entity.Property(e => e.ContactPersonId)
                    .HasColumnName("contact_person_id")
                    .HasComment("Контакт сотрудника");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.ContactPerson)
                    .WithMany(p => p.ContactPersonUses)
                    .HasForeignKey(d => d.ContactPersonId)
                    .HasConstraintName("fk_contact_person");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ContactPersonUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<ContactType>(entity =>
            {
                entity.HasKey(e => e.ContactTypeId)
                    .HasName("pk_contact_type");

                entity.ToTable("ro_contact_type");

                entity.HasAnnotation("Relational:Comment", "Тип контактных данных");

                entity.Property(e => e.ContactTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("contact_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ContactTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("contact_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_contact_use");

                entity.ToTable("ro_contact_use");

                entity.HasAnnotation("Relational:Comment", "Использование контактов");

                entity.HasIndex(e => e.ContactId, "contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.ContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.ContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<Contract>(entity =>
            {
                entity.HasKey(e => e.ContractId)
                    .HasName("pk_contract");

                entity.ToTable("ro_contract");

                entity.HasAnnotation("Relational:Comment", "Таблица договоров");

                entity.HasIndex(e => e.AbonentId, "contract_abonent_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "contract_company_group_id_idx");

                entity.HasIndex(e => e.ContractTypeId, "contract_contract_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "contract_office_id_idx");

                entity.HasIndex(e => e.StepId, "contract_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_user_id_idx");

                entity.HasIndex(e => e.ContractGuid, "ro_contract_contract_guid_key")
                    .IsUnique();

                entity.HasIndex(e => new { e.AbonentId, e.ContractName }, "sk_abonent_contract_name")
                    .IsUnique();

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.ContractGuid)
                    .HasColumnName("contract_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.ContractName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("contract_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ContractTypeId)
                    .HasColumnName("contract_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.CreateTime)
                    .HasPrecision(0)
                    .HasColumnName("create_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.StartDate)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.StepReason)
                    .HasColumnType("character varying")
                    .HasColumnName("step_reason")
                    .HasComment("Причина состояния");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.ContractType)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.ContractTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.TariffZoneId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_tariff_zone");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Contracts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Licenses)
                    .WithMany(p => p.Contracts)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoContractLicense",
                        l => l.HasOne<LicensePool>().WithMany().HasForeignKey("LicenseId").HasConstraintName("fk_license_pool"),
                        r => r.HasOne<Contract>().WithMany().HasForeignKey("ContractId").HasConstraintName("fk_contract"),
                        j =>
                        {
                            j.HasKey("ContractId", "LicenseId").HasName("pk_contract_license");

                            j.ToTable("ro_contract_license").HasAnnotation("Relational:Comment", "Таблица внешних лицензий договора");

                            j.HasIndex(new[] { "ContractId" }, "contract_license_contract_id_idx");

                            j.HasIndex(new[] { "LicenseId" }, "contract_license_license_id_idx");

                            j.IndexerProperty<int>("ContractId").HasColumnName("contract_id").HasComment("Договор");

                            j.IndexerProperty<int>("LicenseId").HasColumnName("license_id").HasComment("Лицензия");
                        });
            });

            modelBuilder.Entity<ContractStep>(entity =>
            {
                entity.HasKey(e => new { e.ContractId, e.StepId, e.LogTime })
                    .HasName("pk_contract_step");

                entity.ToTable("ro_contract_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний договоров");

                entity.HasIndex(e => e.ContractId, "contract_step_contract_id_idx");

                entity.HasIndex(e => e.StepId, "contract_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_step_user_id_idx");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractSteps)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ContractSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContractSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ContractTariff>(entity =>
            {
                entity.HasKey(e => e.ContractTariffId)
                    .HasName("pk_contract_tariff");

                entity.ToTable("ro_contract_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица услуг по договору");

                entity.HasIndex(e => e.ContractId, "contract_tariff_contract_id_idx");

                entity.HasIndex(e => e.RegistrationNumber, "contract_tariff_registration_number_idx");

                entity.HasIndex(e => e.SectionId, "contract_tariff_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "contract_tariff_section_id_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "contract_tariff_step_id_idx");

                entity.HasIndex(e => e.TariffId, "contract_tariff_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "contract_tariff_user_id_idx");

                entity.HasIndex(e => e.EndDate, "idx_contract_tariff_end_date");

                entity.HasIndex(e => e.InitialDate, "idx_contract_tariff_initial_date");

                entity.HasIndex(e => e.RegistrationDate, "idx_registration_date");

                entity.HasIndex(e => e.ContractTariffGuid, "ro_contract_tariff_contract_tariff_guid_key")
                    .IsUnique();

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.ContractTariffGuid)
                    .HasColumnName("contract_tariff_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost")
                    .HasComment("Затраты");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasDefaultValueSql("('now'::text)::date")
                    .HasComment("Дата начала");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Первичный");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата регистрации");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum")
                    .HasComment("Стоимость");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.PriceTariff)
                    .WithMany(p => p.ContractTariffs)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price_tariff");

                entity.HasMany(d => d.Keys)
                    .WithMany(p => p.ContractTariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoContractTariffKey",
                        l => l.HasOne<Key>().WithMany().HasForeignKey("KeyId").HasConstraintName("ro_contract_tariff_key_fk1"),
                        r => r.HasOne<ContractTariff>().WithMany().HasForeignKey("ContractTariffId").HasConstraintName("ro_contract_tariff_key_fk"),
                        j =>
                        {
                            j.HasKey("ContractTariffId", "KeyId").HasName("pk_contract_tariff_key");

                            j.ToTable("ro_contract_tariff_key").HasAnnotation("Relational:Comment", "Таблица для фиксации факта выпуска сертификата по тарифу");

                            j.IndexerProperty<int>("ContractTariffId").HasColumnName("contract_tariff_id").HasComment("Тариф по договору");

                            j.IndexerProperty<int>("KeyId").HasColumnName("key_id").HasComment("Ключ");
                        });

                //entity.HasMany(d => d.Products)
                //    .WithMany(p => p.ContractTariffs)
                //    .UsingEntity<Dictionary<string, object>>(
                //        "ProductTariff",
                //        l => l.HasOne<Product>().WithMany().HasForeignKey("ProductId").HasConstraintName("fk_product"),
                //        r => r.HasOne<ContractTariff>().WithMany().HasForeignKey("ContractTariffId").HasConstraintName("fk_contract_tariff"),
                //        j =>
                //        {
                //            j.HasKey("ContractTariffId", "ProductId").HasName("pk_product_tariff");

                //            j.ToTable("ro_product_tariff").HasAnnotation("Relational:Comment", "Таблица услуг продукта");

                //            j.HasIndex(new[] { "ContractTariffId" }, "product_tariff_contract_tariff_id_idx");

                //            j.HasIndex(new[] { "ProductId" }, "product_tariff_product_id_idx");

                //            j.IndexerProperty<int>("ContractTariffId").HasColumnName("contract_tariff_id").HasComment("Услуга по договору");

                //            j.IndexerProperty<int>("ProductId").HasColumnName("product_id").HasComment("Продукт");
                //        });
            });

            modelBuilder.Entity<ContractTariffDiscount>(entity =>
            {
                entity.HasKey(e => new { e.ContractTariffId, e.DiscountId })
                    .HasName("pk_contract_tariff_discount");

                entity.ToTable("ro_contract_tariff_discount");

                entity.HasAnnotation("Relational:Comment", "Таблица скидок на покупки");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_discount_contract_tariff_id_idx");

                entity.HasIndex(e => e.DiscountId, "contract_tariff_discount_discount_id_idx");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Тариф по договору");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum")
                    .HasComment("Сумма скидки");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount")
                    .HasComment("Процент скидки");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.ContractTariffDiscounts)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.ContractTariffDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContractTariffDiscounts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<ContractTariffExtension>(entity =>
            {
                entity.HasKey(e => e.ExtensionId)
                    .HasName("pk_contract_tariff_extension");

                entity.ToTable("ro_contract_tariff_extension");

                entity.HasAnnotation("Relational:Comment", "Таблица расширений услуг продукта");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_extension_contract_tariff_id_idx");

                entity.Property(e => e.ExtensionId)
                    .ValueGeneratedNever()
                    .HasColumnName("extension_id")
                    .HasComment("Расширение");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Главная услуга");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.ContractTariffExtensionContractTariffs)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Extension)
                    .WithOne(p => p.ContractTariffExtensionExtension)
                    .HasForeignKey<ContractTariffExtension>(d => d.ExtensionId)
                    .HasConstraintName("fk_extension");
            });

            modelBuilder.Entity<ContractTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.ContractTariffId, e.StepId, e.LogTime })
                    .HasName("pk_contract_tariff_step");

                entity.ToTable("ro_contract_tariff_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний услуг по договорам");

                entity.HasIndex(e => e.ContractTariffId, "contract_tariff_step_contract_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "contract_tariff_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "contract_tariff_step_user_id_idx");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Услуга по договору");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.ContractTariffSteps)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ContractTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ContractTariffSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ContractType>(entity =>
            {
                entity.HasKey(e => e.ContractTypeId)
                    .HasName("pk_contract_type");

                entity.ToTable("ro_contract_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов договоров");

                entity.HasIndex(e => e.ContractTypeName, "sk_contract_type_name")
                    .IsUnique();

                entity.Property(e => e.ContractTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("contract_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ContractTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("contract_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.HasKey(e => e.CountryId)
                    .HasName("pk_country");

                entity.ToTable("ro_country");

                entity.HasAnnotation("Relational:Comment", "Таблица стран мира");

                entity.HasIndex(e => e.Alpha2Id, "sk_alpha2")
                    .IsUnique();

                entity.HasIndex(e => e.Alpha3Id, "sk_alpha3")
                    .IsUnique();

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Цифровой код");

                entity.Property(e => e.Alpha2Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .HasColumnName("alpha2_id")
                    .HasComment("Буквенный код альфа-2");

                entity.Property(e => e.Alpha3Id)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("alpha3_id")
                    .HasComment("Буквенный код альфа-3");

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");
            });

            modelBuilder.Entity<Crl>(entity =>
            {
                entity.HasKey(e => e.CrlId)
                    .HasName("pk_crl");

                entity.ToTable("ro_crl");

                entity.HasAnnotation("Relational:Comment", "Таблица списков анулированных сертификатов");

                entity.HasIndex(e => e.FileId, "crl_file_id_idx");

                entity.HasIndex(e => e.AuthorityKeyId, "sk_crl")
                    .IsUnique();

                entity.Property(e => e.CrlId)
                    .HasColumnName("crl_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthorityKeyId)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("authority_key_id")
                    .HasComment("Идентификатор ключа издателя");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.NextUpdate)
                    .HasPrecision(0)
                    .HasColumnName("next_update")
                    .HasComment("Дата следующего обновления");

                entity.Property(e => e.ProcessingDate)
                    .HasPrecision(0)
                    .HasColumnName("processing_date")
                    .HasComment("Дата обработки списка отзывов");

                entity.Property(e => e.ThisUpdate)
                    .HasPrecision(0)
                    .HasColumnName("this_update")
                    .HasComment("Дата текущего обновления");
            });

            modelBuilder.Entity<CrlLink>(entity =>
            {
                entity.HasKey(e => e.CrlLinkId)
                    .HasName("pk_crl_link");

                entity.ToTable("ro_crl_link");

                entity.HasAnnotation("Relational:Comment", "Таблица ссылок (URI) на списки анулированных сертификатов");

                entity.HasIndex(e => e.CrlId, "crl_link_crl_id_idx");

                entity.HasIndex(e => new { e.CrlId, e.Link }, "sk_crl_link")
                    .IsUnique();

                entity.Property(e => e.CrlLinkId)
                    .HasColumnName("crl_link_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CrlId)
                    .HasColumnName("crl_id")
                    .HasComment("Список");

                entity.Property(e => e.Link)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("link")
                    .HasComment("Ссылка");

                entity.HasOne(d => d.Crl)
                    .WithMany(p => p.CrlLinks)
                    .HasForeignKey(d => d.CrlId)
                    .HasConstraintName("fk_crl");
            });

            modelBuilder.Entity<CryptoStorage>(entity =>
            {
                entity.HasKey(e => e.CryptoStorageId)
                    .HasName("pk_crypto_storage");

                entity.ToTable("ro_crypto_storage");

                entity.HasAnnotation("Relational:Comment", "Таблица криптографических хранилищ");

                entity.HasIndex(e => e.CryptoStorageName, "sk_crypto_storage")
                    .IsUnique();

                entity.Property(e => e.CryptoStorageId)
                    .ValueGeneratedNever()
                    .HasColumnName("crypto_storage_id")
                    .HasComment("Код");

                entity.Property(e => e.CryptoStorageName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("crypto_storage_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsDefault).HasColumnName("is_default");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.RemoteAddress)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("remote_address")
                    .HasComment("Адрес");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.CryptoStorages)
                    .HasForeignKey(d => d.ProviderId)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<CryptoStorageKey>(entity =>
            {
                entity.HasKey(e => e.CryptoStorageKeyId)
                    .HasName("pk_crypto_storage_key");

                entity.ToTable("ro_crypto_storage_key");

                entity.HasAnnotation("Relational:Comment", "Таблица ключей криптографического хранилища");

                entity.HasIndex(e => e.CryptoStorageId, "crypto_storage_key_crypto_storage_id_idx");

                entity.HasIndex(e => e.KeyId, "crypto_storage_key_key_id_idx");

                entity.HasIndex(e => new { e.KeyId, e.CryptoStorageId }, "sk_crypto_storage_key")
                    .IsUnique();

                entity.Property(e => e.CryptoStorageKeyId)
                    .HasColumnName("crypto_storage_key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CryptoStorageId)
                    .HasColumnName("crypto_storage_id")
                    .HasComment("Хранилище");

                entity.Property(e => e.DssKeyStorageId).HasColumnName("dss_key_storage_id");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.HasOne(d => d.CryptoStorage)
                    .WithMany(p => p.CryptoStorageKeys)
                    .HasForeignKey(d => d.CryptoStorageId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.DssKeyStorage)
                    .WithMany(p => p.CryptoStorageKeys)
                    .HasForeignKey(d => d.DssKeyStorageId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_key_storage");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.CryptoStorageKeys)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");
            });

            modelBuilder.Entity<Discount>(entity =>
            {
                entity.HasKey(e => e.DiscountId)
                    .HasName("pk_discount");

                entity.ToTable("ro_discount");

                entity.HasAnnotation("Relational:Comment", "Таблица скидок");

                entity.HasIndex(e => e.DiscountTypeId, "discount_discount_type_id_idx");

                entity.HasIndex(e => e.Article, "sk_discount_article")
                    .IsUnique();

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("discount_name")
                    .HasComment("Наименование");

                entity.Property(e => e.DiscountTypeId)
                    .HasColumnName("discount_type_id")
                    .HasComment("Тип скидки");

                entity.Property(e => e.DiscountValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_value")
                    .HasComment("Значение");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.MaxValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_value")
                    .HasComment("Максимальное значение");

                entity.Property(e => e.MinValue)
                    .HasPrecision(18, 2)
                    .HasColumnName("min_value")
                    .HasComment("Минимальное значение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Percent)
                    .IsRequired()
                    .HasColumnName("percent")
                    .HasDefaultValueSql("true")
                    .HasComment("Относительная/абсолютная");

                entity.HasOne(d => d.DiscountType)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.DiscountTypeId)
                    .HasConstraintName("fk_discount_type");
            });

            modelBuilder.Entity<DiscountType>(entity =>
            {
                entity.HasKey(e => e.DiscountTypeId)
                    .HasName("pk_discount_type");

                entity.ToTable("ro_discount_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов скидок");

                entity.HasIndex(e => e.DiscountTypeName, "sk_discount_type_name")
                    .IsUnique();

                entity.Property(e => e.DiscountTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("discount_type_id")
                    .HasComment("Код");

                entity.Property(e => e.DiscountTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("discount_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<DisqualifiedPerson>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("pk_record_id");

                entity.ToTable("ro_disqualified_person");

                entity.HasAnnotation("Relational:Comment", "Таблица с выгрузкой дисквалифицированных лиц");

                entity.HasIndex(e => e.BirthDate, "disqualified_person_birth_date_idx");

                entity.HasIndex(e => e.FullName, "disqualified_person_full_name_idx");

                entity.HasIndex(e => e.OrgInn, "disqualified_person_org_inn_idx");

                entity.Property(e => e.RecordId).HasColumnName("record_id");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения дисквалифицированного лица");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(256)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения дисквалифицированного лица");

                entity.Property(e => e.CodexClause)
                    .HasMaxLength(50)
                    .HasColumnName("codex_clause")
                    .HasComment("Статья КоАП РФ");

                entity.Property(e => e.DisqualificationEnd)
                    .HasColumnName("disqualification_end")
                    .HasComment("Дата истечения срока дисквалификации");

                entity.Property(e => e.DisqualificationStart)
                    .HasColumnName("disqualification_start")
                    .HasComment("Дата начала дисквалификации");

                entity.Property(e => e.DisqualificationTerm)
                    .HasMaxLength(20)
                    .HasColumnName("disqualification_term")
                    .HasComment("Срок дисквалификации");

                entity.Property(e => e.FullName)
                    .HasMaxLength(200)
                    .HasColumnName("full_name")
                    .HasComment("ФИО дисквалифицированного лица");

                entity.Property(e => e.JudgeFullName)
                    .HasMaxLength(200)
                    .HasColumnName("judge_full_name")
                    .HasComment("ФИО судьи");

                entity.Property(e => e.JudgePost)
                    .HasMaxLength(50)
                    .HasColumnName("judge_post")
                    .HasComment("Должность судьи");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasComment("№ п/п");

                entity.Property(e => e.OrgInn)
                    .HasMaxLength(12)
                    .HasColumnName("org_inn")
                    .HasComment("ИНН организации");

                entity.Property(e => e.OrgName)
                    .HasMaxLength(300)
                    .HasColumnName("org_name")
                    .HasComment("Наименование организации");

                entity.Property(e => e.Post)
                    .HasMaxLength(50)
                    .HasColumnName("post")
                    .HasComment("Должность");

                entity.Property(e => e.ProtocolAgency)
                    .HasMaxLength(200)
                    .HasColumnName("protocol_agency")
                    .HasComment("Наименование органа, составившего протокол об административном правонарушении");

                entity.Property(e => e.RdlNumber)
                    .HasMaxLength(12)
                    .HasColumnName("rdl_number")
                    .HasComment("Номер записи РДЛ");
            });

            modelBuilder.Entity<DistributionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_distribution_view");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Distributor)
                    .HasMaxLength(200)
                    .HasColumnName("distributor");

                entity.Property(e => e.Inn).HasColumnName("inn");

                entity.Property(e => e.IsAuto).HasColumnName("is_auto");

                entity.Property(e => e.IsCompetencyCenter).HasColumnName("is_competency_center");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.IsItsProf).HasColumnName("is_its_prof");

                entity.Property(e => e.ItsAgentId).HasColumnName("its_agent_id");

                entity.Property(e => e.ItsEndDate)
                    .HasPrecision(0)
                    .HasColumnName("its_end_date");

                entity.Property(e => e.ItsExpired).HasColumnName("its_expired");

                entity.Property(e => e.ItsPartner)
                    .HasMaxLength(200)
                    .HasColumnName("its_partner");

                entity.Property(e => e.ItsRequerid).HasColumnName("its_requerid");

                entity.Property(e => e.ItsSaleCenterId).HasColumnName("its_sale_center_id");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.RegistrationNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("registration_number");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<Doc>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_doc");

                entity.ToTable("ro_doc");

                entity.HasAnnotation("Relational:Comment", "Таблица документов");

                entity.HasIndex(e => e.AbonentId, "doc_abonent_id_idx");

                entity.HasIndex(e => e.DocTypeId, "doc_doc_type_id_idx");

                entity.HasIndex(e => e.FileId, "doc_file_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "doc_passport_type_id_idx");

                entity.HasIndex(e => e.UserId, "doc_user_id_idx");

                entity.HasIndex(e => e.CreationTime, "ro_doc_creation_time_idx");

                entity.HasIndex(e => e.Note, "ro_doc_note_idx");

                entity.HasIndex(e => new { e.DocId, e.AbonentId }, "sk_abonent")
                    .IsUnique();

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .IsRequired()
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.Addon)
                    .HasMaxLength(200)
                    .HasColumnName("addon")
                    .HasComment("Дополнение");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("Вид документа");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.IssueDate)
                    .HasColumnName("issue_date")
                    .HasComment("Дата выдачи");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Number)
                    .HasMaxLength(25)
                    .HasColumnName("number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа удостоверяющего личность");

                entity.Property(e => e.Series)
                    .HasMaxLength(25)
                    .HasColumnName("series")
                    .HasComment("Серия документа");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.Docs)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.Docs)
                    .HasForeignKey(d => d.DocTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_doc_type");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.Docs)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Docs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<DocType>(entity =>
            {
                entity.HasKey(e => e.DocTypeId)
                    .HasName("pk_doc_type");

                entity.ToTable("ro_doc_type");

                entity.HasAnnotation("Relational:Comment", "Таблица видов документов");

                entity.HasIndex(e => e.DocTypeName, "sk_doc_type_name")
                    .IsUnique();

                entity.Property(e => e.DocTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("doc_type_id")
                    .HasComment("Код");

                entity.Property(e => e.DocTypeAlias)
                    .HasMaxLength(50)
                    .HasColumnName("doc_type_alias")
                    .HasComment("Псевдоним");

                entity.Property(e => e.DocTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("doc_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<DocumentType>(entity =>
            {
                entity.HasKey(e => e.DocumentTypeId)
                    .HasName("pk_document_type");

                entity.ToTable("ro_document_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов документов");

                entity.HasIndex(e => e.DocumentTypeName, "sk_document_type_name")
                    .IsUnique();

                entity.Property(e => e.DocumentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("document_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocumentTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("document_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<DomainEvent>(entity =>
            {
                entity.HasKey(e => e.Guid)
                    .HasName("ro_domain_event_pkey");

                entity.ToTable("ro_domain_event");

                entity.HasAnnotation("Relational:Comment", "Таблица доменных событий");

                entity.HasIndex(e => e.IsPublished, "ro_domain_event_is_published_idx")
                    .HasFilter("(is_published = false)");

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор события");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EventBody)
                    .IsRequired()
                    .HasColumnName("event_body")
                    .HasComment("Тело события");

                entity.Property(e => e.EventType)
                    .HasColumnName("event_type")
                    .HasComment("Тип события");

                entity.Property(e => e.IsPublished)
                    .HasColumnName("is_published")
                    .HasComment("Событие отправлено в шину");
            });

            modelBuilder.Entity<Dss>(entity =>
            {
                entity.HasKey(e => e.DssId)
                    .HasName("pk_dss");

                entity.ToTable("ro_dss");

                entity.HasAnnotation("Relational:Comment", "DSS");

                entity.HasIndex(e => e.CertificateId, "dss_certificate_id_idx");

                entity.HasIndex(e => e.ProviderId, "dss_provider_id_idx");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AccountAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("account_address")
                    .HasComment("Адрес ЛК");

                entity.Property(e => e.ApiVer)
                    .HasColumnType("character varying")
                    .HasColumnName("api_ver")
                    .HasComment("Версия АПИ");

                entity.Property(e => e.AuthMethod)
                    .HasColumnName("auth_method")
                    .HasComment("Способ аутентификации");

                entity.Property(e => e.CaName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("ca_name")
                    .HasComment("Наименование УЦ");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат оператора");

                entity.Property(e => e.ClientId)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("client_id")
                    .HasComment("ИД клиента");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ConfirmMethod)
                    .HasColumnName("confirm_method")
                    .HasComment("Способ подтверждения");

                entity.Property(e => e.ConfirmTemplate)
                    .HasColumnType("character varying")
                    .HasColumnName("confirm_template")
                    .HasComment("Шаблон подтверждения");

                entity.Property(e => e.CsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("cs_address")
                    .HasComment("Адрес криптосервиса");

                entity.Property(e => e.DssHost)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("dss_host")
                    .HasComment("Адрес");

                entity.Property(e => e.DssName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("dss_name")
                    .HasComment("Представление");

                entity.Property(e => e.EncryptUser)
                    .HasColumnType("character varying")
                    .HasColumnName("encrypt_user")
                    .HasComment("Открытый пользователь");

                entity.Property(e => e.EncryptUserPassword)
                    .HasMaxLength(64)
                    .HasColumnName("encrypt_user_password")
                    .HasDefaultValueSql("NULL::character varying")
                    .HasComment("Пароль открытого пользователя");

                entity.Property(e => e.InnerId)
                    .HasColumnType("character varying")
                    .HasColumnName("inner_id")
                    .HasComment("Внутренний идентификатор");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("19")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.SignAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("sign_address")
                    .HasComment("Адрес СЭП");

                entity.Property(e => e.SignId)
                    .HasColumnType("character varying")
                    .HasColumnName("sign_id")
                    .HasComment("Идентификатор СЭП");

                entity.Property(e => e.StsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("sts_address")
                    .HasComment("Адрес ЦИ");

                entity.Property(e => e.StsId)
                    .HasColumnType("character varying")
                    .HasColumnName("sts_id")
                    .HasComment("Идентификатор ЦИ");

                entity.Property(e => e.SvsAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("svs_address")
                    .HasComment("Адрес SVS");

                entity.Property(e => e.TemplateOid)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("template_oid")
                    .HasComment("OID шаблона");

                entity.Property(e => e.Timeout)
                    .HasColumnName("timeout")
                    .HasDefaultValueSql("120")
                    .HasComment("Таймаут");

                entity.Property(e => e.Used)
                    .HasColumnName("used")
                    .HasComment("Используется");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Dsses)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.Dsses)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<DssApp>(entity =>
            {
                entity.HasKey(e => e.AppId)
                    .HasName("ro_dss_app_pkey");

                entity.ToTable("ro_dss_app");

                entity.HasAnnotation("Relational:Comment", "Таблица приложений DSS");

                entity.Property(e => e.AppId)
                    .ValueGeneratedNever()
                    .HasColumnName("app_id")
                    .HasComment("Идентификатор приложения");

                entity.Property(e => e.AppName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("app_name")
                    .HasComment("Название приложения");

                entity.HasMany(d => d.Systems)
                    .WithMany(p => p.Apps)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoDssAppSystem",
                        l => l.HasOne<DssAuthSystem>().WithMany().HasForeignKey("SystemId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_system"),
                        r => r.HasOne<DssApp>().WithMany().HasForeignKey("AppId").HasConstraintName("fk_app"),
                        j =>
                        {
                            j.HasKey("AppId", "SystemId").HasName("pk_dss_app_system");

                            j.ToTable("ro_dss_app_system").HasAnnotation("Relational:Comment", "Таблица систем аутентификации для приложений DSS");

                            j.IndexerProperty<int>("AppId").HasColumnName("app_id").HasComment("Приложение DSS");

                            j.IndexerProperty<int>("SystemId").HasColumnName("system_id").HasComment("Система аутентификации DSS");
                        });
            });

            modelBuilder.Entity<DssAuth>(entity =>
            {
                entity.HasKey(e => e.AuthId)
                    .HasName("pk_dss_auth");

                entity.ToTable("ro_dss_auth");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний аутентификации пользователей DSS");

                entity.HasIndex(e => e.CheckTime, "dss_auth_check_time_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_step_id_idx");

                entity.HasIndex(e => e.UserId, "dss_auth_user_id_idx");

                entity.Property(e => e.AuthId)
                    .HasColumnName("auth_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthSystemId)
                    .HasColumnName("auth_system_id")
                    .HasDefaultValueSql("2")
                    .HasComment("Система аутентификации");

                entity.Property(e => e.CheckTime)
                    .HasPrecision(0)
                    .HasColumnName("check_time")
                    .HasComment("Время проверки");

                entity.Property(e => e.EndTime).HasColumnName("end_time");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ЭП");

                entity.Property(e => e.QrCodeId)
                    .HasColumnName("qr_code_id")
                    .HasComment("QR-код");

                entity.Property(e => e.Serial)
                    .HasColumnType("character varying")
                    .HasColumnName("serial")
                    .HasComment("Серийный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг аутентификации");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь DSS");

                entity.HasOne(d => d.AuthSystem)
                    .WithMany(p => p.DssAuths)
                    .HasForeignKey(d => d.AuthSystemId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_system");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.DssAuths)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.QrCode)
                    .WithMany(p => p.DssAuths)
                    .HasForeignKey(d => d.QrCodeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_qr_code");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.DssAuths)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.DssAuths)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_dss_user");
            });

            modelBuilder.Entity<DssAuthKey>(entity =>
            {
                entity.ToTable("ro_dss_auth_key");

                entity.HasIndex(e => e.DssId, "dss_auth_key_dss_id_idx");

                entity.HasIndex(e => e.DssUserId, "dss_auth_key_dss_user_id_idx");

                entity.HasIndex(e => e.IdKey, "dss_auth_key_id_key_idx");

                entity.HasIndex(e => e.QrCodeId, "dss_auth_key_qr_code_id_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_key_step_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasDefaultValueSql("1")
                    .HasComment("DSS");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.Expired)
                    .HasPrecision(0)
                    .HasColumnName("expired")
                    .HasComment("Срок действия");

                entity.Property(e => e.IdKey)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("id_key")
                    .HasComment("Идентификатор ключа");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.QrCodeId)
                    .HasColumnName("qr_code_id")
                    .HasComment("QR-код");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.DssAuthKeys)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.DssAuthKeys)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_dss_user");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.DssAuthKeys)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_member_id");

                entity.HasOne(d => d.QrCode)
                    .WithMany(p => p.DssAuthKeys)
                    .HasForeignKey(d => d.QrCodeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.DssAuthKeys)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<DssAuthKeyStep>(entity =>
            {
                entity.HasKey(e => new { e.DssAuthKeyId, e.StepId, e.LogTime })
                    .HasName("pk_dss_auth_key_step");

                entity.ToTable("ro_dss_auth_key_step");

                entity.HasAnnotation("Relational:Comment", "Таблица логов изменений статусов кодов аутентификации");

                entity.Property(e => e.DssAuthKeyId)
                    .HasColumnName("dss_auth_key_id")
                    .HasComment("Идентификатор кода аутентификации");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата изменения");

                entity.HasOne(d => d.DssAuthKey)
                    .WithMany(p => p.DssAuthKeySteps)
                    .HasForeignKey(d => d.DssAuthKeyId)
                    .HasConstraintName("fk_dss_auth_key");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.DssAuthKeySteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");
            });

            modelBuilder.Entity<DssAuthMeth>(entity =>
            {
                entity.HasKey(e => e.MethId)
                    .HasName("pk_dss_auth_meth");

                entity.ToTable("ro_dss_auth_meth");

                entity.HasAnnotation("Relational:Comment", "Таблица методов аутентификации DSS");

                entity.Property(e => e.MethId)
                    .ValueGeneratedNever()
                    .HasColumnName("meth_id")
                    .HasComment("Флаг метода");

                entity.Property(e => e.AuthOrder)
                    .HasColumnName("auth_order")
                    .HasComment("Порядок метода");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<DssAuthMode>(entity =>
            {
                entity.HasKey(e => e.ModeId)
                    .HasName("pk_dss_auth_mode");

                entity.ToTable("ro_dss_auth_mode");

                entity.HasAnnotation("Relational:Comment", "Таблица режимов аутентификации пользователей DSS");

                entity.Property(e => e.ModeId)
                    .HasColumnName("mode_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ModeName)
                    .HasMaxLength(100)
                    .HasColumnName("mode_name")
                    .HasComment("Название режима");
            });

            modelBuilder.Entity<DssAuthStep>(entity =>
            {
                entity.ToTable("ro_dss_auth_step");

                entity.HasAnnotation("Relational:Comment", "Таблица истории состояний аутентификации пользователей DSS");

                entity.HasIndex(e => e.AuthId, "dss_auth_step_auth_id_idx");

                entity.HasIndex(e => e.StepId, "dss_auth_step_step_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthId)
                    .HasColumnName("auth_id")
                    .HasComment("Запись аутентификации");

                entity.Property(e => e.CheckTime)
                    .HasPrecision(0)
                    .HasColumnName("check_time")
                    .HasComment("Время проверки");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Срок действия ключа");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время шага");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг аутентификации");

                entity.HasOne(d => d.Auth)
                    .WithMany(p => p.DssAuthSteps)
                    .HasForeignKey(d => d.AuthId)
                    .HasConstraintName("fk_auth");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.DssAuthSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<DssAuthSystem>(entity =>
            {
                entity.HasKey(e => e.AuthSystemId)
                    .HasName("pk_dss_auth_system");

                entity.ToTable("ro_dss_auth_system");

                entity.HasAnnotation("Relational:Comment", "Система аутентификации DSS");

                entity.HasIndex(e => e.SystemAlias, "auth_system_system_alias_idx");

                entity.HasIndex(e => e.SystemId, "auth_system_system_id_idx");

                entity.Property(e => e.AuthSystemId)
                    .ValueGeneratedNever()
                    .HasColumnName("auth_system_id")
                    .HasComment("Идентификатор системы");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Используется по умолчанию");

                entity.Property(e => e.MethId)
                    .HasColumnName("meth_id")
                    .HasComment("Метод аутентификации");

                entity.Property(e => e.SystemAlias)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("system_alias")
                    .HasComment("Псевдоним системы");

                entity.Property(e => e.SystemId)
                    .HasColumnType("character varying")
                    .HasColumnName("system_id")
                    .HasComment("Идентификатор системы в DSS");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.DssAuthSystems)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.Meth)
                    .WithMany(p => p.DssAuthSystems)
                    .HasForeignKey(d => d.MethId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_meth");
            });

            modelBuilder.Entity<DssStorageType>(entity =>
            {
                entity.HasKey(e => e.StorageId)
                    .HasName("pk_dss_key_storage");

                entity.ToTable("ro_dss_storage_type");

                entity.HasAnnotation("Relational:Comment", "Справочник типов хранения ключей DSS");

                entity.Property(e => e.StorageId)
                    .ValueGeneratedNever()
                    .HasColumnName("storage_id")
                    .HasComment("Идентификатор типа хранения");

                entity.Property(e => e.StorageDescription)
                    .HasMaxLength(128)
                    .HasColumnName("storage_description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<DssTariff>(entity =>
            {
                entity.HasKey(e => e.DssId)
                    .HasName("ro_dss_tariff_pk");

                entity.ToTable("ro_dss_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица тарифов для серверов DSS");

                entity.HasIndex(e => e.DssId, "ro_dss_tariff_dss_id_uindex")
                    .IsUnique();

                entity.Property(e => e.DssId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("dss_id")
                    .HasComment("Идентификатор сервера DSS");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Идентификатор тарифа");

                entity.HasOne(d => d.Dss)
                    .WithOne(p => p.DssTariff)
                    .HasForeignKey<DssTariff>(d => d.DssId)
                    .HasConstraintName("ro_dss_tariff_ro_dss_dss_id_fk");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.DssTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("ro_dss_tariff_ro_tariff_tariff_id_fk");
            });

            modelBuilder.Entity<DssUser>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_dss_user");

                entity.ToTable("ro_dss_user");

                entity.HasAnnotation("Relational:Comment", "Таблица пользователей DSS");

                entity.HasIndex(e => e.DssId, "dss_user_dss_id_idx");

                entity.HasIndex(e => e.Email, "dss_user_email_idx");

                entity.HasIndex(e => e.GroupId, "dss_user_group_id_idx");

                entity.HasIndex(e => e.MobilePhone, "dss_user_mobile_phone_idx");

                entity.HasIndex(e => e.NextCheckTime, "dss_user_next_check_time_idx");

                entity.HasIndex(e => e.ProductId, "dss_user_product_id_idx");

                entity.HasIndex(e => e.UserName, "dss_user_user_name_idx");

                entity.HasIndex(e => new { e.UserName, e.DssId }, "sk_dss_user")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AuthContactTypeId)
                    .HasColumnName("auth_contact_type_id")
                    .HasComment("Тип контакта для аутентификации");

                entity.Property(e => e.AuthModeId)
                    .HasColumnName("auth_mode_id")
                    .HasComment("Режим аутентификации");

                entity.Property(e => e.AuthStepId)
                    .HasColumnName("auth_step_id")
                    .HasComment("Состояние аутентификации");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasDefaultValueSql("1")
                    .HasComment("DSS");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронная почта");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Группа пользователей DSS");

                entity.Property(e => e.InstallDate)
                    .HasColumnName("install_date")
                    .HasComment("Время активации ключа в myDSS");

                entity.Property(e => e.LastInitialTime)
                    .HasPrecision(0)
                    .HasColumnName("last_initial_time")
                    .HasComment("Дата последней инициализации мобильной аутентификации");

                entity.Property(e => e.MobilePhone)
                    .HasMaxLength(24)
                    .HasColumnName("mobile_phone")
                    .HasComment("Номер мобильного телефона");

                entity.Property(e => e.NextCheckTime)
                    .HasPrecision(0)
                    .HasColumnName("next_check_time")
                    .HasComment("Дата следующей проверки на отключение мобильной аутентификации");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.Password)
                    .HasMaxLength(64)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт пользователя");

                entity.Property(e => e.QrcodeEndDate)
                    .HasPrecision(0)
                    .HasColumnName("qrcode_end_date")
                    .HasComment("Дата окончания действия кода");

                entity.Property(e => e.QrcodeFileId)
                    .HasColumnName("qrcode_file_id")
                    .HasComment("QR-код");

                entity.Property(e => e.StsUserId)
                    .HasColumnName("sts_user_id")
                    .HasComment("Идентификатор пользователя в ЦИ");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("user_name")
                    .HasComment("Логин");

                entity.HasOne(d => d.AuthContactType)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.AuthContactTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_contact_type");

                entity.HasOne(d => d.AuthMode)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.AuthModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_mode");

                entity.HasOne(d => d.AuthStep)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.AuthStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_step");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.DssId)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.GroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_user_group");

                entity.HasOne(d => d.QrcodeFile)
                    .WithMany(p => p.DssUsers)
                    .HasForeignKey(d => d.QrcodeFileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_qrcode_file");

                entity.HasMany(d => d.Apps)
                    .WithMany(p => p.Users)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoDssUserApp",
                        l => l.HasOne<DssApp>().WithMany().HasForeignKey("AppId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("fk_app"),
                        r => r.HasOne<DssUser>().WithMany().HasForeignKey("UserId").HasConstraintName("fk_dss_user"),
                        j =>
                        {
                            j.HasKey("UserId", "AppId").HasName("pk_dss_user_app");

                            j.ToTable("ro_dss_user_app").HasAnnotation("Relational:Comment", "Таблица DSS-приложений пользователя DSS");

                            j.HasIndex(new[] { "UserId" }, "dss_user_app_user_idx");

                            j.IndexerProperty<int>("UserId").HasColumnName("user_id").HasComment("Пользователь DSS");

                            j.IndexerProperty<int>("AppId").HasColumnName("app_id").HasComment("Приложение DSS");
                        });
            });

            modelBuilder.Entity<DssUserAuthStep>(entity =>
            {
                entity.ToTable("ro_dss_user_auth_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний мобильной аутентификации пользователей DSS");

                entity.HasIndex(e => e.AuthStepId, "dss_auth_step_auth_step_id_idx");

                entity.HasIndex(e => e.DssUserId, "dss_auth_step_user_id_idx");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.AuthStepId)
                    .HasColumnName("auth_step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.AuthStep)
                    .WithMany(p => p.DssUserAuthSteps)
                    .HasForeignKey(d => d.AuthStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_auth_step");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.DssUserAuthSteps)
                    .HasForeignKey(d => d.DssUserId)
                    .HasConstraintName("fk_dss_user_id");
            });

            modelBuilder.Entity<DssUserGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("pk_dss_user_group");

                entity.ToTable("ro_dss_user_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп пользователей DSS");

                entity.HasIndex(e => e.DssId, "dss_user_group_dss_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "dss_user_group_validity_unit_id_idx");

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("group_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("Группа по умолчанию");

                entity.Property(e => e.LicenseValidity)
                    .HasColumnName("license_validity")
                    .HasComment("Период действия лицензии");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единицы времени лицензии");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.DssUserGroups)
                    .HasForeignKey(d => d.DssId)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.DssUserGroups)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<Eku>(entity =>
            {
                entity.HasKey(e => e.EkuId)
                    .HasName("pk_eku");

                entity.ToTable("ro_eku");

                entity.HasAnnotation("Relational:Comment", "Таблица расширений сертификата");

                entity.HasIndex(e => e.EkuName, "sk_eku_name")
                    .IsUnique();

                entity.HasIndex(e => e.EkuOid, "sk_eku_oid")
                    .IsUnique();

                entity.Property(e => e.EkuId)
                    .HasColumnName("eku_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EkuName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("eku_name")
                    .HasComment("Наименование");

                entity.Property(e => e.EkuOid)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("eku_oid")
                    .HasComment("Объектный идентификатор");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательный");
            });

            modelBuilder.Entity<EntityType>(entity =>
            {
                entity.HasKey(e => e.EntityTypeId)
                    .HasName("pk_entity_type");

                entity.ToTable("ro_entity_type");

                entity.HasAnnotation("Relational:Comment", "Таблица видов объектов для обновления");

                entity.HasIndex(e => e.EntityTypeId, "entity_type_id_idx");

                entity.Property(e => e.EntityTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("entity_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Description)
                    .HasMaxLength(128)
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.EntityTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("entity_type_name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<ExtremumAoContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_extremum_ao_contract_tariff_view");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.FirstContractTariffId).HasColumnName("first_contract_tariff_id");

                entity.Property(e => e.LastContractTariffId).HasColumnName("last_contract_tariff_id");
            });

            modelBuilder.Entity<ExtremumLicenseView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_extremum_license_view");

                entity.Property(e => e.MaxLicenseId).HasColumnName("max_license_id");

                entity.Property(e => e.MinLicenseId).HasColumnName("min_license_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<FeedbackRating>(entity =>
            {
                entity.HasKey(e => e.RatingId)
                    .HasName("pk_feedback_rating");

                entity.ToTable("ro_feedback_rating");

                entity.HasAnnotation("Relational:Comment", "Таблица возможных оценок при обратной связи");

                entity.Property(e => e.RatingId)
                    .ValueGeneratedNever()
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("label")
                    .HasComment("Название");
            });

            modelBuilder.Entity<File>(entity =>
            {
                entity.HasKey(e => e.FileId)
                    .HasName("pk_file");

                entity.ToTable("ro_file");

                entity.HasAnnotation("Relational:Comment", "Таблица файлов");

                entity.HasIndex(e => e.FileTypeId, "file_file_type_id_idx");

                entity.HasIndex(e => e.UserId, "file_user_id_idx");

                entity.HasIndex(e => e.FileGuid, "sk_guid")
                    .IsUnique();

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CleaningTime)
                    .HasColumnName("cleaning_time")
                    .HasComment("Время удаления");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Data)
                    .HasColumnName("data")
                    .HasComment("Данные");

                entity.Property(e => e.FileGuid)
                    .HasColumnName("file_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.FileName)
                    .HasColumnType("character varying")
                    .HasColumnName("file_name")
                    .HasComment("Наименование");

                entity.Property(e => e.FileTypeId)
                    .HasColumnName("file_type_id")
                    .HasComment("Тип файла");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.FileType)
                    .WithMany(p => p.Files)
                    .HasForeignKey(d => d.FileTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_file_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Files)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<FileMask>(entity =>
            {
                entity.HasKey(e => e.FileMaskId)
                    .HasName("pk_file_mask");

                entity.ToTable("ro_file_mask");

                entity.HasAnnotation("Relational:Comment", "Таблица масок файлов");

                entity.HasIndex(e => e.MaskTemplate, "sk_file_mask")
                    .IsUnique();

                entity.Property(e => e.FileMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_mask_id")
                    .HasComment("Код");

                entity.Property(e => e.MaskTemplate)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("mask_template")
                    .HasComment("Шаблон");
            });

            modelBuilder.Entity<FileSignature>(entity =>
            {
                entity.HasKey(e => new { e.FileId, e.SignatureId })
                    .HasName("pk_file_signature");

                entity.ToTable("ro_file_signature");

                entity.HasAnnotation("Relational:Comment", "Таблица подписей файла");

                entity.HasIndex(e => e.FileId, "file_signature_file_id_idx");

                entity.HasIndex(e => e.SignatureId, "file_signature_signature_id_idx");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.SignatureId)
                    .HasColumnName("signature_id")
                    .HasComment("Подпись");
            });

            modelBuilder.Entity<FileType>(entity =>
            {
                entity.HasKey(e => e.FileTypeId)
                    .HasName("pk_file_type");

                entity.ToTable("ro_file_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов файлов");

                entity.HasIndex(e => e.FileTypeName, "sk_file_type_name")
                    .IsUnique();

                entity.Property(e => e.FileTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_type_id")
                    .HasComment("Код");

                entity.Property(e => e.FileExtension)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("file_extension")
                    .HasComment("Расширение");

                entity.Property(e => e.FileTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("file_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Gate>(entity =>
            {
                entity.HasKey(e => e.GateId)
                    .HasName("pk_gate");

                entity.ToTable("ro_gate");

                entity.HasAnnotation("Relational:Comment", "Таблица шлюзов");

                entity.HasIndex(e => e.GateName, "sk_gate")
                    .IsUnique();

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.GateName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("gate_name")
                    .HasComment("Наименование");

                entity.Property(e => e.IsVirtual).HasColumnName("is_virtual");

                entity.Property(e => e.Password)
                    .HasMaxLength(128)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.SystemId).HasColumnName("system_id");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Gates)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_id");

                entity.HasOne(d => d.System)
                    .WithMany(p => p.Gates)
                    .HasForeignKey(d => d.SystemId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate_system_id");
            });

            modelBuilder.Entity<GateProductType>(entity =>
            {
                entity.HasKey(e => e.GateProductTypeId)
                    .HasName("pk_product_type_gate");

                entity.ToTable("ro_gate_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица систем обновлений");

                entity.Property(e => e.GateProductTypeId)
                    .HasColumnName("gate_product_type_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.GateProductTypes)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.GateProductTypes)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.GateProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type_id");
            });

            modelBuilder.Entity<GateProtocol>(entity =>
            {
                entity.HasKey(e => e.GateProtocolId)
                    .HasName("pk_gate_protocol");

                entity.ToTable("ro_gate_protocol");

                entity.HasAnnotation("Relational:Comment", "Таблица протоколов гейтов");

                entity.Property(e => e.GateProtocolId)
                    .HasColumnName("gate_protocol_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.GateProtocols)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.GateProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol_id");
            });

            modelBuilder.Entity<GateSetting>(entity =>
            {
                entity.HasKey(e => new { e.GateId, e.SettingId })
                    .HasName("pk_gate_setting");

                entity.ToTable("ro_gate_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек гейстов");

                entity.HasIndex(e => e.GateId, "gate_setting_gate_id_idx");

                entity.HasIndex(e => e.SettingId, "gate_setting_setting_id_idx");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.GateSettings)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.GateSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting");
            });

            modelBuilder.Entity<GateUpdater>(entity =>
            {
                entity.HasKey(e => e.GateUpdaterId)
                    .HasName("pk_gate_updater");

                entity.ToTable("ro_gate_updater");

                entity.HasAnnotation("Relational:Comment", "Таблица обновлений объектов");

                entity.HasIndex(e => e.CreationTime, "gate_updater_creation_time_idx");

                entity.HasIndex(e => e.GateId, "gate_updater_gate_id_idx");

                entity.HasIndex(e => e.GateUpdaterId, "gate_updater_gate_updater_id_idx");

                entity.HasIndex(e => new { e.GateId, e.EntityGuid, e.EntityTypeId, e.CreationTime }, "sk_gate_updater")
                    .IsUnique();

                entity.Property(e => e.GateUpdaterId)
                    .HasColumnName("gate_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ConfirmTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("confirm_time")
                    .HasComment("Время подтверждения обновления");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время обновления");

                entity.Property(e => e.EntityGuid)
                    .HasColumnName("entity_guid")
                    .HasComment("Гуид объекта");

                entity.Property(e => e.EntityTypeId)
                    .HasColumnName("entity_type_id")
                    .HasComment("Тип объекта");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.HasOne(d => d.EntityType)
                    .WithMany(p => p.GateUpdaters)
                    .HasForeignKey(d => d.EntityTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_entity_type");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.GateUpdaters)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate");
            });

            modelBuilder.Entity<Gender>(entity =>
            {
                entity.HasKey(e => e.GenderId)
                    .HasName("pk_gender");

                entity.ToTable("ro_gender");

                entity.HasAnnotation("Relational:Comment", "Таблица полов");

                entity.HasIndex(e => e.GenderName, "sk_gender_name")
                    .IsUnique();

                entity.Property(e => e.GenderId)
                    .ValueGeneratedNever()
                    .HasColumnName("gender_id")
                    .HasComment("Код");

                entity.Property(e => e.GenderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("gender_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Holding>(entity =>
            {
                entity.HasKey(e => e.HoldingId)
                    .HasName("ro_holding_pkey");

                entity.ToTable("ro_holding");

                entity.HasIndex(e => new { e.OffTime, e.AbonentId, e.ParentAbonentId }, "idx_parend_abonent_id_abonent_id_off_time")
                    .IsUnique();

                entity.Property(e => e.HoldingId)
                    .HasColumnName("holding_id")
                    .HasComment("Ид");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Организация");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");

                entity.Property(e => e.ParentAbonentId)
                    .HasColumnName("parent_abonent_id")
                    .HasComment("Головная организация");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.HoldingAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_ro_holding_holding_abonent_id");

                entity.HasOne(d => d.ParentAbonent)
                    .WithMany(p => p.HoldingParentAbonents)
                    .HasForeignKey(d => d.ParentAbonentId)
                    .HasConstraintName("fk_ro_holding_parent_abonent_id");
            });

            modelBuilder.Entity<HoldingAbonent>(entity =>
            {
                entity.HasKey(e => e.AbonentId)
                    .HasName("ro_holding_abonent_pkey");

                entity.ToTable("ro_holding_abonent");

                entity.HasIndex(e => new { e.OffTime, e.Kpp, e.Inn, e.AgentId }, "idx_ro_holding_abonent_inn_kpp_agetnt_1c_id_offtime")
                    .IsUnique();

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Ид");

                entity.Property(e => e.AgentId)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("agent_id")
                    .HasComment("Ид партнёра 1С");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");
            });

            modelBuilder.Entity<Interview>(entity =>
            {
                entity.HasKey(e => e.InterviewId)
                    .HasName("pk_interview");

                entity.ToTable("ro_interview");

                entity.HasAnnotation("Relational:Comment", "Таблица опросов");

                entity.HasIndex(e => e.StepId, "interview_step_id_idx");

                entity.HasIndex(e => e.UserId, "interview_user_id_idx");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MultySelect)
                    .HasColumnName("multy_select")
                    .HasComment("Множественный выбор");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.Subject)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("subject")
                    .HasComment("Содержание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Interviews)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Interviews)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<InterviewAnswer>(entity =>
            {
                entity.HasKey(e => e.AnswerId)
                    .HasName("pk_interview_answer");

                entity.ToTable("ro_interview_answer");

                entity.HasAnnotation("Relational:Comment", "Таблица ответов");

                entity.HasIndex(e => e.InterviewId, "interview_answer_interview_id_idx");

                entity.HasIndex(e => new { e.InterviewId, e.AnswerValue }, "sk_interview_answer_value")
                    .IsUnique();

                entity.Property(e => e.AnswerId)
                    .HasColumnName("answer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AnswerValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("answer_value")
                    .HasComment("Значение");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Опрос");

                entity.HasOne(d => d.Interview)
                    .WithMany(p => p.InterviewAnswers)
                    .HasForeignKey(d => d.InterviewId)
                    .HasConstraintName("fk_interview");

                entity.HasMany(d => d.Agents)
                    .WithMany(p => p.Answers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoInterviewAgent",
                        l => l.HasOne<Agent>().WithMany().HasForeignKey("AgentId").HasConstraintName("fk_agent"),
                        r => r.HasOne<InterviewAnswer>().WithMany().HasForeignKey("AnswerId").HasConstraintName("fk_interview_answer"),
                        j =>
                        {
                            j.HasKey("AnswerId", "AgentId").HasName("pk_interview_agent");

                            j.ToTable("ro_interview_agent").HasAnnotation("Relational:Comment", "Таблица ответов партнеров");

                            j.HasIndex(new[] { "AgentId" }, "interview_agent_agent_id_idx");

                            j.HasIndex(new[] { "AnswerId" }, "interview_agent_answer_id_idx");

                            j.IndexerProperty<int>("AnswerId").HasColumnName("answer_id").HasComment("Ответ");

                            j.IndexerProperty<int>("AgentId").HasColumnName("agent_id").HasComment("Партнер");
                        });

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Answers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoInterviewUser",
                        l => l.HasOne<User>().WithMany().HasForeignKey("UserId").HasConstraintName("fk_user"),
                        r => r.HasOne<InterviewAnswer>().WithMany().HasForeignKey("AnswerId").HasConstraintName("fk_interview_answer"),
                        j =>
                        {
                            j.HasKey("AnswerId", "UserId").HasName("pk_interview_user");

                            j.ToTable("ro_interview_user").HasAnnotation("Relational:Comment", "Таблица ответов пользователя");

                            j.HasIndex(new[] { "AnswerId" }, "interview_user_answer_id_idx");

                            j.HasIndex(new[] { "UserId" }, "interview_user_user_id_idx");

                            j.IndexerProperty<int>("AnswerId").HasColumnName("answer_id").HasComment("Ответ");

                            j.IndexerProperty<int>("UserId").HasColumnName("user_id").HasComment("Пользователь");
                        });
            });

            modelBuilder.Entity<InterviewStep>(entity =>
            {
                entity.HasKey(e => new { e.InterviewId, e.StepId, e.LogTime })
                    .HasName("pk_interview_step");

                entity.ToTable("ro_interview_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний опросов");

                entity.HasIndex(e => e.InterviewId, "interview_step_interview_id_idx");

                entity.HasIndex(e => e.StepId, "interview_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "interview_step_user_id_idx");

                entity.Property(e => e.InterviewId)
                    .HasColumnName("interview_id")
                    .HasComment("Опрос");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Interview)
                    .WithMany(p => p.InterviewSteps)
                    .HasForeignKey(d => d.InterviewId)
                    .HasConstraintName("fk_interview");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.InterviewSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.InterviewSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<InvoiceReturnType>(entity =>
            {
                entity.HasKey(e => e.InvoiceReturnTypeId)
                    .HasName("pk_invoice_return_type");

                entity.ToTable("ro_invoice_return_type");

                entity.Property(e => e.InvoiceReturnTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("invoice_return_type_id");

                entity.Property(e => e.InvoiceReturnTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("invoice_return_type_name");
            });

            modelBuilder.Entity<Ip>(entity =>
            {
                entity.HasKey(e => e.IpId)
                    .HasName("pk_ip");

                entity.ToTable("ro_ip");

                entity.HasAnnotation("Relational:Comment", "Таблица IP серверов");

                entity.HasIndex(e => e.ServerId, "ip_server_id_idx");

                entity.HasIndex(e => new { e.IpAddress, e.ServerId }, "sk_ip_server")
                    .IsUnique();
                entity.Property(e => e.IpAddress)
                    .HasConversion(v => v.ToString(),
                                   v => IPAddress.Parse(v));

                entity.Property(e => e.IpId)
                    .HasColumnName("ip_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IpAddress)
                    .IsRequired()
                    .HasColumnName("ip_address")
                    .HasComment("IP Адрес");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.Ips)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");
            });

            modelBuilder.Entity<IrucAbonent>(entity =>
            {
                entity.HasKey(e => e.IrucAbonentId)
                    .HasName("pk_iruc_abonent");

                entity.ToTable("ro_iruc_abonent");

                entity.HasAnnotation("Relational:Comment", "Таблица абонентов ИРУЦ");

                entity.HasIndex(e => new { e.AbonentGuid, e.SystemPrefix, e.EmailLogin, e.DomainSoed }, "sk_iruc_abonent")
                    .IsUnique();

                entity.Property(e => e.IrucAbonentId)
                    .HasColumnName("iruc_abonent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasComment("ГУИД абонента");

                entity.Property(e => e.DomainSoed)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.EmailLogin)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("email_login")
                    .HasComment("Логин");

                entity.Property(e => e.EmailPassword)
                    .HasMaxLength(40)
                    .HasColumnName("email_password")
                    .HasComment("Пароль");

                entity.Property(e => e.SystemPrefix)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("system_prefix")
                    .IsFixedLength()
                    .HasComment("Префикс");
            });

            modelBuilder.Entity<IsExistRnsPfr>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_is_exist_rns_pfr");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<Issuer>(entity =>
            {
                entity.HasKey(e => e.IssuerId)
                    .HasName("pk_issuer_id");

                entity.ToTable("ro_issuer");

                entity.HasAnnotation("Relational:Comment", "Издатели");

                entity.HasIndex(e => e.Inn, "ro_issuer_inn_uindex")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "ro_issuer_name_uindex")
                    .IsUnique();

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("ИД издателя");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН издателя");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name")
                    .HasComment("Наименование издателя");
            });

            modelBuilder.Entity<IssuerAccreditation>(entity =>
            {
                entity.HasKey(e => e.IssuerAccreditationId)
                    .HasName("pk_issuer_accreditation_id");

                entity.ToTable("ro_issuer_accreditation");

                entity.HasAnnotation("Relational:Comment", "Таблица аккредитаций издателей");

                entity.Property(e => e.IssuerAccreditationId)
                    .HasColumnName("issuer_accreditation_id")
                    .HasComment("Идентификатор аккредитации");

                entity.Property(e => e.IssuerId)
                    .HasColumnName("issuer_id")
                    .HasComment("Издатель");

                entity.Property(e => e.ReceivedAt)
                    .HasPrecision(0)
                    .HasColumnName("received_at")
                    .HasComment("Дата получения аккредитации");

                entity.Property(e => e.RevokedAt)
                    .HasPrecision(0)
                    .HasColumnName("revoked_at")
                    .HasComment("Дата отзыва аккредитации");

                entity.HasOne(d => d.Issuer)
                    .WithMany(p => p.IssuerAccreditations)
                    .HasForeignKey(d => d.IssuerId)
                    .HasConstraintName("issuer_fk");
            });

            modelBuilder.Entity<It>(entity =>
            {
                entity.HasKey(e => e.ItsId)
                    .HasName("pk_its_id");

                entity.ToTable("ro_its");

                entity.HasAnnotation("Relational:Comment", "Таблица рег-номеров подписки ИТС");

                entity.HasIndex(e => e.AgentId, "its_agent_id_idx");

                entity.HasIndex(e => e.RegionId, "its_region_id_idx");

                entity.HasIndex(e => e.ItsInn, "ro_its_its_inn_idx");

                entity.HasIndex(e => e.ItsInn, "ro_its_its_kpp_idx");

                entity.HasIndex(e => e.RegistrationNumber, "ro_its_registration_number_key")
                    .IsUnique();

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AgentInn)
                    .HasMaxLength(12)
                    .HasColumnName("agent_inn")
                    .HasComment("ИНН партнера");

                entity.Property(e => e.AgentKpp)
                    .HasMaxLength(9)
                    .HasColumnName("agent_kpp")
                    .HasComment("КПП партнера");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name")
                    .HasComment("Наименование партнера");

                entity.Property(e => e.Distributor)
                    .HasMaxLength(200)
                    .HasColumnName("distributor")
                    .HasComment("Дистрибьютор (ЦП)");

                entity.Property(e => e.DistributorInn)
                    .HasMaxLength(12)
                    .HasColumnName("distributor_inn")
                    .HasComment("ИНН ЦП");

                entity.Property(e => e.DistributorKpp)
                    .HasMaxLength(9)
                    .HasColumnName("distributor_kpp")
                    .HasComment("КПП ЦП");

                entity.Property(e => e.ItsCreationDate)
                    .HasPrecision(0)
                    .HasColumnName("its_creation_date")
                    .HasComment("Дата внесения подписки");

                entity.Property(e => e.ItsEndDate)
                    .HasPrecision(0)
                    .HasColumnName("its_end_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата окончания подписки");

                entity.Property(e => e.ItsInn)
                    .HasMaxLength(12)
                    .HasColumnName("its_inn")
                    .HasComment("ИНН");

                entity.Property(e => e.ItsKpp)
                    .HasMaxLength(9)
                    .HasColumnName("its_kpp")
                    .HasComment("КПП");

                entity.Property(e => e.ItsName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_name")
                    .HasComment("Наименование организации-владельца");

                entity.Property(e => e.ItsPaid)
                    .HasColumnName("its_paid")
                    .HasComment("Платная");

                entity.Property(e => e.ItsPublishCount)
                    .HasColumnName("its_publish_count")
                    .HasComment("Выпусков");

                entity.Property(e => e.ItsPublishName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_publish_name")
                    .HasComment("Издание");

                entity.Property(e => e.ItsStartDate)
                    .HasPrecision(0)
                    .HasColumnName("its_start_date")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата начала подписки");

                entity.Property(e => e.Locality)
                    .HasMaxLength(50)
                    .HasColumnName("locality")
                    .HasComment("Населенный пункт");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.RegistrationNumber)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("registration_number")
                    .HasComment("Рег-номер подиски ИТС-Проф");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Its)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Its)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_region");

                entity.HasMany(d => d.ItsChildren)
                    .WithMany(p => p.ItsParents)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoItsAdditional",
                        l => l.HasOne<It>().WithMany().HasForeignKey("ItsChildId").HasConstraintName("fk_its_child"),
                        r => r.HasOne<It>().WithMany().HasForeignKey("ItsParentId").HasConstraintName("fk_its_parent"),
                        j =>
                        {
                            j.HasKey("ItsParentId", "ItsChildId").HasName("pk_ro_its_additional");

                            j.ToTable("ro_its_additional").HasAnnotation("Relational:Comment", "Таблица дополнительных рег-номеров подписки ИТС");

                            j.HasIndex(new[] { "ItsParentId" }, "ro_its_additional_its_parent_id_idx");

                            j.IndexerProperty<int>("ItsParentId").HasColumnName("its_parent_id").HasComment("Идентификатор родителького рег-номера");

                            j.IndexerProperty<int>("ItsChildId").HasColumnName("its_child_id").HasComment("Идентификатор дочернего рег-номера");
                        });

                entity.HasMany(d => d.ItsParents)
                    .WithMany(p => p.ItsChildren)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoItsAdditional",
                        l => l.HasOne<It>().WithMany().HasForeignKey("ItsParentId").HasConstraintName("fk_its_parent"),
                        r => r.HasOne<It>().WithMany().HasForeignKey("ItsChildId").HasConstraintName("fk_its_child"),
                        j =>
                        {
                            j.HasKey("ItsParentId", "ItsChildId").HasName("pk_ro_its_additional");

                            j.ToTable("ro_its_additional").HasAnnotation("Relational:Comment", "Таблица дополнительных рег-номеров подписки ИТС");

                            j.HasIndex(new[] { "ItsParentId" }, "ro_its_additional_its_parent_id_idx");

                            j.IndexerProperty<int>("ItsParentId").HasColumnName("its_parent_id").HasComment("Идентификатор родителького рег-номера");

                            j.IndexerProperty<int>("ItsChildId").HasColumnName("its_child_id").HasComment("Идентификатор дочернего рег-номера");
                        });
            });

            modelBuilder.Entity<ItsDistributor>(entity =>
            {
                entity.HasKey(e => e.ItsDistributorName)
                    .HasName("pk_its_distributor");

                entity.ToTable("ro_its_distributor");

                entity.HasAnnotation("Relational:Comment", "Таблица дистрибьюторов ИТС");

                entity.Property(e => e.ItsDistributorName)
                    .HasColumnType("character varying")
                    .HasColumnName("its_distributor_name")
                    .HasComment("Наименование дистрибьютора");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("ЦП");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.ItsDistributors)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent_id");
            });

            modelBuilder.Entity<ItsHistory>(entity =>
            {
                entity.HasKey(e => e.ItsHistoryId)
                    .HasName("pk_its_history");

                entity.ToTable("ro_its_history");

                entity.HasAnnotation("Relational:Comment", "История подписок ИТС");

                entity.HasIndex(e => e.ItsId, "its_history_its_id_idx");

                entity.Property(e => e.ItsHistoryId)
                    .HasColumnName("its_history_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("ИТС");

                entity.Property(e => e.ItsPublishName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("its_publish_name")
                    .HasComment("Издание");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.HasOne(d => d.Its)
                    .WithMany(p => p.ItsHistories)
                    .HasForeignKey(d => d.ItsId)
                    .HasConstraintName("fk_its_history");
            });

            modelBuilder.Entity<ItsProcessedFileHistory>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_its_processed_file_history");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("file_name")
                    .HasComment("Имя файла");

                entity.Property(e => e.ItsProcessedFileHistoryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("its_processed_file_history_id")
                    .HasComment("Идентификатор файла");

                entity.Property(e => e.ProcessedDate)
                    .HasPrecision(0)
                    .HasColumnName("processed_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обработки файла");
            });

            modelBuilder.Entity<ItsProfSubscription>(entity =>
            {
                entity.HasKey(e => e.ItsSubscriptionId)
                    .HasName("pk_its_subscription");

                entity.ToTable("ro_its_prof_subscription");

                entity.HasAnnotation("Relational:Comment", "Таблица подписок ИТС-Проф");

                entity.Property(e => e.ItsSubscriptionId)
                    .HasColumnName("its_subscription_id")
                    .HasComment("Идентификатор ИТС подписки");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ItsPublishName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("its_publish_name")
                    .HasComment("Наименование ИТС подписки");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата отключения");
            });

            modelBuilder.Entity<KcrIssue>(entity =>
            {
                entity.HasKey(e => e.IssueId)
                    .HasName("ro_kcr_issue_pk");

                entity.ToTable("ro_kcr_issue");

                entity.HasAnnotation("Relational:Comment", "Выпуски КЦР");

                entity.Property(e => e.IssueId).HasColumnName("issue_id");

                entity.Property(e => e.AbonentTypeId).HasColumnName("abonent_type_id");

                entity.Property(e => e.CryptoProviderId)
                    .HasColumnName("crypto_provider_id")
                    .HasComment("криптопровайдер");

                entity.Property(e => e.IsActive)
                    .HasColumnName("is_active")
                    .HasComment("выпуск открыт");

                entity.Property(e => e.IssueGuid).HasColumnName("issue_guid");

                entity.Property(e => e.IssuedAmount)
                    .HasColumnName("issued_amount")
                    .HasComment("выпущенное количество КЭП");

                entity.Property(e => e.KcrArticle).HasColumnName("kcr_article");

                entity.Property(e => e.KcrExpiryDate).HasColumnName("kcr_expiry_date");

                entity.Property(e => e.KcrPriceTariffGuid)
                    .HasColumnName("kcr_price_tariff_guid")
                    .HasComment("id тарифа на подключение КЦР");

                entity.Property(e => e.KcrTariffDiscountId).HasColumnName("kcr_tariff_discount_id");

                entity.Property(e => e.MaxAmount)
                    .HasColumnName("max_amount")
                    .HasComment("максимальное количество КЭП");

                entity.Property(e => e.Price).HasColumnName("price");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.SignArticle).HasColumnName("sign_article");

                entity.Property(e => e.SignExpiryDate)
                    .HasColumnName("sign_expiry_date")
                    .HasComment("дата истечения срока действия договора");

                entity.Property(e => e.SignPriceTariffGuid)
                    .HasColumnName("sign_price_tariff_guid")
                    .HasComment("id тарифа на выпуск КЭП");

                entity.Property(e => e.SignSectionId).HasColumnName("sign_section_id");

                entity.Property(e => e.SignTariffDiscountId).HasColumnName("sign_tariff_discount_id");

                entity.Property(e => e.SignTariffId).HasColumnName("sign_tariff_id");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.KcrIssues)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.CryptoProvider)
                    .WithMany(p => p.KcrIssues)
                    .HasForeignKey(d => d.CryptoProviderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_crypto_provider");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.KcrIssues)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.SignTariffDiscount)
                    .WithMany(p => p.KcrIssues)
                    .HasForeignKey(d => d.SignTariffDiscountId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_tariff_discount");

                entity.HasOne(d => d.Sign)
                    .WithMany(p => p.KcrIssues)
                    .HasForeignKey(d => new { d.SignSectionId, d.SignTariffId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<Key>(entity =>
            {
                entity.HasKey(e => e.KeyId)
                    .HasName("pk_key");

                entity.ToTable("ro_key");

                entity.HasAnnotation("Relational:Comment", "Таблица ключей");

                entity.HasIndex(e => e.CaId, "key_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "key_cert_request_id_idx");

                entity.HasIndex(e => e.CertificateId, "key_certificate_id_idx");

                entity.HasIndex(e => e.ContainerId, "key_container_id_idx");

                entity.HasIndex(e => e.PersonId, "key_person_id_idx");

                entity.HasIndex(e => e.ProviderId, "key_provider_id_idx");

                entity.HasIndex(e => e.TemplateId, "key_template_id_idx");

                entity.HasIndex(e => e.VipnetUserId, "key_vipnet_user_id_idx");

                entity.HasIndex(e => e.PackId, "sk_pack_id")
                    .IsUnique();

                entity.HasIndex(e => e.PublicKey, "sk_public_key")
                    .IsUnique();

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("ЦС");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ContainerId)
                    .HasColumnName("container_id")
                    .HasComment("Контейнер");

                entity.Property(e => e.ContainerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("container_name")
                    .HasComment("Наименование контейнера");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Eхportable)
                    .IsRequired()
                    .HasColumnName("eхportable")
                    .HasDefaultValueSql("true")
                    .HasComment("Экспортируемый ключ");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.KeyPassword)
                    .HasMaxLength(20)
                    .HasColumnName("key_password")
                    .HasComment("Пароль");

                entity.Property(e => e.PackId)
                    .HasMaxLength(64)
                    .HasColumnName("pack_id")
                    .HasComment("Пакет");

                entity.Property(e => e.PasswordPhrase)
                    .HasMaxLength(100)
                    .HasColumnName("password_phrase")
                    .HasComment("Парольная фраза");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Физ. лицо");

                entity.Property(e => e.ProtectionClassId)
                    .HasColumnName("protection_class_id")
                    .HasComment("Класс защиты");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.PublicKey)
                    .HasMaxLength(256)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Шаблон УЦ");

                entity.Property(e => e.VipnetUserId)
                    .HasMaxLength(8)
                    .HasColumnName("vipnet_user_id")
                    .IsFixedLength()
                    .HasComment("Пользователь ViPNet");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Container)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.ContainerId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_container");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.PersonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_person");

                entity.HasOne(d => d.ProtectionClass)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.ProtectionClassId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protection_class");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_provider");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template");

                entity.HasOne(d => d.VipnetUser)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.VipnetUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_user");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.Keys)
                    .HasForeignKey(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<KeyPermission>(entity =>
            {
                entity.HasKey(e => e.KeyPermissionId)
                    .HasName("pk_key_permission");

                entity.ToTable("ro_key_permission");

                entity.HasIndex(e => e.PermissionId, "key_permission_permission_id_idx");

                entity.HasIndex(e => e.PersonKeyId, "key_permission_person_key_id_idx");

                entity.Property(e => e.KeyPermissionId)
                    .HasColumnName("key_permission_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionId)
                    .HasColumnName("permission_id")
                    .HasComment("Разрешение");

                entity.Property(e => e.PersonKeyId)
                    .HasColumnName("person_key_id")
                    .HasComment("Ключ владельца ЭП");

                entity.HasOne(d => d.Permission)
                    .WithMany(p => p.KeyPermissions)
                    .HasForeignKey(d => d.PermissionId)
                    .HasConstraintName("fk_permission");

                entity.HasOne(d => d.PersonKey)
                    .WithMany(p => p.KeyPermissions)
                    .HasForeignKey(d => d.PersonKeyId)
                    .HasConstraintName("fk_product_person_key");
            });

            modelBuilder.Entity<KeySerialNumber>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_key_serial_number");

                entity.HasAnnotation("Relational:Comment", "Таблица связи ключ - серийный номер носителя");

                entity.HasIndex(e => new { e.KeyId, e.SerialNumber }, "sk_serial_number")
                    .IsUnique();

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("serial_number")
                    .HasComment("Серийный номер носителя");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.KeyId)
                //    .OnDelete(DeleteBehavior.Restrict)
                //    .HasConstraintName("fk_key");
            });

            modelBuilder.Entity<Kladr>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_kladr");

                entity.HasAnnotation("Relational:Comment", "Таблица КЛАДР (4 уровня)");

                entity.HasIndex(e => e.Code, "ro_kladr_code");

                entity.Property(e => e.Code)
                    .HasMaxLength(13)
                    .HasColumnName("code")
                    .IsFixedLength();

                entity.Property(e => e.Gninmb)
                    .HasMaxLength(4)
                    .HasColumnName("gninmb")
                    .IsFixedLength()
                    .HasComment("Код ИФНС");

                entity.Property(e => e.Index)
                    .HasMaxLength(6)
                    .HasColumnName("index")
                    .IsFixedLength()
                    .HasComment("Индекс");

                entity.Property(e => e.Name)
                    .HasMaxLength(40)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.Ocatd)
                    .HasMaxLength(11)
                    .HasColumnName("ocatd")
                    .IsFixedLength()
                    .HasComment("ОКАТО");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .HasColumnName("socr")
                    .HasComment("Сокращение типа");

                entity.Property(e => e.Status)
                    .HasColumnName("status")
                    .HasComment("Статус");

                entity.Property(e => e.Uno)
                    .HasMaxLength(4)
                    .HasColumnName("uno")
                    .IsFixedLength()
                    .HasComment("Код тер. уч. ИФНС");
            });

            modelBuilder.Entity<License>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license");

                entity.ToTable("ro_license");

                entity.HasIndex(e => e.LicenseTypeId, "license_license_type_id_idx");

                entity.HasIndex(e => e.ProductId, "license_product_id_idx");

                entity.HasIndex(e => e.StepId, "license_step_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия лицензии");

                entity.Property(e => e.IsActual)
                    .HasColumnName("is_actual")
                    .HasComment("Флаг актуальности");

                entity.Property(e => e.IsPrimary)
                    .HasColumnName("is_primary")
                    .HasComment("Флаг первой лицензии");

                entity.Property(e => e.LicenseGuid)
                    .HasColumnName("license_guid")
                    .HasComment("Гуид лицензии");

                entity.Property(e => e.LicenseTypeId)
                    .HasColumnName("license_type_id")
                    .HasComment("Ссылка на тип лицензии");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Ссылка на продукт");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала действия лицензии");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("16")
                    .HasComment("Состояние");

                entity.Property(e => e.TimeLimit)
                    .HasColumnName("time_limit")
                    .HasComment("Время ожидания");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.Licenses)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("ro_license_license_type_id_fkey");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Licenses)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_license_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Licenses)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<LicenseDetail>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license_detail");

                entity.ToTable("ro_license_detail");

                entity.HasAnnotation("Relational:Comment", "Таблица реквизитов лицензий");

                entity.HasIndex(e => e.ItsId, "license_detail_its_id_idx");

                entity.HasIndex(e => e.OfficeId, "license_detail_office_id_idx");

                entity.Property(e => e.LicenseId)
                    .ValueGeneratedNever()
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsFree)
                    .HasColumnName("is_free")
                    .HasComment("Флаг бесплатной лицензии");

                entity.Property(e => e.ItsId)
                    .HasColumnName("its_id")
                    .HasComment("ИТС");

                entity.Property(e => e.ItsOptionId)
                    .HasMaxLength(50)
                    .HasColumnName("its_option_id")
                    .HasComment("Ид. опции ИТС");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Uin1c)
                    .HasMaxLength(50)
                    .HasColumnName("uin_1c")
                    .HasComment("Ид. пользователя 1С");

                entity.HasOne(d => d.Its)
                    .WithMany(p => p.LicenseDetails)
                    .HasForeignKey(d => d.ItsId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_its");

                entity.HasOne(d => d.License)
                    .WithOne(p => p.LicenseDetail)
                    .HasForeignKey<LicenseDetail>(d => d.LicenseId)
                    .HasConstraintName("fk_license_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.LicenseDetails)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<LicenseInProduct>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_license_in_product");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.StartTime)
                    .HasPrecision(0)
                    .HasColumnName("start_time");
            });

            modelBuilder.Entity<LicensePool>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_license_pool");

                entity.ToTable("ro_license_pool");

                entity.HasAnnotation("Relational:Comment", "Таблица пулов лицензий");

                entity.HasIndex(e => e.LicenseTypeId, "license_pool_license_type_id_idx");

                entity.HasIndex(e => e.StepId, "license_pool_step_id_idx");

                entity.HasIndex(e => new { e.LicenseTypeId, e.RegistrationNumber }, "sk_license_pool")
                    .IsUnique();

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LicenseTypeId)
                    .HasColumnName("license_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.PinCode)
                    .HasColumnType("character varying")
                    .HasColumnName("pin_code")
                    .HasComment("ПИН код");

                entity.Property(e => e.RegistrationNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("registration_number")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("57")
                    .HasComment("Состояние");

                entity.HasOne(d => d.LicenseType)
                    .WithMany(p => p.LicensePools)
                    .HasForeignKey(d => d.LicenseTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_license_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.LicensePools)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<LicensePoolStep>(entity =>
            {
                entity.HasKey(e => new { e.LicenseId, e.StepId, e.LogTime })
                    .HasName("pk_license_pool_step");

                entity.ToTable("ro_license_pool_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний лицензий в пуле");

                entity.HasIndex(e => e.LicenseId, "license_pool_step_license_id_idx");

                entity.HasIndex(e => e.StepId, "license_pool_step_step_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.License)
                    .WithMany(p => p.LicensePoolSteps)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_license_pool");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.LicensePoolSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<LicenseStep>(entity =>
            {
                entity.HasKey(e => new { e.LicenseId, e.StepId, e.LogTime })
                    .HasName("pk_license_step");

                entity.ToTable("ro_license_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний лицензий");

                entity.HasIndex(e => e.LicenseId, "license_step_license_id_idx");

                entity.HasIndex(e => e.StepId, "license_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "license_step_user_id_idx");

                entity.Property(e => e.LicenseId)
                    .HasColumnName("license_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.License)
                    .WithMany(p => p.LicenseSteps)
                    .HasForeignKey(d => d.LicenseId)
                    .HasConstraintName("fk_license");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.LicenseSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LicenseSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<LicenseType>(entity =>
            {
                entity.HasKey(e => e.LicenseTypeId)
                    .HasName("pk_license_type");

                entity.ToTable("ro_license_type");

                entity.Property(e => e.LicenseTypeId).HasColumnName("license_type_id");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата время создания");

                entity.Property(e => e.LicenseTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("license_type_name")
                    .HasComment("Имя");
            });

            modelBuilder.Entity<Limit>(entity =>
            {
                entity.HasKey(e => e.LimitId)
                    .HasName("pk_limit");

                entity.ToTable("ro_limit");

                entity.HasAnnotation("Relational:Comment", "Таблица ограничений");

                entity.HasIndex(e => e.LimitGuid, "sk_limit_guid")
                    .IsUnique();

                entity.HasIndex(e => e.LimitName, "sk_limit_name")
                    .IsUnique();

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Код");

                entity.Property(e => e.LimitGuid)
                    .HasColumnName("limit_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.LimitName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("limit_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Log>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log");

                entity.ToTable("ro_log");

                entity.HasAnnotation("Relational:Comment", "Таблица лога");

                entity.HasIndex(e => e.ApplicationId, "log_application_id_idx");

                entity.HasIndex(e => e.LogTime, "log_log_time_idx");

                entity.HasIndex(e => e.LogTypeId, "log_log_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.LogCode)
                    .HasColumnName("log_code")
                    .HasComment("Код");

                entity.Property(e => e.LogMessage)
                    .HasColumnType("character varying")
                    .HasColumnName("log_message")
                    .HasComment("Сообщение");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Logs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.Logs)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");
            });

            modelBuilder.Entity<LogExtended>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log_extended");

                entity.ToTable("ro_log_extended");

                entity.HasAnnotation("Relational:Comment", "Расширенная таблица логов");

                entity.HasIndex(e => e.EntityId, "log_extended_entity_id_idx");

                entity.HasIndex(e => e.LogTypeId, "ro_log_extended_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("ID таблицы");

                entity.Property(e => e.EntityId)
                    .HasColumnName("entity_id")
                    .HasComment("ID изменяемой сущности");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата операции");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип операции");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasComment("Логгируемая операция");

                entity.Property(e => e.TableName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("table_name")
                    .HasComment("Изменяемая таблица");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.LogExtendeds)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.LogExtendeds)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_log_extended_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.LogExtendeds)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_log_extended_user");
            });

            modelBuilder.Entity<LogExtendedDetail>(entity =>
            {
                entity.HasKey(e => e.LogDetailId)
                    .HasName("pk_log_extended_detail");

                entity.ToTable("ro_log_extended_detail");

                entity.Property(e => e.LogDetailId)
                    .HasColumnName("log_detail_id")
                    .HasComment("ID таблицы");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("field_name")
                    .HasComment("Наименование колонки изменяемой таблицы");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasComment("ID основного лога");

                entity.Property(e => e.NewBool)
                    .HasColumnName("new_bool")
                    .HasComment("Новое значение bool");

                entity.Property(e => e.NewDatetime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("new_datetime")
                    .HasComment("Новое значение datetime");

                entity.Property(e => e.NewInt)
                    .HasColumnName("new_int")
                    .HasComment("Новое значение int");

                entity.Property(e => e.NewString)
                    .HasColumnType("character varying")
                    .HasColumnName("new_string")
                    .HasComment("Новое значение string");

                entity.Property(e => e.OldBool)
                    .HasColumnName("old_bool")
                    .HasComment("Старое значение bool");

                entity.Property(e => e.OldDatetime)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("old_datetime")
                    .HasComment("Старое значение datetime");

                entity.Property(e => e.OldInt)
                    .HasColumnName("old_int")
                    .HasComment("Старое значение int");

                entity.Property(e => e.OldString)
                    .HasColumnType("character varying")
                    .HasColumnName("old_string")
                    .HasComment("Старое значение string");

                entity.HasOne(d => d.Log)
                    .WithMany(p => p.LogExtendedDetails)
                    .HasForeignKey(d => d.LogId)
                    .HasConstraintName("fk_ro_log_extended");
            });

            modelBuilder.Entity<LogExtendedOperationDesc>(entity =>
            {
                entity.HasKey(e => e.OperationId)
                    .HasName("ro_log_extended_operation_desc_pkey");

                entity.ToTable("ro_log_extended_operation_desc");

                entity.HasAnnotation("Relational:Comment", "Описание операций логирования");

                entity.Property(e => e.OperationId).HasColumnName("operation_id");

                entity.Property(e => e.OperationDescription)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("operation_description");
            });

            modelBuilder.Entity<LogType>(entity =>
            {
                entity.HasKey(e => e.LogTypeId)
                    .HasName("pk_log_type");

                entity.ToTable("ro_log_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов лога");

                entity.HasIndex(e => e.LogTypeName, "sk_log_type_name")
                    .IsUnique();

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasDefaultValueSql("nextval(('public.ro_log_type_log_type_id_seq'::text)::regclass)")
                    .HasComment("Код");

                entity.Property(e => e.LogTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("log_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<LogV2>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("pk_log_v2");

                entity.ToTable("ro_log_v2");

                entity.HasAnnotation("Relational:Comment", "Таблица лога");

                entity.HasIndex(e => e.ApplicationId, "log_v2_application_id_idx");

                entity.HasIndex(e => new { e.LogTime, e.ApplicationId }, "log_v2_log_time_application_id_idx");

                entity.HasIndex(e => e.LogTypeId, "log_v2_log_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AppInstance)
                    .HasMaxLength(50)
                    .HasColumnName("app_instance")
                    .HasComment("Имя хоста");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.LogCode)
                    .HasColumnName("log_code")
                    .HasComment("Код");

                entity.Property(e => e.LogMessage)
                    .HasColumnType("character varying")
                    .HasColumnName("log_message")
                    .HasComment("Сообщение");

                entity.Property(e => e.LogTime)
                    .HasPrecision(3)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.LogTypeId)
                    .HasColumnName("log_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.LogV2s)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.LogV2s)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_log_type");
            });

            modelBuilder.Entity<LogV222>(entity =>
            {
                entity.HasKey(e => e.LogId)
                    .HasName("ro_log_v2_22_pkey");

                entity.ToTable("ro_log_v2_22");

                entity.HasIndex(e => e.ApplicationId, "ro_log_v2_22_application_id_idx");

                entity.HasIndex(e => new { e.LogTime, e.ApplicationId }, "ro_log_v2_22_log_time_application_id_idx");

                entity.HasIndex(e => e.LogTypeId, "ro_log_v2_22_log_type_id_idx");

                entity.Property(e => e.LogId)
                    .HasColumnName("log_id")
                    .HasDefaultValueSql("uuid_generate_v4()");

                entity.Property(e => e.AppInstance)
                    .HasMaxLength(50)
                    .HasColumnName("app_instance");

                entity.Property(e => e.ApplicationId).HasColumnName("application_id");

                entity.Property(e => e.LogCode).HasColumnName("log_code");

                entity.Property(e => e.LogMessage)
                    .HasColumnType("character varying")
                    .HasColumnName("log_message");

                entity.Property(e => e.LogTime)
                    .HasPrecision(3)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.LogTypeId).HasColumnName("log_type_id");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.LogV222s)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("ro_log_v2_22_application_id_fkey");

                entity.HasOne(d => d.LogType)
                    .WithMany(p => p.LogV222s)
                    .HasForeignKey(d => d.LogTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_log_v2_22_log_type_id_fkey");
            });

            modelBuilder.Entity<LoginFailAttempt>(entity =>
            {
                entity.HasKey(e => e.FailAttemptId)
                    .HasName("ro_login_fail_attempts_pkey");

                entity.ToTable("ro_login_fail_attempts");

                entity.HasIndex(e => new { e.UserName, e.AttemptDate }, "idx_login_fail_attempts_user_name_attempt_date");

                entity.Property(e => e.FailAttemptId)
                    .HasColumnName("fail_attempt_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AttemptDate)
                    .HasPrecision(0)
                    .HasColumnName("attempt_date")
                    .HasComment("Время попытки логина");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("user_name")
                    .HasComment("Имя");
            });

            modelBuilder.Entity<MachineReadableProxyType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_type");

                entity.ToTable("ro_machine_readable_proxy_type");

                entity.Property(e => e.TypeId).HasColumnName("type_id");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("type_name");
            });

            modelBuilder.Entity<MemberReserveKey>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("pk_member_reserve_key");

                entity.ToTable("ro_member_reserve_key");

                entity.HasAnnotation("Relational:Comment", "Таблица резервных ключей сотрудников");

                entity.HasIndex(e => e.CaId, "member_reserve_key_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "member_reserve_key_cert_request_id_idx");

                entity.HasIndex(e => e.ProviderId, "member_reserve_key_provider_id_idx");

                entity.Property(e => e.MemberId)
                    .ValueGeneratedNever()
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Ссылка на УЦ");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(50)
                    .HasColumnName("container_name")
                    .HasComment("Контейнер");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.MemberReserveKeys)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertRequest)
                    .WithMany(p => p.MemberReserveKeys)
                    .HasForeignKey(d => d.CertRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_request");

                entity.HasOne(d => d.Member)
                    .WithOne(p => p.MemberReserveKey)
                    .HasForeignKey<MemberReserveKey>(d => d.MemberId)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.MemberReserveKeys)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_provider");
            });

            modelBuilder.Entity<Merchandise>(entity =>
            {
                entity.HasKey(e => e.MerchandiseId)
                    .HasName("pk_merchandise_id");

                entity.ToTable("ro_merchandise");

                entity.HasAnnotation("Relational:Comment", "Номенклатура");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.MaxCount)
                    .HasColumnName("max_count")
                    .HasComment("Максимальное количество компаний");

                entity.Property(e => e.MeasureUnitCode)
                    .HasColumnName("measure_unit_code")
                    .HasComment("Код единицы измерения");

                entity.Property(e => e.MerchandiseSid)
                    .HasColumnType("character varying")
                    .HasColumnName("merchandise_sid")
                    .HasComment("Ид в базе 1С");

                entity.Property(e => e.MerchandiseTypeId)
                    .HasColumnName("merchandise_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.MinCount)
                    .HasColumnName("min_count")
                    .HasComment("Минимальное количество компаний");

                entity.Property(e => e.NdsPercent)
                    .HasPrecision(15, 2)
                    .HasColumnName("nds_percent");

                entity.Property(e => e.OffTime).HasColumnName("off_time");

                entity.Property(e => e.Price)
                    .HasPrecision(15, 2)
                    .HasColumnName("price");

                entity.Property(e => e.Reward)
                    .HasColumnName("reward")
                    .HasComment("Размер вознаграждения");

                entity.Property(e => e.RewardOrdinary)
                    .HasPrecision(15, 2)
                    .HasColumnName("reward_ordinary")
                    .HasComment("Вознаграждение для обычного партнера");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.ScReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("sc_reward")
                    .HasComment("Вознаграждение для ЦП");

                entity.Property(e => e.ShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.UnitFullName)
                    .HasColumnType("character varying")
                    .HasColumnName("unit_full_name")
                    .HasComment("Полное наименование единицы измерения");

                entity.Property(e => e.UnitShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("unit_short_name")
                    .HasComment("Краткое наименование единицы измерения");

                entity.Property(e => e.Weight)
                    .HasPrecision(5, 3)
                    .HasColumnName("weight")
                    .HasComment("Вес(кг)");

                entity.HasOne(d => d.MerchandiseType)
                    .WithMany(p => p.Merchandises)
                    .HasForeignKey(d => d.MerchandiseTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_merchandise_merchandise_type_id");
            });

            modelBuilder.Entity<MerchandiseBill>(entity =>
            {
                entity.HasKey(e => e.MerchandiseBillId)
                    .HasName("pk_merchandise_bill");

                entity.ToTable("ro_merchandise_bill");

                entity.HasAnnotation("Relational:Comment", "Связь счетов и номенклатур");

                entity.Property(e => e.MerchandiseBillId).HasColumnName("merchandise_bill_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.Property(e => e.Price)
                    .HasPrecision(15, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(15, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.ScSumReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("sc_sum_reward")
                    .HasComment("Вознаграждение ЦП");

                entity.Property(e => e.SumReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Вознаграждение");

                entity.Property(e => e.TotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("total_sum");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.MerchandiseBills)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("gr");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.MerchandiseBills)
                    .HasForeignKey(d => d.MerchandiseId)
                    .HasConstraintName("fk_merchandise");
            });

            modelBuilder.Entity<MerchandiseGroup>(entity =>
            {
                entity.HasKey(e => e.GroupId)
                    .HasName("pk_group_id");

                entity.ToTable("ro_merchandise_group");

                entity.Property(e => e.GroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("group_id");

                entity.Property(e => e.GroupCid)
                    .HasColumnType("character varying")
                    .HasColumnName("group_cid")
                    .HasComment("Ид группы в 1С");

                entity.Property(e => e.GroupName)
                    .HasColumnType("character varying")
                    .HasColumnName("group_name")
                    .HasComment("Имя группы товаров");

                entity.Property(e => e.MerchandiseGroupTypeId)
                    .HasColumnName("merchandise_group_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Родительская группа");

                entity.HasOne(d => d.MerchandiseGroupType)
                    .WithMany(p => p.MerchandiseGroups)
                    .HasForeignKey(d => d.MerchandiseGroupTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_merchandise_group_type_id");
            });

            modelBuilder.Entity<MerchandiseGroupItem>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_merchandise_group_items");

                entity.HasAnnotation("Relational:Comment", "Членство расширений в группах");

                entity.HasIndex(e => new { e.GroupId, e.MerchandiseId, e.IsRequired }, "ro_merchandise_group_items_group_id_merchandise_id_is_requi_key")
                    .IsUnique();

                entity.Property(e => e.GroupId)
                    .HasColumnName("group_id")
                    .HasComment("Id группы");

                entity.Property(e => e.IsRequired)
                    .HasColumnName("is_required")
                    .HasComment("Обязательное расширение");

                entity.Property(e => e.MerchandiseId)
                    .HasColumnName("merchandise_id")
                    .HasComment("Id расширения");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.GroupId)
                //    .OnDelete(DeleteBehavior.Cascade)
                //    .HasConstraintName("ro_merchandise_group_items_group_id_fkey");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.MerchandiseId)
                //    .OnDelete(DeleteBehavior.Cascade)
                //    .HasConstraintName("ro_merchandise_group_items_merchandise_id_fkey");
            });

            modelBuilder.Entity<MerchandiseGroupType>(entity =>
            {
                entity.HasKey(e => e.MerchandiseGroupTypeId)
                    .HasName("ro_merchandise_group_type_pkey");

                entity.ToTable("ro_merchandise_group_type");

                entity.Property(e => e.MerchandiseGroupTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("merchandise_group_type_id")
                    .HasComment("Ид");

                entity.Property(e => e.MerchandiseGroupTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("merchandise_group_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<MerchandiseType>(entity =>
            {
                entity.HasKey(e => e.MerchandiseTypeId)
                    .HasName("ro_merchandise_type_pkey");

                entity.ToTable("ro_merchandise_type");

                entity.Property(e => e.MerchandiseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("merchandise_type_id")
                    .HasComment("Ид");

                entity.Property(e => e.MerchandiseTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("merchandise_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<MercuryMessenger>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.MessengerId })
                    .HasName("pk_mercury_messenger");

                entity.ToTable("ro_mercury_messenger");

                entity.HasAnnotation("Relational:Comment", "Таблица курьеров АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_messenger_mercury_id_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_messenger_messenger_id_idx");

                entity.HasIndex(e => e.OperatorIrucId, "mercury_messenger_operator_iruc_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_messenger_step_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.AccountIn)
                    .HasMaxLength(50)
                    .HasColumnName("account_in")
                    .HasComment("Логин входящий");

                entity.Property(e => e.AccountOut)
                    .HasMaxLength(50)
                    .HasColumnName("account_out")
                    .HasComment("Логин исходящий");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.IrucAccount)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_account")
                    .HasComment("Логин в ИРУЦ");

                entity.Property(e => e.IrucPassword)
                    .HasMaxLength(50)
                    .HasColumnName("iruc_password")
                    .HasComment("Пароль в ИРУЦ");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата оключения");

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Оператор ИРУЦ");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.PasswordIn)
                    .HasMaxLength(50)
                    .HasColumnName("password_in")
                    .HasComment("Пароль входящий");

                entity.Property(e => e.PasswordOut)
                    .HasMaxLength(50)
                    .HasColumnName("password_out")
                    .HasComment("Пароль исходящий");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояния");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryMessengers)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MercuryMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.OperatorIruc)
                    .WithMany(p => p.MercuryMessengers)
                    .HasForeignKey(d => d.OperatorIrucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_operator_iruc");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.MercuryMessengers)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<MercuryMessengerStep>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.MessengerId, e.StepId, e.LogTime })
                    .HasName("pk_mercury_messenger_step");

                entity.ToTable("ro_mercury_messenger_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний курьеров АстралОтчет");

                entity.HasIndex(e => e.FileId, "mercury_messenger_step_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_messenger_step_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.MessengerId }, "mercury_messenger_step_mercury_messenger_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_messenger_step_messenger_id_idx");

                entity.HasIndex(e => e.NextStepId, "mercury_messenger_step_next_step_id_idx");

                entity.HasIndex(e => e.PreviousStepId, "mercury_messenger_step_previous_step_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_messenger_step_step_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ErrorMsg)
                    .HasColumnType("character varying")
                    .HasColumnName("error_msg")
                    .HasComment("Ошибка");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.PreviousStepId)
                    .HasColumnName("previous_step_id")
                    .HasComment("Предыдущие состояние");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.MercuryMessengerSteps)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryMessengerSteps)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MercuryMessengerSteps)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.MercuryMessengerStepNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.PreviousStep)
                    .WithMany(p => p.MercuryMessengerStepPreviousSteps)
                    .HasForeignKey(d => d.PreviousStepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_previous_step");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.MercuryMessengerStepSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Me)
                    .WithMany(p => p.MercuryMessengerSteps)
                    .HasForeignKey(d => new { d.MercuryId, d.MessengerId })
                    .HasConstraintName("fk_mercury_messenger");
            });

            modelBuilder.Entity<MercuryPlugin>(entity =>
            {
                entity.HasKey(e => e.MercuryPluginId)
                    .HasName("pk_mercury_plugin");

                entity.ToTable("ro_mercury_plugin");

                entity.HasAnnotation("Relational:Comment", "Таблица плагинов АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_plugin_mercury_id_idx");

                entity.HasIndex(e => e.PluginId, "mercury_plugin_plugin_id_idx");

                entity.HasIndex(e => new { e.TariffId, e.PluginId }, "mercury_plugin_tariff_id_plugin_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.PluginId }, "sk_mercury_plugin")
                    .IsUnique();

                entity.Property(e => e.MercuryPluginId)
                    .HasColumnName("mercury_plugin_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.PluginId)
                    .HasColumnName("plugin_id")
                    .HasComment("Плагин");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryPlugins)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.MercuryPlugins)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.PluginTariff)
                    .WithMany(p => p.MercuryPlugins)
                    .HasForeignKey(d => new { d.TariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<MercuryRecipient>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.RecipientId })
                    .HasName("pk_mercury_recipient");

                entity.ToTable("ro_mercury_recipient");

                entity.HasAnnotation("Relational:Comment", "Таблица получателей АстралОтчет");

                entity.HasIndex(e => e.FileId, "mercury_recipient_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_recipient_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.MessengerId }, "mercury_recipient_mercury_messenger_idx");

                entity.HasIndex(e => e.MessengerId, "mercury_recipient_messenger_id_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_recipient_recipient_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер участка");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Me)
                    .WithMany(p => p.MercuryRecipients)
                    .HasForeignKey(d => new { d.MercuryId, d.MessengerId })
                    .HasConstraintName("fk_mercury_messenger");
            });

            modelBuilder.Entity<MercuryRecipientStep>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.MercuryId, e.StepId, e.LogTime })
                    .HasName("pk_mercury_recipient_step");

                entity.ToTable("ro_mercury_recipient_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний получателей продуктов");

                entity.HasIndex(e => e.FileId, "mercury_recipient_step_file_id_idx");

                entity.HasIndex(e => e.MercuryId, "mercury_recipient_step_mercury_id_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_recipient_step_recipient_id_idx");

                entity.HasIndex(e => new { e.RecipientId, e.MercuryId }, "mercury_recipient_step_recipient_id_mercury_id_idx");

                entity.HasIndex(e => e.StepId, "mercury_recipient_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "mercury_recipient_step_user_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryRecipientSteps)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.MercuryRecipientSteps)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.MercuryRecipientSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MercuryRecipientSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<MercuryRecipientView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_mercury_recipient_view");

                entity.Property(e => e.Id).HasColumnName("id");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code");
            });

            modelBuilder.Entity<MercuryRoute>(entity =>
            {
                entity.HasKey(e => new { e.MercuryId, e.RecipientId, e.Kpp })
                    .HasName("pk_mercury_route");

                entity.ToTable("ro_mercury_route");

                entity.HasAnnotation("Relational:Comment", "Таблица маршрутов АстралОтчет");

                entity.HasIndex(e => e.MercuryId, "mercury_route_mercury_id_idx");

                entity.HasIndex(e => new { e.MercuryId, e.RecipientId }, "mercury_route_mercury_recipient_idx");

                entity.HasIndex(e => e.RecipientId, "mercury_route_recipient_id_idx");

                entity.Property(e => e.MercuryId)
                    .HasColumnName("mercury_id")
                    .HasComment("АстралОтчет");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .IsFixedLength()
                    .HasComment("КПП");

                entity.HasOne(d => d.Mercury)
                    .WithMany(p => p.MercuryRoutes)
                    .HasForeignKey(d => d.MercuryId)
                    .HasConstraintName("fk_mercury");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.MercuryRoutes)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.MercuryRecipient)
                    .WithMany(p => p.MercuryRoutes)
                    .HasForeignKey(d => new { d.MercuryId, d.RecipientId })
                    .HasConstraintName("fk_mercury_recipient");
            });

            modelBuilder.Entity<Messenger>(entity =>
            {
                entity.HasKey(e => e.MessengerId)
                    .HasName("pk_messenger");

                entity.ToTable("ro_messenger");

                entity.HasAnnotation("Relational:Comment", "Таблица курьеров");

                entity.HasIndex(e => e.DomainSoed, "domain_soed");

                entity.HasIndex(e => e.CertificateId, "messenger_certificate_id_idx");

                entity.HasIndex(e => e.MessengerUpdaterId, "messenger_messenger_updater_id_idx");

                entity.HasIndex(e => e.PfrProviderId, "messenger_pfr_provider_id_idx");

                entity.HasIndex(e => e.ServerId, "messenger_server_id_idx");

                entity.HasIndex(e => e.SosId, "messenger_sos_id_idx");

                entity.HasIndex(e => e.Suid, "messenger_suid_idx");

                entity.HasIndex(e => e.ProtocolId, "protocol");

                entity.HasIndex(e => e.MessengerGuid, "sk_messenger_guid")
                    .IsUnique();

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.MessengerCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("messenger_code")
                    .HasComment("Код");

                entity.Property(e => e.MessengerGuid)
                    .HasColumnName("messenger_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД");

                entity.Property(e => e.MessengerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("messenger_name")
                    .HasComment("Наименование");

                entity.Property(e => e.MessengerUpdaterId)
                    .HasColumnName("messenger_updater_id")
                    .HasComment("Обновление");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Провайдер ПФР");

                entity.Property(e => e.PortIn)
                    .HasColumnName("port_in")
                    .HasDefaultValueSql("80")
                    .HasComment("Входящий порт");

                entity.Property(e => e.PortOut)
                    .HasColumnName("port_out")
                    .HasDefaultValueSql("80")
                    .HasComment("Исходящий порт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RegPfr)
                    .HasColumnName("reg_pfr")
                    .HasComment("Регистрация в ПФР");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.Property(e => e.SinglePacket)
                    .HasColumnName("single_packet")
                    .HasComment("Пакет только по одному направлению");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.Suid)
                    .HasMaxLength(9)
                    .HasColumnName("suid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.WaitReply)
                    .HasColumnName("wait_reply")
                    .HasComment("Ожидать ответ");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.MessengerUpdater)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.MessengerUpdaterId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_messenger_updater");

                entity.HasOne(d => d.PfrProvider)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.PfrProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_pfr_provider");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");

                entity.HasOne(d => d.Su)
                    .WithMany(p => p.Messengers)
                    .HasForeignKey(d => d.Suid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_suid");
            });

            modelBuilder.Entity<MessengerCertificate>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.CertificateId })
                    .HasName("pk_messenger_certificate");

                entity.ToTable("ro_messenger_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов курьеров");

                entity.HasIndex(e => e.CertificateId, "messenger_certificate_certificate_id_idx");

                entity.HasIndex(e => e.MessengerId, "messenger_certificate_messenger_id_idx");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.MessengerCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MessengerCertificates)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<MessengerRecipient>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.RecipientId })
                    .HasName("pk_messenger_recipient");

                entity.ToTable("ro_messenger_recipient");

                entity.HasAnnotation("Relational:Comment", "Таблица связи курьеров с получателями");

                entity.HasIndex(e => e.MessengerId, "messenger_recipient_messenger_id_idx");

                entity.HasIndex(e => e.RecipientId, "messenger_recipient_recipient_id_idx");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Default)
                    .HasColumnName("default")
                    .HasComment("Курьер по умолчанию");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MessengerRecipients)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.MessengerRecipients)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<MessengerSuffix>(entity =>
            {
                entity.HasKey(e => new { e.MessengerId, e.Suffix })
                    .HasName("pk_messenger_suffix");

                entity.ToTable("ro_messenger_suffix");

                entity.HasAnnotation("Relational:Comment", "Суффиксы курьеров");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.Suffix)
                    .HasMaxLength(7)
                    .HasColumnName("suffix")
                    .HasComment("Суффикс");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MessengerSuffixes)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");
            });

            modelBuilder.Entity<MessengerUpdater>(entity =>
            {
                entity.HasKey(e => e.MessengerUpdaterId)
                    .HasName("pk_messenger_updater");

                entity.ToTable("ro_messenger_updater");

                entity.HasAnnotation("Relational:Comment", "Таблица обновления курьеров");

                entity.HasIndex(e => e.CertId, "messenger_updater_cert_id_idx");

                entity.HasIndex(e => e.MessengerId, "messenger_updater_messenger_id_idx");

                entity.HasIndex(e => e.OfficeId, "messenger_updater_office_id_idx");

                entity.HasIndex(e => e.PfrProviderId, "messenger_updater_pfr_provider_id_idx");

                entity.HasIndex(e => e.ProtocolId, "messenger_updater_protocol_id_idx");

                entity.HasIndex(e => e.ServerId, "messenger_updater_server_id_idx");

                entity.HasIndex(e => e.SosId, "messenger_updater_sos_id_idx");

                entity.HasIndex(e => e.Suid, "messenger_updater_suid_idx");

                entity.HasIndex(e => e.UserId, "messenger_updater_user_id_idx");

                entity.Property(e => e.MessengerUpdaterId)
                    .HasColumnName("messenger_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplyDate)
                    .HasPrecision(0)
                    .HasColumnName("apply_date")
                    .HasComment("Дата применения");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasComment("Дата подтверждения");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainSoed)
                    .HasMaxLength(100)
                    .HasColumnName("domain_soed")
                    .HasComment("Домен СОЭД");

                entity.Property(e => e.MessengerCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("messenger_code")
                    .HasComment("Код");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.MessengerName)
                    .HasMaxLength(100)
                    .HasColumnName("messenger_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Провайдер ПФР");

                entity.Property(e => e.PortIn)
                    .HasColumnName("port_in")
                    .HasDefaultValueSql("80")
                    .HasComment("Входящий порт");

                entity.Property(e => e.PortOut)
                    .HasColumnName("port_out")
                    .HasDefaultValueSql("80")
                    .HasComment("Исходящий порт");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RegPfr)
                    .HasColumnName("reg_pfr")
                    .HasComment("Регистрация в ПФР");

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Сервер");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.Suid)
                    .HasMaxLength(9)
                    .HasColumnName("suid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WaitReply)
                    .HasColumnName("wait_reply")
                    .HasComment("Ожидать ответ");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PfrProvider)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.PfrProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_pfr_provider");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Server)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.ServerId)
                    .HasConstraintName("fk_server");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");

                entity.HasOne(d => d.Su)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.Suid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_suid");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.MessengerUpdaters)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.HasKey(e => e.ModuleId)
                    .HasName("pk_module");

                entity.ToTable("ro_module");

                entity.HasAnnotation("Relational:Comment", "Таблица модулей");

                entity.HasIndex(e => e.ProductTypeId, "module_product_type_id_idx");

                entity.HasIndex(e => e.TypeId, "module_type_id_idx");

                entity.HasIndex(e => e.MuduleName, "sk_module_name")
                    .IsUnique();

                entity.Property(e => e.ModuleId)
                    .ValueGeneratedNever()
                    .HasColumnName("module_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MuduleName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("mudule_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<ModuleTariff>(entity =>
            {
                entity.HasKey(e => e.ModuleTariffId)
                    .HasName("pk_module_tariff");

                entity.ToTable("ro_module_tariff");

                entity.HasAnnotation("Relational:Comment", "Тарифы для модуля");

                entity.HasIndex(e => e.ModuleId, "module_tariff_module_id_idx");

                entity.HasIndex(e => e.TariffId, "module_tariff_tariff_id_idx");

                entity.HasIndex(e => new { e.ModuleId, e.TariffId }, "sk_module_tariff")
                    .IsUnique();

                entity.Property(e => e.ModuleTariffId)
                    .HasColumnName("module_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasComment("Модуль");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.ModuleTariffs)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("fk_module");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.ModuleTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");
            });

            modelBuilder.Entity<ModuleType>(entity =>
            {
                entity.HasKey(e => e.ModuleTypeId)
                    .HasName("pk_module_type");

                entity.ToTable("ro_module_type");

                entity.HasAnnotation("Relational:Comment", "Тип модуля");

                entity.Property(e => e.ModuleTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("module_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ModuleTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("module_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<MonitoringView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_monitoring_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AbonentTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("abonent_type_name");

                entity.Property(e => e.CodeName)
                    .HasMaxLength(10)
                    .HasColumnName("code_name");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.DateFixed).HasColumnName("date_fixed");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.Fax)
                    .HasMaxLength(24)
                    .HasColumnName("fax");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.HardCodeSos).HasColumnName("hard_code_sos");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeGuid).HasColumnName("office_guid");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn");

                entity.Property(e => e.OkopfId).HasColumnName("okopf_id");

                entity.Property(e => e.PfrSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_sender");

                entity.Property(e => e.PfrSystemSender)
                    .HasMaxLength(40)
                    .HasColumnName("pfr_system_sender");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductTypeGuid).HasColumnName("product_type_guid");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength();

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TimeLimit).HasColumnName("time_limit");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");
            });

            modelBuilder.Entity<News>(entity =>
            {
                entity.HasKey(e => e.NewsId)
                    .HasName("pk_news");

                entity.ToTable("ro_news");

                entity.HasAnnotation("Relational:Comment", "Таблица новостей");

                entity.HasIndex(e => e.ImageId, "news_image_id_idx");

                entity.HasIndex(e => e.Topic, "news_topic_idx");

                entity.HasIndex(e => e.UserId, "news_user_id_idx");

                entity.HasIndex(e => e.VisibilityTypeId, "news_visibility_type_id_idx");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Content)
                    .HasColumnType("character varying")
                    .HasColumnName("content")
                    .HasComment("Содержание");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ImageId)
                    .HasColumnName("image_id")
                    .HasComment("Изображение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата удаления");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Узел родитель");

                entity.Property(e => e.ShowReview)
                    .HasColumnName("show_review")
                    .HasComment("Отображать поле ввода отзыва");

                entity.Property(e => e.Summary)
                    .HasColumnType("character varying")
                    .HasColumnName("summary")
                    .HasComment("Описание");

                entity.Property(e => e.Topic)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("topic")
                    .HasComment("Тема");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.VisibilityTypeId)
                    .HasColumnName("visibility_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип видимости");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.InverseParent)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_news_fk");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.News)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.VisibilityType)
                    .WithMany(p => p.News)
                    .HasForeignKey(d => d.VisibilityTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_visibility_type");

                entity.HasMany(d => d.Tags)
                    .WithMany(p => p.News)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoNewsTag",
                        l => l.HasOne<Tag>().WithMany().HasForeignKey("TagId").HasConstraintName("fk_tag"),
                        r => r.HasOne<News>().WithMany().HasForeignKey("NewsId").HasConstraintName("fk_news"),
                        j =>
                        {
                            j.HasKey("NewsId", "TagId").HasName("pk_news_tag");

                            j.ToTable("ro_news_tag").HasAnnotation("Relational:Comment", "Таблица тегов новостей");

                            j.HasIndex(new[] { "NewsId" }, "news_tag_news_id_idx");

                            j.HasIndex(new[] { "TagId" }, "news_tag_tag_id_idx");

                            j.IndexerProperty<int>("NewsId").HasColumnName("news_id").HasComment("Новость");

                            j.IndexerProperty<int>("TagId").HasColumnName("tag_id").HasComment("Тег");
                        });
            });

            modelBuilder.Entity<NewsBrowsing>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.NewsId })
                    .HasName("pk_news_browsing_user_id_news_id");

                entity.ToTable("ro_news_browsing");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.BrowseTime)
                    .HasColumnName("browse_time")
                    .HasComment("Время просмотра");

                entity.Property(e => e.LikeTime)
                    .HasColumnName("like_time")
                    .HasComment("Время установки флага like");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsBrowsings)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_browsing_news_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NewsBrowsings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_ro_news_browsing_user_id");
            });

            modelBuilder.Entity<NewsFile>(entity =>
            {
                entity.HasKey(e => new { e.NewsId, e.FileId })
                    .HasName("pk_ro_news_file_news_id_file_id");

                entity.ToTable("ro_news_file");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsFiles)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_file_new_id");
            });

            modelBuilder.Entity<NewsLastVisit>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_news_last_visit");

                entity.HasIndex(e => e.UserId, "ro_news_last_visit_user_id_key")
                    .IsUnique();

                entity.Property(e => e.LastVisitDate)
                    .HasPrecision(0)
                    .HasColumnName("last_visit_date")
                    .HasComment("Дата последнего посещения вкладки новостей");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");
            });

            modelBuilder.Entity<NewsReview>(entity =>
            {
                entity.HasKey(e => e.NewsReviewId)
                    .HasName("ro_news_review_pkey");

                entity.ToTable("ro_news_reviews");

                entity.HasAnnotation("Relational:Comment", "Таблица с отзывами к новостям");

                entity.Property(e => e.NewsReviewId)
                    .HasColumnName("news_review_id")
                    .HasDefaultValueSql("nextval('ro_news_reviews_news_review_id_seq1'::regclass)")
                    .HasComment("идентификатор отзыва новости");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("новость");

                entity.Property(e => e.ReviewText)
                    .HasColumnType("character varying")
                    .HasColumnName("review_text")
                    .HasComment("текст отзыва");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("пользователь");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsReviews)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_news");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.NewsReviews)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_news_user");
            });

            modelBuilder.Entity<NewsSetting>(entity =>
            {
                entity.HasKey(e => new { e.SettingId, e.NewsId })
                    .HasName("pk_ro_news_setting_news_id_setting_id");

                entity.ToTable("ro_news_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек новости");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsSettings)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_ro_news_setting_news_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.NewsSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_ro_news_setting_setting_id");
            });

            modelBuilder.Entity<NewsVisibility>(entity =>
            {
                entity.HasKey(e => e.NewsVisibilityId)
                    .HasName("pk_news_visibility");

                entity.ToTable("ro_news_visibility");

                entity.HasAnnotation("Relational:Comment", "Таблица видимости для новостей");

                entity.HasIndex(e => e.AgentId, "news_visibility_agent_id_idx");

                entity.HasIndex(e => e.NewsId, "news_visibility_new_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "news_visibility_product_type_id_idx");

                entity.HasIndex(e => e.RegionId, "news_visibility_region_id_idx");

                entity.HasIndex(e => e.leId, "news_visibility_role_id_idx");

                entity.HasIndex(e => new { e.NewsId, e.AgentId }, "sk_news_visibility_agent")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.ProductTypeId }, "sk_news_visibility_product_type")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.RegionId }, "sk_news_visibility_region")
                    .IsUnique();

                entity.HasIndex(e => new { e.NewsId, e.leId }, "sk_news_visibility_role")
                    .IsUnique();

                entity.Property(e => e.NewsVisibilityId)
                    .HasColumnName("news_visibility_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AgentLevelId)
                    .HasColumnName("agent_level_id")
                    .HasComment("Уровень агента");

                entity.Property(e => e.NewsId)
                    .HasColumnName("news_id")
                    .HasComment("Новость");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.leId)
                    .HasColumnName("RoleId")
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.AgentLevel)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.AgentLevelId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_news_visibility_agent_level_id");

                entity.HasOne(d => d.News)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.NewsId)
                    .HasConstraintName("fk_news");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.le)
                    .WithMany(p => p.NewsVisibilities)
                    .HasForeignKey(d => d.leId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<NotificationTemplate>(entity =>
            {
                entity.HasKey(e => e.Guid)
                    .HasName("pk_notification_template");

                entity.ToTable("ro_notification_template");

                entity.HasIndex(e => e.FileId, "notification_template_file_id_idx");

                entity.HasIndex(e => e.ProductId, "notification_template_product_id_idx");

                entity.HasIndex(e => e.StateId, "notification_template_state_id_idx");

                entity.Property(e => e.Guid)
                    .ValueGeneratedNever()
                    .HasColumnName("guid")
                    .HasComment("Гуид шаблона");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл результатов выборки");

                entity.Property(e => e.Mail)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("mail")
                    .HasComment("Почта");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Имя шаблона");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Абонент");

                entity.Property(e => e.Query)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("query")
                    .HasComment("Запрос на выборку");

                entity.Property(e => e.StateId)
                    .HasColumnName("state_id")
                    .HasComment("Статус");

                entity.Property(e => e.Trigger)
                    .HasColumnName("trigger")
                    .HasComment("Время исполнения");

                entity.Property(e => e.TriggerTime)
                    .HasPrecision(0)
                    .HasColumnName("trigger_time")
                    .HasComment("Ближайшее время срабатывания");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Время обновления результата");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.State)
                    .WithMany(p => p.NotificationTemplates)
                    .HasForeignKey(d => d.StateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_state");
            });

            modelBuilder.Entity<NotificationTemplateRequest>(entity =>
            {
                entity.ToTable("ro_notification_template_request");

                entity.HasAnnotation("Relational:Comment", "Запросы шаблонов уведомлений");

                entity.HasIndex(e => e.FileId, "notification_template_request_file_id_idx");

                entity.HasIndex(e => e.ProductId, "notification_template_request_product_id_idx");

                entity.HasIndex(e => e.TypeId, "notification_template_request_type_id_idx");

                entity.Property(e => e.Id)
                    .HasColumnName("id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время приема запроса");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Окончание действия шаблона");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл запроса");

                entity.Property(e => e.Guid)
                    .HasColumnName("guid")
                    .HasComment("Гуид шаблона");

                entity.Property(e => e.Mail)
                    .HasColumnType("character varying")
                    .HasColumnName("mail")
                    .HasComment("Почта");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Имя шаблона");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.Query)
                    .HasColumnType("character varying")
                    .HasColumnName("query")
                    .HasComment("Запрос на выборку");

                entity.Property(e => e.Trigger)
                    .HasColumnName("trigger")
                    .HasComment("Временной триггер");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип запроса");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.NotificationTemplateRequests)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.NotificationTemplateRequests)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<NotificationTemplateRequestType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("pk_notification_template_request_type");

                entity.ToTable("ro_notification_template_request_type");

                entity.HasAnnotation("Relational:Comment", "Типы запросов шаблонов уведомлений");

                entity.Property(e => e.TypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("type_id")
                    .HasComment("Тип запроса шаблона");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<NotificationTemplateState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("pk_notification_template_state");

                entity.ToTable("ro_notification_template_state");

                entity.HasAnnotation("Relational:Comment", "Состояния шаблонов уведомлений");

                entity.Property(e => e.StateId)
                    .ValueGeneratedNever()
                    .HasColumnName("state_id")
                    .HasComment("Идентификатор состояния");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<Number>(entity =>
            {
                entity.HasKey(e => e.NumberId)
                    .HasName("ro_number_pkey");

                entity.ToTable("ro_number");

                entity.HasAnnotation("Relational:Comment", "Таблица номеров счетов");

                entity.HasIndex(e => e.Prefix, "ro_number_un")
                    .IsUnique();

                entity.Property(e => e.NumberId).HasColumnName("number_id");

                entity.Property(e => e.NumberValue)
                    .HasColumnName("number_value")
                    .HasDefaultValueSql("1")
                    .HasComment("Номер");

                entity.Property(e => e.Prefix)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("prefix");
            });

            modelBuilder.Entity<Object>(entity =>
            {
                entity.HasKey(e => e.ObjectId)
                    .HasName("pk_object");

                entity.ToTable("ro_object");

                entity.HasAnnotation("Relational:Comment", "Таблица объектов");

                entity.HasIndex(e => e.ValueTypeId, "object_object_type_id_idx");

                entity.HasIndex(e => e.ValueTypeId, "object_value_type_id_idx");

                entity.HasIndex(e => new { e.ObjectTypeId, e.ObjectValue, e.ValueTypeId }, "sk_object")
                    .IsUnique();

                entity.Property(e => e.ObjectId)
                    .HasColumnName("object_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ObjectName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("object_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ObjectTypeId)
                    .HasColumnName("object_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ObjectValue)
                    .IsRequired()
                    .HasMaxLength(36)
                    .HasColumnName("object_value")
                    .HasComment("Значение");

                entity.Property(e => e.ValueTypeId)
                    .HasColumnName("value_type_id")
                    .HasComment("Тип значения");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.Objects)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_object_type");

                entity.HasOne(d => d.ValueType)
                    .WithMany(p => p.Objects)
                    .HasForeignKey(d => d.ValueTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_value_type");
            });

            modelBuilder.Entity<ObjectType>(entity =>
            {
                entity.HasKey(e => e.ObjectTypeId)
                    .HasName("pk_object_type");

                entity.ToTable("ro_object_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов объектов");

                entity.HasIndex(e => e.ObjectTypeName, "sk_object_type")
                    .IsUnique();

                entity.Property(e => e.ObjectTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("object_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ObjectTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("object_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<OfdDevice>(entity =>
            {
                entity.HasKey(e => e.OfdDeviceId)
                    .HasName("ro_ofd_device_pkey");

                entity.ToTable("ro_ofd_device");

                entity.HasAnnotation("Relational:Comment", "Данные по аппаратуре ОФД");

                entity.HasIndex(e => e.AgentId, "ro_ofd_device_agent_id_idx");

                entity.HasIndex(e => e.AstralKktId, "ro_ofd_device_astral_kkt_id_idx");

                entity.HasIndex(e => e.OfdDeviceTypeId, "ro_ofd_device_ofd_device_type_id_idx");

                entity.HasIndex(e => e.ParentId, "ro_ofd_device_parent_id_idx");

                entity.HasIndex(e => e.UserId, "ro_ofd_device_user_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "ro_ofd_device_validaty_unit_id_idx");

                entity.Property(e => e.OfdDeviceId)
                    .HasColumnName("ofd_device_id")
                    .HasComment("Идентификатор аппаратуры ОФД");

                entity.Property(e => e.AgentDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("agent_date")
                    .HasComment("Дата получения партнером");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Идентификатор партнера");

                entity.Property(e => e.AstralKktDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("astral_kkt_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.AstralKktId)
                    .HasColumnName("astral_kkt_id")
                    .HasComment("Идентификатор Астрал-ККТ");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.LastChangeDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("last_change_date")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.OfdDeviceTypeId)
                    .HasColumnName("ofd_device_type_id")
                    .HasComment("Тип аппаратуры");

                entity.Property(e => e.ParentDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("parent_date")
                    .HasComment("Дата получения центром продаж");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("Идентификатор центра продаж");

                entity.Property(e => e.SerialNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("serial_number")
                    .HasComment("Заводской номер");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.Property(e => e.ValidityLength)
                    .HasColumnName("validity_length")
                    .HasComment("Продолжительность периода действия кода активации");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения периода действия кода активации");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.OfdDeviceAgents)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_agent_id");

                entity.HasOne(d => d.AstralKkt)
                    .WithMany(p => p.OfdDeviceAstralKkts)
                    .HasForeignKey(d => d.AstralKktId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_astral_kkt_id");

                entity.HasOne(d => d.OfdDeviceType)
                    .WithMany(p => p.OfdDevices)
                    .HasForeignKey(d => d.OfdDeviceTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_ofd_device_type_id");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.OfdDeviceParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_parent_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OfdDevices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_user_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.OfdDevices)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_device_validity_unit_id");
            });

            modelBuilder.Entity<OfdDeviceType>(entity =>
            {
                entity.HasKey(e => e.OfdDeviceTypeId)
                    .HasName("ro_ofd_device_type_pkey");

                entity.ToTable("ro_ofd_device_type");

                entity.Property(e => e.OfdDeviceTypeId).HasColumnName("ofd_device_type_id");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(250)
                    .HasColumnName("short_name");
            });

            modelBuilder.Entity<OfdDiscount>(entity =>
            {
                entity.HasKey(e => e.OfdDiscountId)
                    .HasName("ro_ofd_discount_pkey");

                entity.ToTable("ro_ofd_discount");

                entity.HasIndex(e => e.CommentId, "idx_ro_ofd_discount_comment_id");

                entity.HasIndex(e => e.DiscountId, "idx_ro_ofd_discount_discount_id");

                entity.Property(e => e.OfdDiscountId)
                    .HasColumnName("ofd_discount_id")
                    .HasComment("Ид.");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Ид. коментария");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.UseLimit)
                    .HasColumnName("use_limit")
                    .HasComment("Лимит использования");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.OfdDiscounts)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_discount_comment_id");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.OfdDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_ro_ofd_discount_discount_id");
            });

            modelBuilder.Entity<OfdPin>(entity =>
            {
                entity.HasKey(e => e.PinId)
                    .HasName("ro_ofd_pin_pkey");

                entity.ToTable("ro_ofd_pin");

                entity.HasIndex(e => e.AgentId, "idx_ofd_pin_agent_id");

                entity.HasIndex(e => e.Inn, "idx_ofd_pin_inn");

                entity.HasIndex(e => e.ParentId, "idx_ofd_pin_parent_id");

                entity.HasIndex(e => e.PinFull, "idx_ofd_pin_pin_full")
                    .IsUnique();

                entity.HasIndex(e => new { e.PrefixId, e.Pin }, "idx_ofd_pin_prefix_id_pin")
                    .IsUnique();

                entity.HasIndex(e => e.BillId, "idx_ro_ofd_pin_bill_id");

                entity.HasIndex(e => e.ContractTariffId, "idx_ro_ofd_pin_contract_tariff_id");

                entity.HasIndex(e => e.Pin, "idx_ro_ofd_pin_pin");

                entity.HasIndex(e => e.OfdDeviceId, "ro_ofd_pin_ofd_device_id_idx");

                entity.Property(e => e.PinId)
                    .HasColumnName("pin_id")
                    .HasComment("Ид.");

                entity.Property(e => e.ActivationTime)
                    .HasPrecision(0)
                    .HasColumnName("activation_time")
                    .HasComment("Время активации");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Партнёр");

                entity.Property(e => e.AgentPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_price")
                    .HasComment("Цена для партнёра");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Номенклатура");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Счёт");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Комментарий");

                entity.Property(e => e.ConfigJson)
                    .HasColumnType("character varying")
                    .HasColumnName("config_json")
                    .HasComment("Настройки");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.CreationTime)
                    .HasColumnName("creation_time")
                    .HasComment("Время создания");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsPrivate)
                    .IsRequired()
                    .HasColumnName("is_private")
                    .HasDefaultValueSql("true")
                    .HasComment("Доступность кода активации");

                entity.Property(e => e.OfdDeviceId).HasColumnName("ofd_device_id");

                entity.Property(e => e.OfdDiscountId)
                    .HasColumnName("ofd_discount_id")
                    .HasComment("Ид. скидки");

                entity.Property(e => e.OfdPinTypeId)
                    .HasColumnName("ofd_pin_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип пин кода");

                entity.Property(e => e.ParentId)
                    .HasColumnName("parent_id")
                    .HasComment("ЦП");

                entity.Property(e => e.Pin)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("pin")
                    .HasComment("Пин");

                entity.Property(e => e.PinFull)
                    .HasMaxLength(100)
                    .HasColumnName("pin_full")
                    .HasComment("Полное значение пин-кода");

                entity.Property(e => e.PinTemplateId)
                    .HasColumnName("pin_template_id")
                    .HasComment("Ид шаблона");

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Префикс");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия тарифа");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения срока действия тарифа");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.OfdPinAgents)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_of_pin_agent_id");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_ofd_pin_bill_id");

                entity.HasOne(d => d.Comment)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.CommentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_ofd_pin_comment_id");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_contract_tariff_id");

                entity.HasOne(d => d.OfdDevice)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.OfdDeviceId)
                    .HasConstraintName("ro_ofd_pin_ofd_device_id_fkey");

                entity.HasOne(d => d.OfdDiscount)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.OfdDiscountId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_discount_id");

                entity.HasOne(d => d.OfdPinType)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.OfdPinTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_ofd_pin_fk");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.OfdPinParents)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_parent_id");

                entity.HasOne(d => d.PinTemplate)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.PinTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ofd_pin_pin_template_id");

                entity.HasOne(d => d.Prefix)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.PrefixId)
                    .HasConstraintName("fk_ro_ofd_pin_prefix_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_ofd_pin_step_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_ofd_pin_user_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.OfdPins)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_ofd_pin_unit_id");

                //entity.HasMany(d => d.OfdPinTemplates)
                //    .WithMany(p => p.OfdPins)
                //    .UsingEntity<Dictionary<string, object>>(
                //        "RoOfdPinTemplateId",
                //        l => l.HasOne<OfdPinTemplate>().WithMany().HasForeignKey("OfdPinTemplateId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("ro_ofd_pin_template_id_fk1"),
                //        r => r.HasOne<OfdPin>().WithMany().HasForeignKey("OfdPinId").OnDelete(DeleteBehavior.Restrict).HasConstraintName("ro_ofd_pin_template_id_fk"),
                //        j =>
                //        {
                //            j.HasKey("OfdPinId", "OfdPinTemplateId").HasName("ro_ofd_pin_template_id_pkey");

                //            j.ToTable("ro_ofd_pin_template_id");

                //            j.IndexerProperty<int>("OfdPinId").HasColumnName("ofd_pin_id").HasComment("Ид. пин кода");

                //            j.IndexerProperty<Guid>("OfdPinTemplateId").HasColumnName("ofd_pin_template_id").HasComment("Ид. шаблона");
                //        });
            });

            modelBuilder.Entity<OfdPinSetting>(entity =>
            {
                entity.HasKey(e => new { e.SettingId, e.PinId })
                    .HasName("pk_ofd_pin_setting");

                entity.ToTable("ro_ofd_pin_setting");

                entity.HasIndex(e => e.PinId, "idx_ro_ofd_pin_setting_pin_id");

                entity.HasIndex(e => e.SettingId, "idx_ro_ofd_pin_setting_setting_id");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.PinId)
                    .HasColumnName("pin_id")
                    .HasComment("Пин ид.");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Pin)
                    .WithMany(p => p.OfdPinSettings)
                    .HasForeignKey(d => d.PinId)
                    .HasConstraintName("fk_pin_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.OfdPinSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<OfdPinTemplate>(entity =>
            {
                entity.HasKey(e => e.OfdPinTemplateId)
                    .HasName("ro_ofd_pin_template_pkey");

                entity.ToTable("ro_ofd_pin_template");

                entity.HasIndex(e => e.SecretId, "idx_ofd_pin_template_secret_id");

                entity.HasIndex(e => new { e.Validity, e.ValidityUnitId }, "idx_ofd_pin_template_validity_validity_unit_id");

                entity.Property(e => e.OfdPinTemplateId)
                    .ValueGeneratedNever()
                    .HasColumnName("ofd_pin_template_id")
                    .HasComment("Ид");

                entity.Property(e => e.AgentPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("agent_price")
                    .HasComment("Цена для партнёра");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Номенклатура");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.Cost1c)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost_1c")
                    .HasComment("Цена для 1С");

                entity.Property(e => e.InitialTime)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.OfdPinTypeId)
                    .HasColumnName("ofd_pin_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип пин кода");

                entity.Property(e => e.OffTime)
                    .HasColumnName("off_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.SaleCenterId)
                    .HasColumnName("sale_center_id")
                    .HasComment("Ид. ЦП");

                entity.Property(e => e.ScPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("sc_price")
                    .HasComment("Цена для ЦП");

                entity.Property(e => e.SecretId)
                    .HasMaxLength(50)
                    .HasColumnName("secret_id")
                    .HasComment("Читаемый код");

                entity.Property(e => e.TemplateName)
                    .HasMaxLength(200)
                    .HasColumnName("template_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Единица измерения срока действия");

                entity.HasOne(d => d.OfdPinType)
                    .WithMany(p => p.OfdPinTemplates)
                    .HasForeignKey(d => d.OfdPinTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_template_ofd_pin_type");

                entity.HasOne(d => d.SaleCenter)
                    .WithMany(p => p.OfdPinTemplates)
                    .HasForeignKey(d => d.SaleCenterId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ofd_pin_template_sale_center_id_agent_id");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.OfdPinTemplates)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ofd_pin_template_validity_unit_id_unit_id");
            });

            modelBuilder.Entity<OfdPinTemplateLimit>(entity =>
            {
                entity.HasKey(e => new { e.OfdPinTemplateId, e.LimitId })
                    .HasName("pk_ofd_pin_template_limit_pin_template_id_limit_id");

                entity.ToTable("ro_ofd_pin_template_limit");

                entity.HasAnnotation("Relational:Comment", "Таблица ограничений использования шаблона");

                entity.Property(e => e.OfdPinTemplateId)
                    .HasColumnName("ofd_pin_template_id")
                    .HasComment("Ид. шаблона");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Ограничение");

                entity.Property(e => e.LimitValueInt)
                    .HasColumnName("limit_value_int")
                    .HasComment("Целочисленное значение");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.OfdPinTemplateLimits)
                    .HasForeignKey(d => d.LimitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ro_ofd_pin_template_limit_limit_id");

                entity.HasOne(d => d.OfdPinTemplate)
                    .WithMany(p => p.OfdPinTemplateLimits)
                    .HasForeignKey(d => d.OfdPinTemplateId)
                    .HasConstraintName("fk_ofd_pin_template_limit_pin_template_id");
            });

            modelBuilder.Entity<OfdPinType>(entity =>
            {
                entity.HasKey(e => e.OfdPinTypeId)
                    .HasName("ro_ofd_pin_type_pkey");

                entity.ToTable("ro_ofd_pin_type");

                entity.Property(e => e.OfdPinTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("ofd_pin_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.OfdPinTypeName)
                    .HasColumnName("RoOfdPinTypeName")
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("ro_ofd_pin_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<OfdPrefix>(entity =>
            {
                entity.HasKey(e => e.PrefixId)
                    .HasName("ro_ofd_prefix_pkey");

                entity.ToTable("ro_ofd_prefix");

                entity.HasIndex(e => e.AgentId, "idx_ofd_prefix_office_id");

                entity.HasIndex(e => e.Prefix, "idx_ofd_prefix_prefix")
                    .IsUnique();

                entity.Property(e => e.PrefixId)
                    .HasColumnName("prefix_id")
                    .HasComment("Ид.");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Ид. агента");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Время отключения");

                entity.Property(e => e.PinLength)
                    .HasColumnName("pin_length")
                    .HasDefaultValueSql("5")
                    .HasComment("Длина генерируемого кода");

                entity.Property(e => e.Prefix)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("prefix")
                    .HasComment("Префикс");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.OfdPrefixes)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_ro_ofd_prefix_agent_id");
            });

            modelBuilder.Entity<OfdProduct>(entity =>
            {
                entity.HasKey(e => e.OfdProductId)
                    .HasName("ro_ofd_product_pkey");

                entity.ToTable("ro_ofd_product");

                entity.HasAnnotation("Relational:Comment", "Данные по продукту офд из заявки");

                entity.HasIndex(e => e.ContractTariffEndDate, "ro_ofd_product_contract_tariff_end_date_idx");

                entity.HasIndex(e => e.ContractTariffId, "ro_ofd_product_contract_tariff_id_idx");

                entity.HasIndex(e => e.FiscalAcummEnddate, "ro_ofd_product_fiscal_acumm_enddate_idx");

                entity.HasIndex(e => e.ProductId, "ro_ofd_product_product_id_idx");

                entity.Property(e => e.OfdProductId)
                    .HasColumnName("ofd_product_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractTariffEndDate)
                    .HasColumnName("contract_tariff_end_date")
                    .HasComment("Дата окончания действия лицензии");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.ContractTariffInitialDate)
                    .HasColumnName("contract_tariff_initial_date")
                    .HasComment("Дата начала действия лицензии");

                entity.Property(e => e.ContractTariffRegnum)
                    .HasMaxLength(100)
                    .HasColumnName("contract_tariff_regnum")
                    .HasComment("Регистрационный номер");

                entity.Property(e => e.ContractTariffStepId)
                    .HasColumnName("contract_tariff_step_id")
                    .HasComment("Состояние тарифа");

                entity.Property(e => e.FiscalAcummActivationDate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("fiscal_acumm_activation_date")
                    .HasComment("Дата активации фиксального накопителя");

                entity.Property(e => e.FiscalAcummEnddate)
                    .HasColumnType("timestamp without time zone")
                    .HasColumnName("fiscal_acumm_enddate")
                    .HasComment("Дата окончания фиксального накопителя");

                entity.Property(e => e.FiscalAcummModel)
                    .HasColumnType("character varying")
                    .HasColumnName("fiscal_acumm_model")
                    .HasComment("Модель фиксального накопителя");

                entity.Property(e => e.FiscalAcummNumber)
                    .HasMaxLength(25)
                    .HasColumnName("fiscal_acumm_number")
                    .HasComment("Заводской номер фиксального накопителя");

                entity.Property(e => e.FiscalAcummValidityPeriod)
                    .HasColumnName("fiscal_acumm_validity_period")
                    .HasComment("Срок действия фиксального накопителя");

                entity.Property(e => e.ModelKkt)
                    .HasColumnType("character varying")
                    .HasColumnName("model_kkt")
                    .HasComment("Модель ККТ");

                entity.Property(e => e.Pin)
                    .HasMaxLength(25)
                    .HasColumnName("pin")
                    .HasComment("Пин");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.RegistrationNumberKkt)
                    .HasMaxLength(25)
                    .HasColumnName("registration_number_kkt")
                    .HasComment("Регистрационный номер ККТ");

                entity.Property(e => e.SerialNumberKkt)
                    .HasMaxLength(25)
                    .HasColumnName("serial_number_kkt")
                    .HasComment("Заводской номер ККТ");

                entity.Property(e => e.TariffName)
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_name")
                    .HasComment("Название тарифа");

                entity.Property(e => e.WalletGuid)
                    .HasColumnName("wallet_guid")
                    .HasComment("Идентификатор личного кабинета ОФД");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.OfdProducts)
                    .HasForeignKey(d => d.ContractTariffId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.OfdProducts)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<Office>(entity =>
            {
                entity.HasKey(e => e.OfficeId)
                    .HasName("pk_office");

                entity.ToTable("ro_office");

                entity.HasAnnotation("Relational:Comment", "Таблица офисов");

                entity.HasIndex(e => e.AgentId, "office_agent_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "office_cert_template_id_idx");

                entity.HasIndex(e => e.CertificateId, "office_certificate_id_idx");

                entity.HasIndex(e => e.DefaultCaId, "office_default_ca_id_idx");

                entity.HasIndex(e => e.DefaultProviderId, "office_default_provider_id_idx");

                entity.HasIndex(e => e.DefaultSosId, "office_default_sos_id_idx");

                entity.HasIndex(e => e.OperatorIrucId, "office_operator_iruc_id_idx");

                entity.HasIndex(e => e.Ruid, "office_ruid");

                entity.HasIndex(e => e.OfficeGuid, "sk_office_guid")
                    .IsUnique();

                entity.HasIndex(e => new { e.AgentId, e.OfficeName }, "sk_office_name")
                    .IsUnique();

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasDefaultValueSql("1");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата подключения");

                entity.Property(e => e.DefaultCaId)
                    .HasColumnName("default_ca_id")
                    .HasComment("ЦС");

                entity.Property(e => e.DefaultProviderId)
                    .HasColumnName("default_provider_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.DefaultSosId)
                    .HasColumnName("default_sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeGuid)
                    .HasColumnName("office_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.OfficeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("office_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Оператор ИРУЦ");

                entity.Property(e => e.Password)
                    .HasMaxLength(128)
                    .HasColumnName("password")
                    .HasComment("Пароль для работы с DSS");

                entity.Property(e => e.PfrSender)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("pfr_sender")
                    .HasDefaultValueSql("'Тест'::character varying");

                entity.Property(e => e.PfrSystemSender)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("pfr_system_sender")
                    .HasDefaultValueSql("'Тест'::character varying");

                entity.Property(e => e.Ruid)
                    .HasMaxLength(9)
                    .HasColumnName("ruid")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_template_id");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.DefaultCa)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.DefaultCaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_default_ca");

                entity.HasOne(d => d.DefaultProvider)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.DefaultProviderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_default_provider");

                entity.HasOne(d => d.DefaultSos)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.DefaultSosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_default_sos");

                entity.HasOne(d => d.OperatorIruc)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.OperatorIrucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_operator_iruc");

                entity.HasOne(d => d.Ru)
                    .WithMany(p => p.Offices)
                    .HasForeignKey(d => d.Ruid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ruid");

                entity.HasMany(d => d.Schemes)
                    .WithMany(p => p.Offices)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoOfficeScheme",
                        l => l.HasOne<AgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("fk_scheme"),
                        r => r.HasOne<Office>().WithMany().HasForeignKey("OfficeId").HasConstraintName("fk_office"),
                        j =>
                        {
                            j.HasKey("OfficeId", "SchemeId").HasName("pk_office_scheme");

                            j.ToTable("ro_office_scheme").HasAnnotation("Relational:Comment", "Таблица схем партнера для офиса");

                            j.HasIndex(new[] { "OfficeId" }, "office_scheme_office_id_idx");

                            j.HasIndex(new[] { "SchemeId" }, "office_scheme_scheme_id_idx");

                            j.IndexerProperty<int>("OfficeId").HasColumnName("office_id").HasComment("Офис");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Схема партнера");
                        });

                entity.HasMany(d => d.Users)
                    .WithMany(p => p.Offices)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoOfficeUser",
                        l => l.HasOne<User>().WithMany().HasForeignKey("UserId").HasConstraintName("fk_office_user_user"),
                        r => r.HasOne<Office>().WithMany().HasForeignKey("OfficeId").HasConstraintName("fk_office"),
                        j =>
                        {
                            j.HasKey("OfficeId", "UserId").HasName("pk_office_user");

                            j.ToTable("ro_office_user").HasAnnotation("Relational:Comment", "Таблица связи пользователей с офисами");

                            j.HasIndex(new[] { "OfficeId" }, "office_user_office_id_idx");

                            j.HasIndex(new[] { "UserId" }, "office_user_user_id_idx");

                            j.IndexerProperty<int>("OfficeId").HasColumnName("office_id").HasComment("Офис");

                            j.IndexerProperty<int>("UserId").HasColumnName("user_id").HasComment("Пользователь");
                        });
            });

            modelBuilder.Entity<OfficeCertificate>(entity =>
            {
                entity.HasKey(e => new { e.OfficeId, e.CertificateId })
                    .HasName("pk_office_certificate");

                entity.ToTable("ro_office_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов офиса");

                entity.HasIndex(e => e.CertificateId, "office_certificate_certificate_id_idx");

                entity.HasIndex(e => e.OfficeId, "office_certificate_office_id_idx");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.OfficeCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.OfficeCertificates)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<OfficeDocType>(entity =>
            {
                entity.HasKey(e => e.OfficeDocTypeId)
                    .HasName("pk_office_doc_type");

                entity.ToTable("ro_office_doc_type");

                entity.HasAnnotation("Relational:Comment", "Таблица необходимых типов документов для офисов");

                entity.HasIndex(e => e.DocTypeId, "ro_office_doc_type_doc_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "ro_office_doc_type_office_id_idx");

                entity.HasIndex(e => new { e.OfficeId, e.DocTypeId, e.CertTemplateId }, "sk_office_doc_type")
                    .IsUnique();

                entity.Property(e => e.OfficeDocTypeId)
                    .HasColumnName("office_doc_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Код шаблона сертификата");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательный");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.OfficeDocTypes)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_cert_template_id");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.OfficeDocTypes)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("fk_doc_type");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.OfficeDocTypes)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office_id");
            });

            modelBuilder.Entity<OfficeSetting>(entity =>
            {
                entity.HasKey(e => new { e.OfficeId, e.SettingId })
                    .HasName("pk_office_setting");

                entity.ToTable("ro_office_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек офисов");

                entity.HasIndex(e => e.OfficeId, "office_setting_office_id_idx");

                entity.HasIndex(e => e.SettingId, "office_setting_setting_id_idx");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasColumnName("initial_time")
                    .HasComment("Время начала действия");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.OfficeSettings)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office_id");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.OfficeSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");
            });

            modelBuilder.Entity<OfficeTeam>(entity =>
            {
                entity.HasKey(e => e.OfficeTeamId)
                    .HasName("ro_office_team_pkey");

                entity.ToTable("ro_office_team");

                entity.HasAnnotation("Relational:Comment", "Команды");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Идентификатор команды");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис команды");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.OfficeTeams)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<OfficeTeamPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("ro_office_team_person_pkey");

                entity.ToTable("ro_office_team_person");

                entity.HasAnnotation("Relational:Comment", "Участники команды");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор участника");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Команда");

                entity.Property(e => e.PersonName)
                    .HasColumnType("character varying")
                    .HasColumnName("person_name")
                    .HasComment("Фамилия участника");

                entity.HasOne(d => d.OfficeTeam)
                    .WithMany(p => p.OfficeTeamPeople)
                    .HasForeignKey(d => d.OfficeTeamId)
                    .HasConstraintName("fk_office_team");
            });

            modelBuilder.Entity<Okopf>(entity =>
            {
                entity.HasKey(e => e.OkopfId)
                    .HasName("pk_okopf");

                entity.ToTable("ro_okopf");

                entity.HasAnnotation("Relational:Comment", "Таблица ОКОПФ");

                entity.HasIndex(e => e.Budget, "okopf_budget_idx");

                entity.HasIndex(e => e.Code99, "okopf_code99_idx");

                entity.HasIndex(e => e.StepId, "okopf_step_id_idx");

                entity.HasIndex(e => e.Code2012, "sk_okopf_code2012")
                    .IsUnique();

                entity.Property(e => e.OkopfId)
                    .ValueGeneratedNever()
                    .HasColumnName("okopf_id")
                    .HasComment("Код");

                entity.Property(e => e.Budget)
                    .HasColumnName("budget")
                    .HasComment("Бюджетное учреждение");

                entity.Property(e => e.Code2012)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnName("code2012")
                    .HasComment("Код ОК 028-2012");

                entity.Property(e => e.Code99)
                    .HasMaxLength(2)
                    .HasColumnName("code99")
                    .HasComment("Код ОК 028-99");

                entity.Property(e => e.OkopfName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("okopf_name")
                    .HasComment("Наименование");

                entity.Property(e => e.OkopfShortName)
                    .HasMaxLength(10)
                    .HasColumnName("okopf_short_name");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Okopfs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<OneSAbonentContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_one_s_abonent_contract_tariff_view");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<OneSAbonentContractTariffViewEx>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_one_s_abonent_contract_tariff_view_ex");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.ParentId).HasColumnName("parent_id");

                entity.Property(e => e.Prolongated).HasColumnName("prolongated");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");
            });

            modelBuilder.Entity<Operation>(entity =>
            {
                entity.HasKey(e => e.OperationId)
                    .HasName("pk_operation");

                entity.ToTable("ro_operation");

                entity.HasAnnotation("Relational:Comment", "Таблица операций");

                entity.HasIndex(e => e.OperationName, "sk_operation_name")
                    .IsUnique();

                entity.Property(e => e.OperationId)
                    .ValueGeneratedNever()
                    .HasColumnName("operation_id")
                    .HasComment("Код");

                entity.Property(e => e.OperationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("operation_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<OperationLog>(entity =>
            {
                entity.HasKey(e => e.OperationLogId)
                    .HasName("pk_operation_log");

                entity.ToTable("ro_operation_log");

                entity.HasAnnotation("Relational:Comment", "Таблица лога операций");

                entity.HasIndex(e => e.ApplicationId, "operation_log_application_id_idx");

                entity.HasIndex(e => e.OperationId, "operation_log_operation_id_idx");

                entity.HasIndex(e => e.UserId, "operation_log_user_id_idx");

                entity.Property(e => e.OperationLogId)
                    .HasColumnName("operation_log_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.OperationId)
                    .HasColumnName("operation_id")
                    .HasComment("Операция");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("ГУИД продукта");

                entity.Property(e => e.RunTime)
                    .HasPrecision(0)
                    .HasColumnName("run_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время выполнения");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.OperationLogs)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.OperationLogs)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("fk_operation");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.OperationLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<OperatorIruc>(entity =>
            {
                entity.HasKey(e => e.OperatorIrucId)
                    .HasName("pk_operator_iruc");

                entity.ToTable("ro_operator_iruc");

                entity.HasAnnotation("Relational:Comment", "Таблица операторов ИРУЦ");

                entity.HasIndex(e => e.AgentId, "operator_iruc_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "operator_iruc_certificate_id_idx");

                entity.HasIndex(e => e.DucId, "operator_iruc_duc_id_idx");

                entity.HasIndex(e => e.SosId, "operator_iruc_sos_id_idx");

                entity.HasIndex(e => e.OperatorIrucName, "sk_operator_iruc_name")
                    .IsUnique();

                entity.Property(e => e.OperatorIrucId)
                    .HasColumnName("operator_iruc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.DucId)
                    .HasColumnName("duc_id")
                    .HasComment("ДУЦ");

                entity.Property(e => e.IrucLogin)
                    .HasMaxLength(15)
                    .HasColumnName("iruc_login")
                    .HasComment("Логин");

                entity.Property(e => e.IrucPassword)
                    .HasMaxLength(15)
                    .HasColumnName("iruc_password")
                    .HasComment("Пароль");

                entity.Property(e => e.OperatorIrucName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("operator_iruc_name")
                    .HasComment("Наименование");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.OperatorIrucs)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.OperatorIrucs)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Duc)
                    .WithMany(p => p.OperatorIrucs)
                    .HasForeignKey(d => d.DucId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_duc");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.OperatorIrucs)
                    .HasForeignKey(d => d.SosId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.HasKey(e => e.OrderId)
                    .HasName("ro_order_pkey");

                entity.ToTable("ro_order");

                entity.HasIndex(e => e.DispatchTime, "ro_order_dispatch_time_idx");

                entity.HasIndex(e => e.BillId, "ro_order_idx");

                entity.Property(e => e.OrderId)
                    .HasColumnName("order_id")
                    .HasComment("Ид");

                entity.Property(e => e.AddrId)
                    .HasColumnName("addr_id")
                    .HasComment("Адрес доставки");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Счёт");

                entity.Property(e => e.DispatchTime)
                    .HasPrecision(0)
                    .HasColumnName("dispatch_time")
                    .HasComment("Дата отгрузки");

                entity.Property(e => e.DispatchUser)
                    .HasColumnName("dispatch_user")
                    .HasComment("Отгрузивший заказ");

                entity.Property(e => e.Email)
                    .HasColumnType("character varying")
                    .HasColumnName("email");

                entity.Property(e => e.Name)
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("ФИО");

                entity.Property(e => e.Phone)
                    .HasColumnType("character varying")
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SumReward)
                    .HasPrecision(10, 2)
                    .HasColumnName("sum_reward")
                    .HasComment("Вознаграждение");

                entity.HasOne(d => d.Addr)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.AddrId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ro_order_addr_id");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.BillId)
                    .HasConstraintName("fk_ro_order_bill_id");

                entity.HasOne(d => d.DispatchUserNavigation)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.DispatchUser)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_order_fk");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_order_step_id");
            });

            modelBuilder.Entity<OrgUnit>(entity =>
            {
                entity.HasKey(e => e.OrgUnitId)
                    .HasName("pk_org_unit");

                entity.ToTable("ro_org_unit");

                entity.HasAnnotation("Relational:Comment", "Таблица подразделений");

                entity.HasIndex(e => e.OrgUnitName, "sk_org_unit_name")
                    .IsUnique();

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasComment("Флаг отображения");

                entity.Property(e => e.OrgUnitName)
                    .IsRequired()
                    .HasMaxLength(355)
                    .HasColumnName("org_unit_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<PassportDataType>(entity =>
            {
                entity.HasKey(e => e.PassportDataTypeId)
                    .HasName("pk_passport_data_type");

                entity.ToTable("ro_passport_data_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов данных паспорта");

                entity.HasIndex(e => e.PassportDataTypeName, "sk_passport_data_type_name")
                    .IsUnique();

                entity.Property(e => e.PassportDataTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PassportDataTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("passport_data_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<PassportType>(entity =>
            {
                entity.HasKey(e => e.PassportTypeId)
                    .HasName("pk_passport_type");

                entity.ToTable("ro_passport_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов документов удостоверяющих личность");

                entity.HasIndex(e => e.PassportTypeCode, "sk_passport_type_code")
                    .IsUnique();

                entity.HasIndex(e => e.PassportTypeName, "sk_passport_type_name")
                    .IsUnique();

                entity.Property(e => e.PassportTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("passport_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PassportTypeCode)
                    .HasMaxLength(2)
                    .HasColumnName("passport_type_code")
                    .IsFixedLength()
                    .HasComment("Код");

                entity.Property(e => e.PassportTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("passport_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.PassportTypeNote)
                    .HasColumnType("character varying")
                    .HasColumnName("passport_type_note")
                    .HasComment("Примечание");
            });

            modelBuilder.Entity<Permission>(entity =>
            {
                entity.HasKey(e => e.PermissionId)
                    .HasName("pk_permission");

                entity.ToTable("ro_permission");

                entity.HasAnnotation("Relational:Comment", "Таблица разрешений для ключа");

                entity.HasIndex(e => e.TypeId, "permission_type_id_idx");

                entity.Property(e => e.PermissionId)
                    .ValueGeneratedNever()
                    .HasColumnName("permission_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("permission_name")
                    .HasComment("Наименование");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Permissions)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_permission_type");
            });

            modelBuilder.Entity<PermissionType>(entity =>
            {
                entity.HasKey(e => e.PermissionTypeId)
                    .HasName("pk_permission_type");

                entity.ToTable("ro_permission_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов разрешений");

                entity.HasIndex(e => e.PermissionTypeName, "sk_permission_type_name")
                    .IsUnique();

                entity.Property(e => e.PermissionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("permission_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PermissionTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("permission_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Person>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("pk_person");

                entity.ToTable("ro_person");

                entity.HasAnnotation("Relational:Comment", "Таблица физических лиц");

                entity.HasIndex(e => e.CountryId, "person_country_id_idx");

                entity.HasIndex(e => e.GenderId, "person_gender_id_idx");

                entity.HasIndex(e => e.OfficeId, "person_office_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "person_passport_type_id_idx");

                entity.HasIndex(e => e.UserId, "person_user_id_idx");

                entity.HasIndex(e => new { e.PassportTypeId, e.PassportSeries, e.PassportNumber }, "sk_passport")
                    .IsUnique();

                entity.HasIndex(e => e.Snils, "sk_snils")
                    .IsUnique();

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Гражданство");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.GenderId)
                    .HasColumnName("gender_id")
                    .HasComment("Пол");

                entity.Property(e => e.HomePhone)
                    .HasMaxLength(24)
                    .HasColumnName("home_phone")
                    .HasComment("Домашний телефон");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН физического лица");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PasportDate)
                    .HasColumnName("pasport_date")
                    .HasComment("Когда выдан документ");

                entity.Property(e => e.PassportAddon)
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан документ");

                entity.Property(e => e.PassportEndDate)
                    .HasColumnName("passport_end_date")
                    .HasComment("Дата окончания срока действия паспорта");

                entity.Property(e => e.PassportNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportSeries)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.PassportUnit)
                    .HasMaxLength(7)
                    .HasColumnName("passport_unit")
                    .HasComment("Код подразделения, выдавшего паспорт");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(64)
                    .HasColumnName("pseudonym")
                    .HasComment("Псевдоним");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_country");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_gender");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.People)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PersonDoc>(entity =>
            {
                entity.HasKey(e => e.PersonDocId)
                    .HasName("pk_person_doc");

                entity.ToTable("ro_person_doc");

                entity.HasAnnotation("Relational:Comment", "Таблица документов физических лиц");

                entity.HasIndex(e => e.DocId, "person_doc_doc_id_idx");

                entity.HasIndex(e => e.PersonId, "person_doc_person_id_idx");

                entity.HasIndex(e => new { e.PersonId, e.DocId }, "sk_person_doc")
                    .IsUnique();

                entity.Property(e => e.PersonDocId)
                    .HasColumnName("person_doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Продукт");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.PersonDocs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("fk_doc");

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.PersonDocs)
                    .HasForeignKey(d => d.PersonId)
                    .HasConstraintName("fk_person");
            });

            modelBuilder.Entity<PfrLayoutScheme>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.PfrSchemeTypeId })
                    .HasName("pk_pfr_layout_scheme");

                entity.ToTable("ro_pfr_layout_scheme");

                entity.HasAnnotation("Relational:Comment", "Таблица параметров документов для отправки в ПФР");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.PfrSchemeTypeId)
                    .HasColumnName("pfr_scheme_type_id")
                    .HasComment("Идентификатор типа документа");

                entity.Property(e => e.AttachLimit)
                    .HasColumnName("attach_limit")
                    .HasComment("Максимально возможный суммарный размер вложения (в мб)");

                entity.Property(e => e.AttachLimitFile)
                    .HasColumnName("attach_limit_file")
                    .HasComment("Максимально возможный размер каждого вложения (в мб)");

                entity.Property(e => e.AttachMask)
                    .HasMaxLength(100)
                    .HasColumnName("attach_mask")
                    .HasComment("Формат файлов, которые можно прикрепить к создаваемому документу");

                entity.Property(e => e.AttachZip)
                    .HasColumnName("attach_zip")
                    .HasComment("Возможность зиповать вложения");

                entity.Property(e => e.FileMaskId).HasColumnName("file_mask_id");

                entity.Property(e => e.FullSnils)
                    .HasColumnName("full_snils")
                    .HasComment("Проверка КС СНИЛС");

                entity.Property(e => e.LayoutType)
                    .HasColumnName("layout_type")
                    .HasComment("Отображение направлений в комбобоксе \"Код УПФР по месту назначения пенсии\"");

                entity.Property(e => e.Letter)
                    .HasColumnName("letter")
                    .HasComment("Выбор направлений МПД, для отправки писем");

                entity.Property(e => e.Seniority)
                    .HasColumnName("seniority")
                    .HasComment("Маска имени файла архива макетов ПД");

                entity.Property(e => e.SubjectMaskId).HasColumnName("subject_mask_id");

                entity.HasOne(d => d.FileMask)
                    .WithMany(p => p.PfrLayoutSchemes)
                    .HasForeignKey(d => d.FileMaskId)
                    .HasConstraintName("fk_file_mask_id");

                entity.HasOne(d => d.PfrSchemeType)
                    .WithMany(p => p.PfrLayoutSchemes)
                    .HasForeignKey(d => d.PfrSchemeTypeId)
                    .HasConstraintName("fk_pfr_scheme_type_id");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PfrLayoutSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.SubjectMask)
                    .WithMany(p => p.PfrLayoutSchemes)
                    .HasForeignKey(d => d.SubjectMaskId)
                    .HasConstraintName("fk_subject_mask_id");
            });

            modelBuilder.Entity<PfrProvider>(entity =>
            {
                entity.HasKey(e => e.PfrProviderId)
                    .HasName("pk_pfr_provider");

                entity.ToTable("ro_pfr_provider");

                entity.HasAnnotation("Relational:Comment", "Таблица провайдеров ПФР");

                entity.HasIndex(e => e.CertificateId, "pfr_provider_certificate_id_idx");

                entity.HasIndex(e => new { e.PfrProviderName, e.PfrProviderSystem }, "sk_pfr_provider")
                    .IsUnique();

                entity.Property(e => e.PfrProviderId)
                    .HasColumnName("pfr_provider_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.PfrProviderName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("pfr_provider_name")
                    .HasComment("Наименование");

                entity.Property(e => e.PfrProviderSystem)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("pfr_provider_system")
                    .HasComment("Система");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.PfrProviders)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");
            });

            modelBuilder.Entity<PfrSchemeFileMask>(entity =>
            {
                entity.HasKey(e => e.FileMaskId)
                    .HasName("pk_pfr_scheme_file_mask");

                entity.ToTable("ro_pfr_scheme_file_mask");

                entity.HasAnnotation("Relational:Comment", "Таблица масок файлов для ПФР");

                entity.Property(e => e.FileMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("file_mask_id")
                    .HasComment("ИД маски");

                entity.Property(e => e.FileMask)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("file_mask")
                    .HasComment("Маска");
            });

            modelBuilder.Entity<PfrSchemeSubjectMask>(entity =>
            {
                entity.HasKey(e => e.SubjectMaskId)
                    .HasName("pk_pfr_scheme_subject_mask");

                entity.ToTable("ro_pfr_scheme_subject_mask");

                entity.HasAnnotation("Relational:Comment", "Таблица масок темы для ПФР");

                entity.Property(e => e.SubjectMaskId)
                    .ValueGeneratedNever()
                    .HasColumnName("subject_mask_id")
                    .HasComment("ИД маски");

                entity.Property(e => e.SubjectMask)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("subject_mask")
                    .HasComment("Маска");
            });

            modelBuilder.Entity<PfrSchemeType>(entity =>
            {
                entity.HasKey(e => e.PfrSchemeTypeId)
                    .HasName("pk_pfr_scheme_type");

                entity.ToTable("ro_pfr_scheme_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов документов для отправки в ПФР");

                entity.Property(e => e.PfrSchemeTypeId)
                    .HasColumnName("pfr_scheme_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LetterCategory)
                    .HasMaxLength(50)
                    .HasColumnName("letter_category")
                    .HasComment("Категория Письма");

                entity.Property(e => e.PfrSchemeTypeName)
                    .HasMaxLength(100)
                    .HasColumnName("pfr_scheme_type_name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<Plan>(entity =>
            {
                entity.HasKey(e => e.PlanId)
                    .HasName("ro_plan_pkey");

                entity.ToTable("ro_plan");

                entity.HasAnnotation("Relational:Comment", "План подключений абонентов");

                entity.HasIndex(e => e.PlanName, "ro_plan_plan_name_key")
                    .IsUnique();

                entity.Property(e => e.PlanId)
                    .HasColumnName("plan_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PlanName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("plan_name")
                    .HasComment("Наименование");

                entity.HasMany(d => d.Schemes)
                    .WithMany(p => p.Plans)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoPlanScheme",
                        l => l.HasOne<AgentScheme>().WithMany().HasForeignKey("SchemeId").HasConstraintName("ro_plan_scheme_fk1"),
                        r => r.HasOne<Plan>().WithMany().HasForeignKey("PlanId").HasConstraintName("ro_plan_scheme_fk"),
                        j =>
                        {
                            j.HasKey("PlanId", "SchemeId").HasName("pk_plan_scheme");

                            j.ToTable("ro_plan_scheme");

                            j.IndexerProperty<int>("PlanId").HasColumnName("plan_id").HasComment("Ид. плана подключений");

                            j.IndexerProperty<int>("SchemeId").HasColumnName("scheme_id").HasComment("Ид. схемы");
                        });
            });

            modelBuilder.Entity<PlanDetail>(entity =>
            {
                entity.HasKey(e => new { e.PlanId, e.Year, e.Month, e.MinValue })
                    .HasName("pk_plan_detail");

                entity.ToTable("ro_plan_detail");

                entity.HasAnnotation("Relational:Comment", "Описание плана подключений");

                entity.HasIndex(e => e.PlanId, "idx_plan_id");

                entity.Property(e => e.PlanId)
                    .HasColumnName("plan_id")
                    .HasComment("Идентификатор плана");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.MinValue)
                    .HasColumnName("min_value")
                    .HasComment("Минимальное значение");

                entity.Property(e => e.MaxValue)
                    .HasColumnName("max_value")
                    .HasComment("Максимальное значение");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("% вознаграждения");

                entity.HasOne(d => d.Plan)
                    .WithMany(p => p.PlanDetails)
                    .HasForeignKey(d => d.PlanId)
                    .HasConstraintName("ro_plan_detail_fk");
            });

            modelBuilder.Entity<Plugin>(entity =>
            {
                entity.HasKey(e => e.PluginId)
                    .HasName("pk_plugin");

                entity.ToTable("ro_plugin");

                entity.HasAnnotation("Relational:Comment", "Таблица версий БД");

                entity.HasIndex(e => new { e.DefaultTariffId, e.PluginId }, "plugin_default_tariff_id_plugin_id_idx");

                entity.HasIndex(e => e.ProtocolId, "plugin_protocol_id_idx");

                entity.HasIndex(e => e.PluginGuid, "sk_plugin_guid")
                    .IsUnique();

                entity.HasIndex(e => e.PluginName, "sk_plugin_name")
                    .IsUnique();

                entity.Property(e => e.PluginId)
                    .ValueGeneratedNever()
                    .HasColumnName("plugin_id")
                    .HasComment("Код");

                entity.Property(e => e.Basic)
                    .HasColumnName("basic")
                    .HasDefaultValueSql("false")
                    .HasComment("Основной");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DefaultTariffId)
                    .HasColumnName("default_tariff_id")
                    .HasComment("Тариф по умолчанию");

                entity.Property(e => e.PluginGuid)
                    .HasColumnName("plugin_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.PluginName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("plugin_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.Plugins)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.PluginTariff)
                    .WithMany(p => p.Plugins)
                    .HasForeignKey(d => new { d.DefaultTariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<PluginTariff>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.PluginId })
                    .HasName("pk_plugin_tariff");

                entity.ToTable("ro_plugin_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица тарифов для плагинов");

                entity.HasIndex(e => e.PluginId, "plugin_tariff_plugin_id_idx");

                entity.HasIndex(e => e.ProtocolId, "plugin_tariff_protocol_id_idx");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Код");

                entity.Property(e => e.PluginId)
                    .HasColumnName("plugin_id")
                    .HasComment("Плагин");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.TariffName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.PluginTariffs)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.PluginTariffs)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_protocol");
            });

            modelBuilder.Entity<Point>(entity =>
            {
                entity.HasKey(e => e.PointId)
                    .HasName("pk_point");

                entity.ToTable("ro_point");

                entity.HasAnnotation("Relational:Comment", "Таблица точек");

                entity.HasIndex(e => e.AddressId, "point_address_id_idx");

                entity.HasIndex(e => e.AgentId, "point_agent_id_idx");

                entity.HasIndex(e => e.StepId, "point_step_id_idx");

                entity.HasIndex(e => e.PointGuid, "sk_point_guid")
                    .IsUnique();

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasDefaultValueSql("nextval('ro_transfer_point_transfer_point_id_seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Адрес");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Latitude)
                    .HasPrecision(9, 6)
                    .HasColumnName("latitude")
                    .HasComment("Широта");

                entity.Property(e => e.Longitude)
                    .HasPrecision(9, 6)
                    .HasColumnName("longitude")
                    .HasComment("Долгота");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Phone)
                    .HasMaxLength(100)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PointGuid)
                    .HasColumnName("point_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.PointName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("point_name")
                    .HasComment("Наименование");

                entity.Property(e => e.Schedule)
                    .HasColumnType("character varying")
                    .HasColumnName("schedule")
                    .HasComment("График работы");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.Points)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_address");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Points)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Points)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<PointStep>(entity =>
            {
                entity.HasKey(e => new { e.PointId, e.StepId, e.LogTime })
                    .HasName("pk_point_step");

                entity.ToTable("ro_point_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний точек");

                entity.HasIndex(e => e.PointId, "point_step_point_id_idx");

                entity.HasIndex(e => e.StepId, "point_step_step_id_idx");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.PointSteps)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PointSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<PointUse>(entity =>
            {
                entity.HasKey(e => e.PointUseId)
                    .HasName("pk_point_use");

                entity.ToTable("ro_point_use");

                entity.HasAnnotation("Relational:Comment", "Применение точек");

                entity.HasIndex(e => e.PointId, "point_use_point_id_idx");

                entity.HasIndex(e => e.TypeId, "point_use_type_id_idx");

                entity.HasIndex(e => new { e.PointId, e.TypeId }, "sk_point_use")
                    .IsUnique();

                entity.Property(e => e.PointUseId)
                    .HasColumnName("point_use_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.PointUses)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.PointUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<PointUseType>(entity =>
            {
                entity.HasKey(e => e.UseTypeId)
                    .HasName("pk_point_use_type");

                entity.ToTable("ro_point_use_type");

                entity.HasAnnotation("Relational:Comment", "Тип применения точки");

                entity.Property(e => e.UseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("use_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UseTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("use_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<PointZone>(entity =>
            {
                entity.HasKey(e => e.PointZoneId)
                    .HasName("pk_point_zone");

                entity.ToTable("ro_point_zone");

                entity.HasAnnotation("Relational:Comment", "Таблица зон обслуживания точек");

                entity.HasIndex(e => e.PointId, "point_zone_point_id_idx");

                entity.HasIndex(e => e.RegionId, "point_zone_region_id_idx");

                entity.Property(e => e.PointZoneId)
                    .HasColumnName("point_zone_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PointId)
                    .HasColumnName("point_id")
                    .HasComment("Точка");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.HasOne(d => d.Point)
                    .WithMany(p => p.PointZones)
                    .HasForeignKey(d => d.PointId)
                    .HasConstraintName("fk_point");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PointZones)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");
            });

            modelBuilder.Entity<PortalAccount>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.PortalTypeId })
                    .HasName("pk_portal_account");

                entity.ToTable("ro_portal_account");

                entity.HasAnnotation("Relational:Comment", "Таблица данных по личному кабинету");

                entity.HasIndex(e => e.Login, "portal_account_login_idx");

                entity.HasIndex(e => e.PortalTypeId, "portal_account_portal_type_id_idx");

                entity.HasIndex(e => e.ProductId, "portal_account_product_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.PortalTypeId)
                    .HasColumnName("portal_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип личного кабинета");

                entity.Property(e => e.AccountId)
                    .HasMaxLength(40)
                    .HasColumnName("account_id")
                    .HasComment("Идентификатор записи на портале");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.PortalType)
                    .WithMany(p => p.PortalAccounts)
                    .HasForeignKey(d => d.PortalTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_portal_type");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.PortalAccounts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<PortalType>(entity =>
            {
                entity.HasKey(e => e.PortalTypeId)
                    .HasName("pk_portal_type");

                entity.ToTable("ro_portal_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов личных кабинетов");

                entity.HasIndex(e => e.PortalTypeName, "sk_portal_type_name")
                    .IsUnique();

                entity.Property(e => e.PortalTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("portal_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PortalTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("portal_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Post>(entity =>
            {
                entity.HasKey(e => e.PostId)
                    .HasName("pk_post");

                entity.ToTable("ro_post");

                entity.HasAnnotation("Relational:Comment", "Таблица должностей");

                entity.HasIndex(e => e.PostName, "sk_post_name")
                    .IsUnique();

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Display)
                    .HasColumnName("display")
                    .HasComment("Флаг отображения");

                entity.Property(e => e.GenitiveName)
                    .HasMaxLength(256)
                    .HasColumnName("genitive_name")
                    .HasComment("Наименование в родительном падеже");

                entity.Property(e => e.PostName)
                    .IsRequired()
                    .HasMaxLength(355)
                    .HasColumnName("post_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<PotentialAbonent>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("pk_potential_client");

                entity.ToTable("ro_potential_abonent");

                entity.HasAnnotation("Relational:Comment", "Таблица потенциальных клиентов");

                entity.HasIndex(e => e.AbonentTypeId, "potential_abonent_abonent_type_id_idx");

                entity.HasIndex(e => e.OfficeId, "potential_abonent_office_id_idx");

                entity.HasIndex(e => e.UserId, "potential_abonent_user_id_idx");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.CityName)
                    .HasMaxLength(200)
                    .HasColumnName("city_name")
                    .HasComment("Город");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DetachedUnitsCount)
                    .HasColumnName("detached_units_count")
                    .HasComment("Количество обособленных предприятий");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasColumnName("email");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("Файл");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsRead)
                    .HasColumnName("is_read")
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг, указывающий на то, был ли прочитан потенциальный абонент");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офиc");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Phone)
                    .HasColumnType("character varying")
                    .HasColumnName("phone")
                    .HasComment("Контакты");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.PotentialAbonents)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type_id");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.PotentialAbonents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PotentialAbonents)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PotentialAbonents)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PotentialAbonents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PotentialAbonentCall>(entity =>
            {
                entity.HasKey(e => e.CallId)
                    .HasName("pk_call");

                entity.ToTable("ro_potential_abonent_call");

                entity.HasAnnotation("Relational:Comment", "Таблица звонков");

                entity.HasIndex(e => e.PotentialAbonentId, "call_potential_abonent_id_idx");

                entity.HasIndex(e => e.StepId, "call_step_id_idx");

                entity.HasIndex(e => e.StepReasonId, "call_step_reason_id_idx");

                entity.HasIndex(e => e.UserId, "call_user_id_idx");

                entity.Property(e => e.CallId)
                    .HasColumnName("call_id")
                    .HasDefaultValueSql("nextval('ro_call_call_id_seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallTime)
                    .HasPrecision(0)
                    .HasColumnName("call_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время звонка");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.PlannedCallTime)
                    .HasPrecision(0)
                    .HasColumnName("planned_call_time")
                    .HasComment("Время следующего звонка");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.Property(e => e.StepReasonId)
                    .HasColumnName("step_reason_id")
                    .HasComment("Причина состояния");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PotentialAbonentCalls)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StepReason)
                    .WithMany(p => p.PotentialAbonentCalls)
                    .HasForeignKey(d => d.StepReasonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step_reason");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PotentialAbonentCalls)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PotentialAbonentCallState>(entity =>
            {
                entity.HasKey(e => e.StateId)
                    .HasName("ro_potential_abonent_call_state_pkey");

                entity.ToTable("ro_potential_abonent_call_state");

                entity.Property(e => e.StateId).HasColumnName("state_id");

                entity.Property(e => e.StateName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("state_name");
            });

            modelBuilder.Entity<PotentialAbonentComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_potential_abonent_comment_pkey");

                entity.ToTable("ro_potential_abonent_comment");

                entity.HasAnnotation("Relational:Comment", "Таблица с сообщениями");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasColumnType("character varying")
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");

                entity.Property(e => e.CommentTypeId)
                    .HasColumnName("comment_type_id")
                    .HasComment("Тип сообщения");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CommentType)
                    .WithMany(p => p.PotentialAbonentComments)
                    .HasForeignKey(d => d.CommentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_comment_fk_comment_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PotentialAbonentComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_comment_fk_users");
            });

            modelBuilder.Entity<PotentialAbonentCommentType>(entity =>
            {
                entity.HasKey(e => e.CommentTypeId)
                    .HasName("ro_potential_abonent_comment_type_pkey");

                entity.ToTable("ro_potential_abonent_comment_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов сообщений");

                entity.HasIndex(e => e.CommentName, "ro_potential_abonent_comment_type_comment_name_key")
                    .IsUnique();

                entity.Property(e => e.CommentTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("comment_type_id")
                    .HasComment("Идентификатор типа сообщения");

                entity.Property(e => e.CommentName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("comment_name")
                    .HasComment("Наименование типа сообщения");
            });

            modelBuilder.Entity<PotentialAbonentContactCatalog>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_potential_abonent_contact_catalog");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(100)
                    .HasColumnName("contact_person")
                    .HasComment("Контактное лицо");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("E-mail");

                entity.Property(e => e.Email2)
                    .HasMaxLength(100)
                    .HasColumnName("email2")
                    .HasComment("дополнительный e-mail");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("inn")
                    .HasComment("инн");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasColumnName("kpp")
                    .HasComment("кпп");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("name")
                    .HasComment("Наименование абонента");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .HasColumnName("phone")
                    .HasComment("телефон");
            });

            modelBuilder.Entity<PotentialAbonentEgai>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentEgaisId)
                    .HasName("pk_potential_abonent_egais");

                entity.ToTable("ro_potential_abonent_egais");

                entity.HasAnnotation("Relational:Comment", "Информация об обособленных подразеделниях для ЕГАИС");

                entity.Property(e => e.PotentialAbonentEgaisId)
                    .HasColumnName("potential_abonent_egais_id")
                    .HasComment("Идентификатор обособленного подразеделния");

                entity.Property(e => e.Adress)
                    .HasMaxLength(250)
                    .HasColumnName("adress")
                    .HasComment("Адрес обособленного подразеделния");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания действия лицензии");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasComment("Дата выдачи лицензии");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП обособленного подразеделния");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального абонента");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код субъекта РФ обособленного подразеделния");

                entity.HasOne(d => d.PotentialAbonent)
                    .WithMany(p => p.PotentialAbonentEgais)
                    .HasForeignKey(d => d.PotentialAbonentId)
                    .HasConstraintName("fk_potential_abonent_egais_potential_abonent");
            });

            modelBuilder.Entity<PotentialAbonentPerson>(entity =>
            {
                entity.HasKey(e => e.PersonId)
                    .HasName("ro_potential_abonent_person_pkey");

                entity.ToTable("ro_potential_abonent_person");

                entity.Property(e => e.PersonId)
                    .HasColumnName("person_id")
                    .HasComment("Идентификатор конкретного индивида");

                entity.Property(e => e.PersonAddress)
                    .HasMaxLength(1000)
                    .HasColumnName("person_address")
                    .HasComment("Адрес");

                entity.Property(e => e.PersonEmail)
                    .HasMaxLength(50)
                    .HasColumnName("person_email");

                entity.Property(e => e.PersonName)
                    .IsRequired()
                    .HasMaxLength(80)
                    .HasColumnName("person_name")
                    .HasComment("Имя контактного лица");

                entity.Property(e => e.PersonPhone)
                    .HasMaxLength(50)
                    .HasColumnName("person_phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PersonPost)
                    .HasColumnType("character varying")
                    .HasColumnName("person_post")
                    .HasComment("Должность");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор");
            });

            modelBuilder.Entity<PotentialAbonentProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId)
                    .HasName("ro_potential_abonent_products_pkey");

                entity.ToTable("ro_potential_abonent_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов продуктов");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_products_product_id_seq'::regclass)")
                    .HasComment("ID типа продукта");

                entity.Property(e => e.ProductTypeName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("product_type_name")
                    .HasComment("Наименование типа продукта");
            });

            modelBuilder.Entity<PotentialAbonentProvider>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_provider_pkey");

                entity.ToTable("ro_potential_abonent_provider");

                entity.HasAnnotation("Relational:Comment", "Таблица для поставщиков");

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.MaxSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_sum")
                    .HasComment("Максимальная сумма аукциона");

                entity.Property(e => e.SumCountAuctions)
                    .HasColumnName("sum_count_auctions")
                    .HasComment("Общее количество участий");

                entity.Property(e => e.SumCountContract)
                    .HasColumnName("sum_count_contract")
                    .HasComment("Общее количество контрагентов");

                entity.Property(e => e.SumCountWin)
                    .HasColumnName("sum_count_win")
                    .HasComment("Общее количество побед");
            });

            modelBuilder.Entity<PotentialAbonentRegNum>(entity =>
            {
                entity.HasKey(e => e.RegId)
                    .HasName("ro_potential_abonent_reg_num_pkey");

                entity.ToTable("ro_potential_abonent_reg_num");

                entity.Property(e => e.RegId).HasColumnName("reg_id");

                entity.Property(e => e.PotentialAbonentId).HasColumnName("potential_abonent_id");

                entity.Property(e => e.RegNum)
                    .HasMaxLength(20)
                    .HasColumnName("reg_num");
            });

            modelBuilder.Entity<PotentialAbonentRejectionReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("ro_potential_abonent_rejection_reason_pkey");

                entity.ToTable("ro_potential_abonent_rejection_reason");

                entity.Property(e => e.ReasonId).HasColumnName("reason_id");

                entity.Property(e => e.ReasonName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .HasColumnName("reason_name");
            });

            modelBuilder.Entity<PotentialAbonentRt>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_rts_pkey");

                entity.ToTable("ro_potential_abonent_rts");

                entity.HasAnnotation("Relational:Comment", "Таблица с даными о победителях РТС");

                entity.HasIndex(e => e.PurchaseNumber, "ro_potential_abonent_rts_purchase_number_key")
                    .IsUnique();

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального клиента");

                entity.Property(e => e.DealReward)
                    .HasPrecision(15, 2)
                    .HasColumnName("deal_reward")
                    .HasComment("Вознаграждение");

                entity.Property(e => e.DealSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("deal_sum")
                    .HasComment("Сумма сделки");

                entity.Property(e => e.GuarantyBeginDate)
                    .HasColumnName("guaranty_begin_date")
                    .HasComment("Начало срока действия банковской гарантии");

                entity.Property(e => e.GuarantyEndDate)
                    .HasColumnName("guaranty_end_date")
                    .HasComment("Конец срока действия банковской гарантии");

                entity.Property(e => e.PlaceAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("place_address")
                    .HasComment("Адрес площадки");

                entity.Property(e => e.PlaceName)
                    .HasColumnType("character varying")
                    .HasColumnName("place_name")
                    .HasComment("Площадка");

                entity.Property(e => e.ProtocolDate)
                    .HasColumnName("protocol_date")
                    .HasComment("Дата протокола о подведении итогов");

                entity.Property(e => e.PurchaseNumber)
                    .IsRequired()
                    .HasMaxLength(19)
                    .HasColumnName("purchase_number")
                    .HasComment("Номер закупки");

                entity.Property(e => e.PurchaseTypeId)
                    .HasColumnName("purchase_type_id")
                    .HasComment("Тип закупки");

                entity.HasOne(d => d.PurchaseType)
                    .WithMany(p => p.PotentialAbonentRts)
                    .HasForeignKey(d => d.PurchaseTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_rtc_purchase_type");
            });

            modelBuilder.Entity<PotentialAbonentStep>(entity =>
            {
                entity.HasKey(e => new { e.PotentialAbonentId, e.StepId, e.LogTime })
                    .HasName("pk_potential_abonent_step");

                entity.ToTable("ro_potential_abonent_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний потенциальных абонентов");

                entity.HasIndex(e => e.PotentialAbonentId, "potential_abonent_step_potential_abonent_id_idx");

                entity.HasIndex(e => e.StepId, "potential_abonent_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "potential_abonent_step_user_id_idx");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PotentialAbonentSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PotentialAbonentSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PotentialAbonentStepType>(entity =>
            {
                entity.HasKey(e => e.StepId)
                    .HasName("pk_step_potential_abonent");

                entity.ToTable("ro_potential_abonent_step_type");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний для модуля \"Потенциальные абоненты\"");

                entity.HasIndex(e => e.StepName, "sk_step_name_potential_abonent")
                    .IsUnique();

                entity.Property(e => e.StepId)
                    .ValueGeneratedNever()
                    .HasColumnName("step_id")
                    .HasComment("Код");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("step_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.PotentialAbonentStepTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_type");
            });

            modelBuilder.Entity<PotentialAbonentTariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("ro_potential_abonent_tariff_pkey");

                entity.ToTable("ro_potential_abonent_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица тарифов 1С-ЭТП");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ID тарифа");

                entity.Property(e => e.Price)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.TariffName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование тарифа");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("ID типа тарифа");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.PotentialAbonentTariffs)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_potential_abonent_tariff_fk");
            });

            modelBuilder.Entity<PotentialAbonentTariffAbonent>(entity =>
            {
                entity.HasKey(e => new { e.PotentialAbonentId, e.TariffId })
                    .HasName("ro_potential_abonent_tariff_abonent_pkey");

                entity.ToTable("ro_potential_abonent_tariff_abonent");

                entity.HasAnnotation("Relational:Comment", "Таблица для связи потенциального абонента и тарифа многие ко многим");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("ID потенциального абонента");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ID тарифа");

                entity.Property(e => e.Count)
                    .HasColumnName("count")
                    .HasComment("Количество");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.PotentialAbonentTariffAbonents)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("ro_potential_abonent_tariff_abonent_fk1");
            });

            modelBuilder.Entity<PotentialAbonentTariffType>(entity =>
            {
                entity.HasKey(e => e.TariffTypeId)
                    .HasName("potential_abonent_tariff_type_pkey");

                entity.ToTable("ro_potential_abonent_tariff_type");

                entity.HasAnnotation("Relational:Comment", "Таблица для типов тарифов");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("ID типа тарифа");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("tariff_type_name")
                    .HasComment("Наименование типа тарифа");
            });

            modelBuilder.Entity<PotentialAbonentTradingPlatform>(entity =>
            {
                entity.HasKey(e => e.AbonentPlatformId)
                    .HasName("pk_abonent_platform");

                entity.ToTable("ro_potential_abonent_trading_platform");

                entity.Property(e => e.AbonentPlatformId)
                    .HasColumnName("abonent_platform_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_trading_platform_id_seq'::regclass)")
                    .HasComment("Идентификатор торговой площадки");

                entity.Property(e => e.EndDate)
                    .HasPrecision(0)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания сертификата");

                entity.Property(e => e.InitialDate)
                    .HasPrecision(0)
                    .HasColumnName("initial_date")
                    .HasComment("Дата начала сертификата");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор потенциального абонента");

                entity.Property(e => e.TradingPlatformTypeId)
                    .HasColumnName("trading_platform_type_id")
                    .HasComment("Идентификатор типа торговой площадки");

                entity.HasOne(d => d.TradingPlatformType)
                    .WithMany(p => p.PotentialAbonentTradingPlatforms)
                    .HasForeignKey(d => d.TradingPlatformTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_trading_platform_type");
            });

            modelBuilder.Entity<PotentialAbonentTradingPlatformType>(entity =>
            {
                entity.HasKey(e => e.TradingPlatformTypeId)
                    .HasName("pk_trading_platform_type");

                entity.ToTable("ro_potential_abonent_trading_platform_type");

                entity.Property(e => e.TradingPlatformTypeId)
                    .HasColumnName("trading_platform_type_id")
                    .HasDefaultValueSql("nextval('ro_potential_abonent_trading_platform_type_id_seq'::regclass)")
                    .HasComment("Идентификатор типа торговой площадки");

                entity.Property(e => e.TradingPlatformName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("trading_platform_name")
                    .HasComment("Наименование торговой площадки");
            });

            modelBuilder.Entity<PotentialAbonentUcb>(entity =>
            {
                entity.HasKey(e => e.PotentialAbonentId)
                    .HasName("ro_potential_abonent_ucb_pkey");

                entity.ToTable("ro_potential_abonent_ucb");

                entity.HasAnnotation("Relational:Comment", "Таблица с данными для ЮКБ");

                entity.Property(e => e.PotentialAbonentId)
                    .ValueGeneratedNever()
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.CertNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("cert_number")
                    .HasComment("Номер сертификата ЮКБ");

                entity.Property(e => e.UcbTransferDate)
                    .HasColumnName("ucb_transfer_date")
                    .HasComment("Дата передачи в ЮКБ");

                entity.Property(e => e.UcbUserId)
                    .HasColumnName("ucb_user_id")
                    .HasComment("Менеджер ЮКБ");

                entity.HasOne(d => d.PotentialAbonent)
                    .WithOne(p => p.PotentialAbonentUcb)
                    .HasForeignKey<PotentialAbonentUcb>(d => d.PotentialAbonentId)
                    .HasConstraintName("ro_potential_abonent_ucb_fk");

                entity.HasOne(d => d.UcbUser)
                    .WithMany(p => p.PotentialAbonentUcbs)
                    .HasForeignKey(d => d.UcbUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_potential_abonent_ucb_fk_users");
            });

            modelBuilder.Entity<PotentialAbonentUserRegion>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RegionId })
                    .HasName("ro_paur_pk");

                entity.ToTable("ro_potential_abonent_user_region");

                entity.HasAnnotation("Relational:Comment", "Таблица регионов пользователей для потенциальных клиентов");

                entity.HasIndex(e => e.RegionId, "paur_region_id_idx");

                entity.HasIndex(e => e.UserId, "paur_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PotentialAbonentUserRegions)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("ro_paur_region_fkey");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PotentialAbonentUserRegions)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("ro_paur_user_fkey");
            });

            modelBuilder.Entity<PotentialAbonentWorkflow>(entity =>
            {
                entity.HasKey(e => e.WorkflowGuid)
                    .HasName("pk_potential_abonent_workflow");

                entity.ToTable("ro_potential_abonent_workflow");

                entity.HasAnnotation("Relational:Comment", "Таблица документооборотов для потенциальных клиентов");

                entity.HasIndex(e => e.PotentialAbonentId, "potential_abonent_workflow_potential_abonent_id_idx");

                entity.HasIndex(e => e.RegBankRequestId, "potential_abonent_workflow_reg_bank_request_id_idx");

                entity.HasIndex(e => e.WorkflowTypeId, "potential_abonent_workflow_workflow_type_id_idx");

                entity.Property(e => e.WorkflowGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_guid")
                    .HasComment("GUID документооборота");

                entity.Property(e => e.CompletedTime)
                    .HasPrecision(0)
                    .HasColumnName("completed_time")
                    .HasComment("Дата завершения");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.PotentialAbonentId)
                    .HasColumnName("potential_abonent_id")
                    .HasComment("Потенциальный абонент");

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Заявление на БГ");

                entity.Property(e => e.StartedTime)
                    .HasPrecision(0)
                    .HasColumnName("started_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата начала");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.RegBankRequest)
                    .WithMany(p => p.PotentialAbonentWorkflows)
                    .HasForeignKey(d => d.RegBankRequestId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_bank_request");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.PotentialAbonentWorkflows)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<Price>(entity =>
            {
                entity.HasKey(e => e.PriceId)
                    .HasName("pk_price");

                entity.ToTable("ro_price");

                entity.HasAnnotation("Relational:Comment", "Таблица прайсов");

                entity.HasIndex(e => e.PriceGroupId, "price_price_group_id_idx");

                entity.HasIndex(e => e.Article, "sk_price_article")
                    .IsUnique();

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.PriceGroupId)
                    .HasColumnName("price_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.PriceName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("price_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.PriceGroup)
                    .WithMany(p => p.Prices)
                    .HasForeignKey(d => d.PriceGroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price_group");
            });

            modelBuilder.Entity<PriceDiscount>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.DiscountId })
                    .HasName("pk_price_discount");

                entity.ToTable("ro_price_discount");

                entity.HasAnnotation("Relational:Comment", "Таблица скидок прайса");

                entity.HasIndex(e => e.DiscountId, "price_discount_discount_id_idx");

                entity.HasIndex(e => e.PriceId, "price_discount_price_id_idx");

                entity.HasIndex(e => e.StepId, "price_discount_step_id_idx");

                entity.HasIndex(e => e.UserId, "price_discount_user_id_idx");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.RegisteredName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.PriceDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.PriceDiscounts)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PriceDiscounts)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PriceDiscounts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PriceDiscountStep>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.DiscountId, e.StepId, e.LogTime })
                    .HasName("pk_price_discount_step");

                entity.ToTable("ro_price_discount_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний скидок прайсов");

                entity.HasIndex(e => e.DiscountId, "price_discount_step_discount_id_idx");

                entity.HasIndex(e => new { e.PriceId, e.DiscountId }, "price_discount_step_price_id_discount_id_idx");

                entity.HasIndex(e => e.PriceId, "price_discount_step_price_id_idx");

                entity.HasIndex(e => e.StepId, "price_discount_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "price_discount_step_user_id_idx");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.PriceDiscountSteps)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.PriceDiscountSteps)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PriceDiscountSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PriceDiscountSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.PriceDiscount)
                    .WithMany(p => p.PriceDiscountSteps)
                    .HasForeignKey(d => new { d.PriceId, d.DiscountId })
                    .HasConstraintName("fk_price_discount");
            });

            modelBuilder.Entity<PriceGroup>(entity =>
            {
                entity.HasKey(e => e.PriceGroupId)
                    .HasName("pk_price_group");

                entity.ToTable("ro_price_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп прайсов");

                entity.HasIndex(e => e.PriceGroupName, "sk_price_group_name")
                    .IsUnique();

                entity.Property(e => e.PriceGroupId)
                    .HasColumnName("price_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PriceGroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("price_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<PriceScheme>(entity =>
            {
                entity.HasKey(e => new { e.RegionId, e.TariffZoneId, e.ProductTypeId })
                    .HasName("pk_price_scheme");

                entity.ToTable("ro_price_scheme");

                entity.HasAnnotation("Relational:Comment", "Таблица ценовых схем");

                entity.HasIndex(e => e.CompetenceCenterId, "price_scheme_competence_center_id_idx");

                entity.HasIndex(e => e.LeadOfficeId, "price_scheme_lead_office_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "price_scheme_product_type_idx");

                entity.HasIndex(e => e.RegionId, "price_scheme_region_id_idx");

                entity.HasIndex(e => e.TariffZoneId, "price_scheme_tariff_zone_id_idx");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TariffZoneId)
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Тарифная зона");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.CompetenceCenterId)
                    .HasColumnName("competence_center_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.LeadOfficeId)
                    .HasColumnName("lead_office_id")
                    .HasComment("Ведущий партнер");

                entity.HasOne(d => d.CompetenceCenter)
                    .WithMany(p => p.PriceSchemeCompetenceCenters)
                    .HasForeignKey(d => d.CompetenceCenterId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_competence_center");

                entity.HasOne(d => d.LeadOffice)
                    .WithMany(p => p.PriceSchemeLeadOffices)
                    .HasForeignKey(d => d.LeadOfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_lead_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.PriceSchemes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.PriceSchemes)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.TariffZone)
                    .WithMany(p => p.PriceSchemes)
                    .HasForeignKey(d => d.TariffZoneId)
                    .HasConstraintName("fk_tariff_zone");
            });

            modelBuilder.Entity<PriceSection>(entity =>
            {
                entity.HasKey(e => e.SectionId)
                    .HasName("pk_price_section");

                entity.ToTable("ro_price_section");

                entity.HasAnnotation("Relational:Comment", "Таблица секций прайсов");

                entity.HasIndex(e => e.ParentSectionId, "price_section_parent_section_id_idx");

                entity.HasIndex(e => e.PriceId, "price_section_price_id_idx");

                entity.HasIndex(e => new { e.SectionName, e.ParentSectionId }, "sk_price_section")
                    .IsUnique();

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ParentSectionId)
                    .HasColumnName("parent_section_id")
                    .HasComment("Родительская секция");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.SectionName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("section_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.ParentSection)
                    .WithMany(p => p.InverseParentSection)
                    .HasForeignKey(d => d.ParentSectionId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_parent_section");

                entity.HasOne(d => d.Price)
                    .WithMany(p => p.PriceSections)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("fk_price");
            });

            modelBuilder.Entity<PriceTariff>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId })
                    .HasName("pk_price_tariff");

                entity.ToTable("ro_price_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица услуг прайсов");

                entity.HasIndex(e => e.SectionId, "price_tariff_section_id_idx");

                entity.HasIndex(e => e.StepId, "price_tariff_step_id_idx");

                entity.HasIndex(e => e.TariffId, "price_tariff_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "price_tariff_user_id_idx");

                entity.HasIndex(e => e.PriceTariffId, "sk_price_tariff_id")
                    .IsUnique();

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.Article)
                    .HasMaxLength(50)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.Displayed)
                    .IsRequired()
                    .HasColumnName("displayed")
                    .HasDefaultValueSql("true")
                    .HasComment("Показывать");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.MarketingName)
                    .HasMaxLength(200)
                    .HasColumnName("marketing_name")
                    .HasComment("Маркетинговое название");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note");

                entity.Property(e => e.PriceTariffId)
                    .HasColumnName("price_tariff_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор позиции в прайсе");

                entity.Property(e => e.RegisteredName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("registered_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ShortNote)
                    .HasMaxLength(255)
                    .HasColumnName("short_note")
                    .HasComment("Краткое описание тарифа");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.PriceTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PriceTariffs)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.PriceTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PriceTariffs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<PriceTariffStep>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId, e.StepId, e.LogTime })
                    .HasName("pk_price_tariff_step");

                entity.ToTable("ro_price_tariff_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний услуг прайсов");

                entity.HasIndex(e => e.SectionId, "price_tariff_step_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "price_tariff_step_section_id_tariff_id_idx");

                entity.HasIndex(e => e.StepId, "price_tariff_step_step_id_idx");

                entity.HasIndex(e => e.TariffId, "price_tariff_step_tariff_id_idx");

                entity.HasIndex(e => e.UserId, "price_tariff_step_user_id_idx");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.PriceTariffSteps)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.PriceTariffSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.PriceTariffSteps)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.PriceTariffSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.PriceTariff)
                    .WithMany(p => p.PriceTariffSteps)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<PriceTrend>(entity =>
            {
                entity.HasKey(e => new { e.SectionId, e.TariffId, e.InitialTime })
                    .HasName("pk_price_trend");

                entity.ToTable("ro_price_trend");

                entity.HasAnnotation("Relational:Comment", "История цен");

                entity.HasIndex(e => e.SectionId, "price_trend_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "price_trend_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "price_trend_tariff_id_idx");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost")
                    .HasComment("Затраты");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Время окончания");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.PriceTrends)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.PriceTrends)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.PriceTariff)
                    .WithMany(p => p.PriceTrends)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<ProcessingMode>(entity =>
            {
                entity.HasKey(e => e.ModeId)
                    .HasName("pk_mode");

                entity.ToTable("ro_processing_mode");

                entity.HasAnnotation("Relational:Comment", "Таблица режимов обработки");

                entity.HasIndex(e => e.ModeName, "sk_mode_name")
                    .IsUnique();

                entity.Property(e => e.ModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("mode_id")
                    .HasComment("Код");

                entity.Property(e => e.ModeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("mode_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ProcessingProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ApplicationId })
                    .HasName("pk_processing_product");

                entity.ToTable("ro_processing_product");

                entity.HasAnnotation("Relational:Comment", "Таблица продуктов в обработке");

                entity.HasIndex(e => e.ApplicationId, "processing_product_application_id_idx");

                entity.HasIndex(e => e.ModeId, "processing_product_mode_id_idx");

                entity.HasIndex(e => e.ProductId, "processing_product_product_id_idx");

                entity.HasIndex(e => e.UserId, "processing_product_user_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время блокировки");

                entity.Property(e => e.ModeId)
                    .HasColumnName("mode_id")
                    .HasDefaultValueSql("3")
                    .HasComment("Режим");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.ProcessingProducts)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Mode)
                    .WithMany(p => p.ProcessingProducts)
                    .HasForeignKey(d => d.ModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_mode");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProcessingProducts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product");

                entity.ToTable("ro_product");

                entity.HasAnnotation("Relational:Comment", "Таблица продуктов");

                entity.HasIndex(e => e.AbonentId, "product_abonent_id_idx");

                entity.HasIndex(e => e.AbonentLocationAddressId, "product_abonent_location_address_id_idx");

                entity.HasIndex(e => e.AbonentPostalAddressId, "product_abonent_postal_address_id_idx");

                entity.HasIndex(e => e.AbonentShortName, "product_abonent_short_name_idx");

                entity.HasIndex(e => e.AccrRepresentId, "product_accr_represent_id_idx");

                entity.HasIndex(e => e.CategoryId, "product_category_id_idx");

                entity.HasIndex(e => e.ContractId, "product_contract_id_idx");

                entity.HasIndex(e => e.LicFileId, "product_lic_file_id_idx");

                entity.HasIndex(e => e.OfficeId, "product_office_id_idx");

                entity.HasIndex(e => e.PacketId, "product_packet_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "product_product_type_id_idx");

                entity.HasIndex(e => e.ProxyAgentId, "product_proxy_agent_id_idx");

                entity.HasIndex(e => e.RegFileId, "product_reg_file_id_idx");

                entity.HasIndex(e => e.SafeId, "product_safe_id_idx");

                entity.HasIndex(e => e.StepId, "product_step_id_idx");

                entity.HasIndex(e => e.StorageTypeId, "product_storage_type_id_idx");

                entity.HasIndex(e => e.UserId, "product_user_id_idx");

                entity.HasIndex(e => new { e.AbonentId, e.ProductId }, "sk_product")
                    .IsUnique();

                entity.HasIndex(e => e.ProductGuid, "sk_product_guid")
                    .IsUnique();

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentEmail)
                    .HasMaxLength(100)
                    .HasColumnName("abonent_email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.AbonentFullName)
                    .HasColumnType("character varying")
                    .HasColumnName("abonent_full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.AbonentKpFss)
                    .HasMaxLength(4)
                    .HasColumnName("abonent_kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.AbonentLocationAddressId)
                    .HasColumnName("abonent_location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.AbonentPostalAddressId)
                    .HasColumnName("abonent_postal_address_id")
                    .HasComment("Юридический адрес");

                entity.Property(e => e.AbonentRnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("abonent_rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.AbonentRnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("abonent_rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.AbonentShortName)
                    .HasMaxLength(500)
                    .HasColumnName("abonent_short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Идентификатор типа абонента этого продукта");

                entity.Property(e => e.AccrRepresent)
                    .HasColumnName("accr_represent")
                    .HasComment("Зависимый");

                entity.Property(e => e.AccrRepresentId)
                    .HasColumnName("accr_represent_id")
                    .HasComment("УП");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasComment("Категория");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Договор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DateFixed)
                    .HasColumnName("date_fixed")
                    .HasComment("Дата окончания");

                entity.Property(e => e.FirstRate)
                    .HasColumnName("first_rate")
                    .HasComment("Крупнейший");

                entity.Property(e => e.HardCodeSos)
                    .HasColumnName("hard_code_sos")
                    .HasComment("Привязка к СОС");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Флаг ИТС");

                entity.Property(e => e.IsPartial)
                    .HasColumnName("is_partial")
                    .HasComment("Частичный рег-файл");

                entity.Property(e => e.LazyUpdate)
                    .HasColumnName("lazy_update")
                    .HasComment("Отложенное обновление");

                entity.Property(e => e.LicFileId)
                    .HasColumnName("lic_file_id")
                    .HasComment("Файл лицензии");

                entity.Property(e => e.MailLogin)
                    .HasMaxLength(50)
                    .HasColumnName("mail_login")
                    .HasComment("Почтовый логин");

                entity.Property(e => e.MailPassword)
                    .HasMaxLength(50)
                    .HasColumnName("mail_password")
                    .HasComment("Почтовый пароль");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Okpo)
                    .HasMaxLength(14)
                    .HasColumnName("okpo")
                    .HasComment("ОКПО");

                entity.Property(e => e.PacketId)
                    .HasColumnName("packet_id")
                    .HasComment("Пакет обновления");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("Наименование");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("УП");

                entity.Property(e => e.Pseudonym)
                    .HasMaxLength(100)
                    .HasColumnName("pseudonym")
                    .HasComment("Псевдоним");

                entity.Property(e => e.RegFileId)
                    .HasColumnName("reg_file_id")
                    .HasComment("Рег-файл");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.SafeId)
                    .HasColumnName("safe_id")
                    .HasComment("Конфиденциальные данные");

                entity.Property(e => e.SmsConfirmation)
                    .HasColumnName("sms_confirmation")
                    .HasComment("СМС подтверждение");

                entity.Property(e => e.StPfr)
                    .HasColumnName("st_pfr")
                    .HasComment("Тип РНС ПФР");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.TaxSystemId)
                    .HasColumnName("tax_system_id")
                    .HasComment("Идентификатор системы налогообложения");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.Property(e => e.UpdateDate)
                    .HasPrecision(0)
                    .HasColumnName("update_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления рег-пакета");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.ProductAbonents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AbonentLocationAddress)
                    .WithMany(p => p.ProductAbonentLocationAddresses)
                    .HasForeignKey(d => d.AbonentLocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent_location_address");

                entity.HasOne(d => d.AbonentPostalAddress)
                    .WithMany(p => p.ProductAbonentPostalAddresses)
                    .HasForeignKey(d => d.AbonentPostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_postal_address");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent_type_id");

                entity.HasOne(d => d.AccrRepresentNavigation)
                    .WithMany(p => p.ProductAccrRepresentNavigations)
                    .HasForeignKey(d => d.AccrRepresentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_accr_represent");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_category");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ContractId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_contract");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.ProxyAgent)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.ProxyAgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_proxy_agent");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.TaxSystem)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.TaxSystemId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tax_system");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductChecking>(entity =>
            {
                entity.HasKey(e => e.CheckingId)
                    .HasName("pk_product_checking");

                entity.ToTable("ro_product_checking");

                entity.HasAnnotation("Relational:Comment", "Таблица проверок для продуктов");

                entity.HasIndex(e => e.TaskId, "idx_ro_product_checking_task_id");

                entity.HasIndex(e => e.CheckingTypeId, "product_checking_checking_type_id_idx");

                entity.HasIndex(e => e.ContentId, "product_checking_content_id_idx");

                entity.HasIndex(e => e.ProductId, "product_checking_product_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_checking_product_person_id_idx");

                entity.HasIndex(e => e.StepId, "product_checking_step_id_idx");

                entity.HasIndex(e => new { e.StepId, e.CheckingTypeId }, "product_checking_step_id_type_id");

                entity.HasIndex(e => new { e.ProductId, e.ProductPersonId, e.CheckingTypeId }, "sk_product_checking")
                    .IsUnique();

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingTime)
                    .HasPrecision(0)
                    .HasColumnName("checking_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.ContentId)
                    .HasColumnName("content_id")
                    .HasComment("Содержание проверки");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_content");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductCheckings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductCheckingStep>(entity =>
            {
                entity.HasKey(e => new { e.CheckingId, e.StepId, e.LogTime })
                    .HasName("pk_product_checking_step");

                entity.ToTable("ro_product_checking_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний проверок по продуктам");

                entity.HasIndex(e => e.CheckingId, "product_checking_step_checking_id_idx");

                entity.HasIndex(e => e.LogTime, "product_checking_step_log_time_idx");

                entity.HasIndex(e => e.StepId, "product_checking_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_checking_step_user_id_idx");

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Проверка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.ProductCheckingSteps)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("fk_checking");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductCheckingSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductCheckingSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductContractTariff>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_contract_tariff");

                entity.Property(e => e.AbonentEmail)
                    .HasMaxLength(100)
                    .HasColumnName("abonent_email");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.ContractId).HasColumnName("contract_id");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.Cost)
                    .HasPrecision(18, 2)
                    .HasColumnName("cost");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.DiscountSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("discount_sum");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.InitialDate).HasColumnName("initial_date");

                entity.Property(e => e.IsPrimary).HasColumnName("is_primary");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.Number).HasColumnName("number");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.PStepId).HasColumnName("p_step_id");

                entity.Property(e => e.PercentDiscount)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_discount");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductId).HasColumnName("product_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.RegistrationDate)
                    .HasPrecision(0)
                    .HasColumnName("registration_date");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(100)
                    .HasColumnName("registration_number");

                entity.Property(e => e.SectionId).HasColumnName("section_id");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.Sum)
                    .HasPrecision(18, 2)
                    .HasColumnName("sum");

                entity.Property(e => e.TariffId).HasColumnName("tariff_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.UserUin)
                    .HasMaxLength(255)
                    .HasColumnName("user_uin");

                entity.Property(e => e.WaitingDays).HasColumnName("waiting_days");
            });

            modelBuilder.Entity<ProductContractTariffView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_product_contract_tariff_view");

                entity.Property(e => e.ContractTariffId).HasColumnName("contract_tariff_id");

                entity.Property(e => e.ProductId).HasColumnName("product_id");
            });

            modelBuilder.Entity<ProductDoc>(entity =>
            {
                entity.HasKey(e => e.ProductDocId)
                    .HasName("pk_product_doc");

                entity.ToTable("ro_product_doc");

                entity.HasAnnotation("Relational:Comment", "Таблица документов продуктов");

                entity.HasIndex(e => e.AbonentId, "product_doc_abonent_id_idx");

                entity.HasIndex(e => new { e.DocId, e.AbonentId }, "product_doc_doc_id_abonent_id_idx");

                entity.HasIndex(e => e.KeyId, "product_doc_key_id_idx");

                entity.HasIndex(e => new { e.ProductId, e.AbonentId }, "product_doc_product_id_abonent_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_doc_product_person_id_idx");

                entity.HasIndex(e => new { e.DocId, e.ProductId, e.ProductPersonId, e.KeyId }, "sk_product_doc")
                    .IsUnique();

                entity.Property(e => e.ProductDocId)
                    .HasColumnName("product_doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Абонент");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ключа");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.ProductDocs)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.ProductDocs)
                    .HasForeignKey(d => d.KeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductDocs)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.ProductDocs)
                    .HasPrincipalKey(p => new { p.DocId, p.AbonentId })
                    .HasForeignKey(d => new { d.DocId, d.AbonentId })
                    .HasConstraintName("fk_doc");
            });

            modelBuilder.Entity<ProductNetNode>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.GateGuid })
                    .HasName("pk_product_net_node");

                entity.ToTable("ro_product_net_node");

                entity.HasAnnotation("Relational:Comment", "Таблица сетевых узло продуктов");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.GateGuid)
                    .HasColumnName("gate_guid")
                    .HasComment("Шлюз Астрал Онлайн");

                entity.Property(e => e.NetNodeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("net_node_name")
                    .HasComment("Сетевой узел");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.ProductNetNodes)
                    .HasForeignKey(d => d.GateGuid)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductNetNodes)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductNetNodes)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");
            });

            modelBuilder.Entity<ProductNetNodeStep>(entity =>
            {
                entity.HasKey(e => e.ProductNetNodeStepId)
                    .HasName("pk_product_net_node_step");

                entity.ToTable("ro_product_net_node_step");

                entity.HasAnnotation("Relational:Comment", "Таблица логов изменений статусов гейтов продуктов");

                entity.Property(e => e.ProductNetNodeStepId)
                    .HasColumnName("product_net_node_step_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время смены шага");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductNetNodeSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step_id");

                entity.HasOne(d => d.ProductNetNode)
                    .WithMany(p => p.ProductNetNodeSteps)
                    .HasForeignKey(d => new { d.ProductId, d.GateId })
                    .HasConstraintName("fk_product_net_node_id");
            });

            modelBuilder.Entity<ProductNotice>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product_notice");

                entity.ToTable("ro_product_notice");

                entity.HasAnnotation("Relational:Comment", "Таблица периодов времени уведомлений для абонентов");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.BeginTime)
                    .HasColumnName("begin_time")
                    .HasComment("Время начала уведомлений");

                entity.Property(e => e.EndTime)
                    .HasColumnName("end_time")
                    .HasComment("Время завершения уведомлений");

                entity.Property(e => e.TimeOffset)
                    .HasColumnName("time_offset")
                    .HasComment("Смещение времени");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.ProductNotice)
                    .HasForeignKey<ProductNotice>(d => d.ProductId)
                    .HasConstraintName("fk_product_notice");
            });

            modelBuilder.Entity<ProductPassportChecking>(entity =>
            {
                entity.HasKey(e => e.PassportCheckingId)
                    .HasName("pk_product_passport_checking");

                entity.ToTable("ro_product_passport_checking");

                entity.HasAnnotation("Relational:Comment", "Таблица проверки данных паспорта для продуктов");

                entity.HasIndex(e => e.PassportDataTypeId, "product_passport_checking_passport_data_type_id_idx");

                entity.HasIndex(e => e.ProductCheckingId, "product_passport_checking_product_checking_id_idx");

                entity.Property(e => e.PassportCheckingId)
                    .HasColumnName("passport_checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEquals)
                    .HasColumnName("is_equals")
                    .HasComment("Данные совпадают");

                entity.Property(e => e.PassportDataFromProduct)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_product")
                    .HasComment("Данные паспорта из продукта");

                entity.Property(e => e.PassportDataFromScan)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_scan")
                    .HasComment("Данные паспорта со скана");

                entity.Property(e => e.PassportDataTypeId)
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Тип данных паспорта");

                entity.Property(e => e.ProductCheckingId)
                    .HasColumnName("product_checking_id")
                    .HasComment("Проверка скана паспорта");

                entity.HasOne(d => d.PassportDataType)
                    .WithMany(p => p.ProductPassportCheckings)
                    .HasForeignKey(d => d.PassportDataTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_data_type");

                entity.HasOne(d => d.ProductChecking)
                    .WithMany(p => p.ProductPassportCheckings)
                    .HasForeignKey(d => d.ProductCheckingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_checking");
            });

            modelBuilder.Entity<ProductPerson>(entity =>
            {
                entity.HasKey(e => e.ProductPersonId)
                    .HasName("pk_product_person");

                entity.ToTable("ro_product_person");

                entity.HasAnnotation("Relational:Comment", "Таблица сотрудников продукта");

                entity.HasIndex(e => e.AbonentPersonId, "product_person_abonent_person_id_idx");

                entity.HasIndex(e => e.DssUserId, "product_person_dss_user_id_idx");

                entity.HasIndex(e => e.KeyId, "product_person_key_id_idx");

                entity.HasIndex(e => e.ProductId, "product_person_product_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "product_person_product_type_id_idx");

                entity.HasIndex(e => e.RegFileTypeId, "product_person_reg_file_type_id_idx");

                entity.HasIndex(e => e.ReserveKeyId, "product_person_reserve_key_id_idx");

                entity.HasIndex(e => e.SignQualificationId, "product_person_sign_qualification_id_idx");

                entity.HasIndex(e => e.StepId, "product_person_step_id_idx");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentPersonId)
                    .HasColumnName("abonent_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Идентификатор пользователя DSS в БД");

                entity.Property(e => e.Encrypt)
                    .HasColumnName("encrypt")
                    .HasComment("Шифровальщик");

                entity.Property(e => e.IonOnline)
                    .HasColumnName("ion_online")
                    .HasComment("Онлайн");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Сотрудник имеет роль Администратор");

                entity.Property(e => e.IsTrusted)
                    .HasColumnName("is_trusted")
                    .HasComment("Это доверенное лицо");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductPersonGuid)
                    .HasColumnName("product_person_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("ГУИД владельца ЭЦП");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RegFileTypeId)
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Тип рег-файла");

                entity.Property(e => e.ReserveKeyId)
                    .HasColumnName("reserve_key_id")
                    .HasComment("Резервный ключ");

                entity.Property(e => e.SignQualificationId)
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Квалификация подписи");

                entity.Property(e => e.Signer)
                    .HasColumnName("signer")
                    .HasComment("Подписант");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.AbonentPerson)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.AbonentPersonId)
                    .HasConstraintName("fk_abonent_person");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_user_id");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.ProductPersonKeys)
                    .HasForeignKey(d => d.KeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.RegFileType)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.RegFileTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_file_type");

                entity.HasOne(d => d.ReserveKey)
                    .WithMany(p => p.ProductPersonReserveKeys)
                    .HasForeignKey(d => d.ReserveKeyId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reserve_key");

                entity.HasOne(d => d.SignQualification)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.SignQualificationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sign_qualification");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductPeople)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Ekus)
                    .WithMany(p => p.ProductPeople)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoProductPersonEku",
                        l => l.HasOne<Eku>().WithMany().HasForeignKey("EkuId").HasConstraintName("fk_eku"),
                        r => r.HasOne<ProductPerson>().WithMany().HasForeignKey("ProductPersonId").HasConstraintName("fk_product_person"),
                        j =>
                        {
                            j.HasKey("ProductPersonId", "EkuId").HasName("pk_product_person_eku");

                            j.ToTable("ro_product_person_eku").HasAnnotation("Relational:Comment", "Таблица расширений сертификата сотрудника продукта");

                            j.HasIndex(new[] { "EkuId" }, "product_person_eku_eku_id_idx");

                            j.HasIndex(new[] { "ProductPersonId" }, "product_person_eku_product_person_id_idx");

                            j.IndexerProperty<int>("ProductPersonId").HasColumnName("product_person_id").HasComment("Сотрудник");

                            j.IndexerProperty<int>("EkuId").HasColumnName("eku_id").HasComment("Расширение");
                        });
            });

            modelBuilder.Entity<ProductPersonAvailableProtocol>(entity =>
            {
                entity.HasKey(e => e.ProductPersonAvailableProtocolId)
                    .HasName("ro_product_person_available_protocol_pkey");

                entity.ToTable("ro_product_person_available_protocol");

                entity.Property(e => e.ProductPersonAvailableProtocolId)
                    .HasColumnName("product_person_available_protocol_id")
                    .HasDefaultValueSql("nextval('ro_product_person_available_p_product_person_available_prot_seq'::regclass)");

                entity.Property(e => e.IsEncryptor).HasColumnName("is_encryptor");

                entity.Property(e => e.ProductPersonId).HasColumnName("product_person_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductPersonAvailableProtocols)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("ro_product_person_available_protocol_product_person_id_fkey");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.ProductPersonAvailableProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_product_person_available_protocol_protocol_id_fkey");
            });

            modelBuilder.Entity<ProductPersonHistory>(entity =>
            {
                entity.HasKey(e => e.ProductPersonHistoryId)
                    .HasName("ro_product_person_history_pkey");

                entity.ToTable("ro_product_person_history");

                entity.Property(e => e.ProductPersonHistoryId).HasColumnName("product_person_history_id");

                entity.Property(e => e.ActionTime)
                    .HasPrecision(0)
                    .HasColumnName("action_time")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.ActionTypeId).HasColumnName("action_type_id");

                entity.Property(e => e.ProductPersonId).HasColumnName("product_person_id");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.SourceId).HasColumnName("source_id");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.ActionType)
                    .WithMany(p => p.ProductPersonHistories)
                    .HasForeignKey(d => d.ActionTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_product_person_history_action_type_id_fkey");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductPersonHistories)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("ro_product_person_history_product_person_id_fkey");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.ProductPersonHistories)
                    .HasForeignKey(d => d.RegRequestId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_product_person_history_reg_request_id_fkey");

                entity.HasOne(d => d.Source)
                    .WithMany(p => p.ProductPersonHistories)
                    .HasForeignKey(d => d.SourceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_product_person_history_source_id_fkey");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductPersonHistories)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_product_person_history_user_id_fkey");
            });

            modelBuilder.Entity<ProductPersonHistoryActionType>(entity =>
            {
                entity.HasKey(e => e.ActionTypeId)
                    .HasName("ro_product_person_history_action_type_pkey");

                entity.ToTable("ro_product_person_history_action_type");

                entity.Property(e => e.ActionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("action_type_id");

                entity.Property(e => e.ActionName)
                    .IsRequired()
                    .HasColumnName("action_name");
            });

            modelBuilder.Entity<ProductPersonHistorySourceType>(entity =>
            {
                entity.HasKey(e => e.SourceTypeId)
                    .HasName("ro_product_person_history_source_type_pkey");

                entity.ToTable("ro_product_person_history_source_type");

                entity.Property(e => e.SourceTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("source_type_id");

                entity.Property(e => e.SourceName)
                    .IsRequired()
                    .HasColumnName("source_name");
            });

            modelBuilder.Entity<ProductPersonKey>(entity =>
            {
                entity.HasKey(e => e.PersonKeyId)
                    .HasName("pk_product_person_key");

                entity.ToTable("ro_product_person_key");

                entity.HasAnnotation("Relational:Comment", "Таблица ключей сотрудников продукта");

                entity.HasIndex(e => e.KeyId, "product_person_key_key_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "product_person_key_product_person_id_idx");

                entity.HasIndex(e => new { e.ProductPersonId, e.KeyId }, "sk_product_person_key")
                    .IsUnique();

                entity.Property(e => e.PersonKeyId)
                    .HasColumnName("person_key_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DssUserId)
                    .HasColumnName("dss_user_id")
                    .HasComment("Пользователь DSS");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Ключ");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.Reserve)
                    .HasColumnName("reserve")
                    .HasComment("Флаг резервного ключа");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг ключа");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.ProductPersonKeys)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_dss_user_id");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.ProductPersonKeysNavigation)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductPersonKeys)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductPersonKeys)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.ProductPersonKeys)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type_id");
            });

            modelBuilder.Entity<ProductPersonKeyStep>(entity =>
            {
                entity.HasKey(e => e.PersonKeyStepId)
                    .HasName("ro_product_person_key_step_pkey");

                entity.ToTable("ro_product_person_key_step");

                entity.HasAnnotation("Relational:Comment", "Таблица истории шагов для таблицы истории ключей");

                entity.HasIndex(e => e.LogTime, "product_person_key_step_log_time_idx");

                entity.HasIndex(e => e.PersonKeyId, "product_person_key_step_person_key_idx");

                entity.HasIndex(e => e.StepId, "product_person_key_step_step_idx");

                entity.Property(e => e.PersonKeyStepId)
                    .HasColumnName("person_key_step_id")
                    .HasComment("Первичный ключ");

                entity.Property(e => e.LogTime)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время записи");

                entity.Property(e => e.PersonKeyId)
                    .HasColumnName("person_key_id")
                    .HasComment("Идентификатор в таблице истории ключей");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Шаг");

                entity.HasOne(d => d.PersonKey)
                    .WithMany(p => p.ProductPersonKeySteps)
                    .HasForeignKey(d => d.PersonKeyId)
                    .HasConstraintName("fk_person_key");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductPersonKeySteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<ProductPersonStep>(entity =>
            {
                entity.HasKey(e => new { e.ProductPersonId, e.StepId, e.LogTime })
                    .HasName("pk_product_person_step");

                entity.ToTable("ro_product_person_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний сотрудников продуктов");

                entity.HasIndex(e => e.ProductPersonId, "product_person_step_product_person_id_idx");

                entity.HasIndex(e => e.StepId, "product_person_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_person_step_user_id_idx");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.ProductPersonSteps)
                    .HasForeignKey(d => d.ProductPersonId)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductPersonSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductPersonSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductPotentialMember>(entity =>
            {
                entity.HasKey(e => e.ProductPotentialMemberId)
                    .HasName("pk_product_potential_member");

                entity.ToTable("ro_product_potential_member");

                entity.HasAnnotation("Relational:Comment", "Таблица потенциальных пользователей в продукте");

                entity.HasIndex(e => new { e.ProductId, e.Snils }, "sk_product_potential_member_product_id_snils")
                    .IsUnique();

                entity.Property(e => e.ProductPotentialMemberId)
                    .HasColumnName("product_potential_member_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. адрес");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Признак администратора");

                entity.Property(e => e.NotificationTime)
                    .HasPrecision(0)
                    .HasColumnName("notification_time")
                    .HasComment("Время отправки уведомления");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.Snils)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductPotentialMembers)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<ProductPotentialMemberProtocol>(entity =>
            {
                entity.HasKey(e => e.ProductPotentialMemberProtocolId)
                    .HasName("pk_product_potential_member_protocol");

                entity.ToTable("ro_product_potential_member_protocol");

                entity.HasAnnotation("Relational:Comment", "Таблица потенциальных направлений для пользователей в продукте");

                entity.Property(e => e.ProductPotentialMemberProtocolId)
                    .HasColumnName("product_potential_member_protocol_id")
                    .HasDefaultValueSql("nextval('ro_product_potential_member_p_product_potential_member_prot_seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEncryptor)
                    .HasColumnName("is_encryptor")
                    .HasComment("Признак шифровальщика");

                entity.Property(e => e.ProductPotentialMemberId)
                    .HasColumnName("product_potential_member_id")
                    .HasComment("Потенциальный пользователь");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.HasOne(d => d.ProductPotentialMember)
                    .WithMany(p => p.ProductPotentialMemberProtocols)
                    .HasForeignKey(d => d.ProductPotentialMemberId)
                    .HasConstraintName("fk_product_potential_member");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.ProductPotentialMemberProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");
            });

            modelBuilder.Entity<ProductSkrinInfo>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("pk_product_skrin_info");

                entity.ToTable("ro_product_skrin_info");

                entity.HasAnnotation("Relational:Comment", "Данные для доступа к astraladmin.skrin.ru");

                entity.Property(e => e.ProductId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.Product)
                    .WithOne(p => p.ProductSkrinInfo)
                    .HasForeignKey<ProductSkrinInfo>(d => d.ProductId)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<ProductStep>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.StepId, e.LogTime })
                    .HasName("pk_product_step");

                entity.ToTable("ro_product_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний продуктов");

                entity.HasIndex(e => e.ProductId, "product_step_product_id_idx");

                entity.HasIndex(e => e.StepId, "product_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "product_step_user_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(6)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductSteps)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.ProductSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductTransferLog>(entity =>
            {
                entity.HasKey(e => e.ProductTransferId)
                    .HasName("pk_product_transfer_log");

                entity.ToTable("ro_product_transfer_log");

                entity.HasAnnotation("Relational:Comment", "Таблица логирования переноса продуктов");

                entity.HasIndex(e => e.OfficeId, "product_transfer_log_office_id_idx");

                entity.HasIndex(e => e.PreviousOfficeId, "product_transfer_log_previous_office_id_idx");

                entity.HasIndex(e => e.ProductId, "product_transfer_log_product_id_idx");

                entity.HasIndex(e => e.UserId, "product_transfer_log_user_id_idx");

                entity.Property(e => e.ProductTransferId)
                    .HasColumnName("product_transfer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PreviousOfficeId)
                    .HasColumnName("previous_office_id")
                    .HasComment("Предыдущий офис");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.ProductTransferLogOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PreviousOffice)
                    .WithMany(p => p.ProductTransferLogPreviousOffices)
                    .HasForeignKey(d => d.PreviousOfficeId)
                    .HasConstraintName("fk_previous_office");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductTransferLogs)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ProductTransferLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ProductType>(entity =>
            {
                entity.HasKey(e => e.ProductTypeId)
                    .HasName("pk_product_type");

                entity.ToTable("ro_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов продуктов");

                entity.HasIndex(e => e.CodeName, "sk_code_name")
                    .IsUnique();

                entity.HasIndex(e => e.ProductTypeGuid, "sk_product_type_guid")
                    .IsUnique();

                entity.HasIndex(e => e.ProductTypeName, "sk_product_type_name")
                    .IsUnique();

                entity.Property(e => e.ProductTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("product_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CodeName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("code_name")
                    .HasComment("Кодовое имя");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProductTypeGuid)
                    .HasColumnName("product_type_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.ProductTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ProlongationShortDataSummary>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_prolongation_short_data_summary");

                entity.Property(e => e.DisabledDispatchCount)
                    .HasColumnName("disabled_dispatch_count")
                    .HasComment("Отключена проверка отправок");

                entity.Property(e => e.Expired)
                    .HasColumnName("expired")
                    .HasComment("Просрочено");

                entity.Property(e => e.ExpiredInNextMonth)
                    .HasColumnName("expired_in_next_month")
                    .HasComment("Заканчивается в следующем месяце");

                entity.Property(e => e.ExpiredInThisMonth)
                    .HasColumnName("expired_in_this_month")
                    .HasComment("Заканчивается в этом месяце");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Идентификатор офиса");

                entity.Property(e => e.ProlongateImmediate)
                    .HasColumnName("prolongate_immediate")
                    .HasComment("Срочное продление");

                entity.Property(e => e.RiskGroup)
                    .HasColumnName("risk_group")
                    .HasComment("Группа риска");

                entity.Property(e => e.SummaryId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("summary_id")
                    .HasComment("Идентификатор статистики по партенрам");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.OfficeId)
                //    .OnDelete(DeleteBehavior.Restrict)
                //    .HasConstraintName("ro_prolongation_short_data_summary_fk");
            });

            modelBuilder.Entity<ProlongationShortDatum>(entity =>
            {
                entity.HasKey(e => e.ProlongationId)
                    .HasName("ro_prolongation_short_data_pkey");

                entity.ToTable("ro_prolongation_short_data");

                entity.HasAnnotation("Relational:Comment", "Таблица для вкладки \"Работа с продлениями\"");

                entity.HasIndex(e => e.CertificateInitialDate, "certificate_initial_date_idx");

                entity.HasIndex(e => e.AbonentId, "prolongation_short_data_abonent_id_idx");

                entity.HasIndex(e => e.CertificateEndDate, "prolongation_short_data_certificate_end_date_idx");

                entity.HasIndex(e => e.ContractId, "prolongation_short_data_contract_id_idx");

                entity.HasIndex(e => new { e.ContractId, e.ProductId }, "prolongation_short_data_contract_product_idx")
                    .IsUnique();

                entity.HasIndex(e => e.ProductId, "prolongation_short_data_product_idx");

                entity.HasIndex(e => e.TariffEndDate, "prolongation_short_data_tariff_end_date_idx");

                entity.HasIndex(e => e.TariffInitialDate, "tariff_initial_date_idx");

                entity.Property(e => e.ProlongationId)
                    .HasColumnName("prolongation_id")
                    .HasComment("Идентификатор продления");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Идентификатор абонента");

                entity.Property(e => e.CertificateEndDate)
                    .HasColumnName("certificate_end_date")
                    .HasComment("Дата окончания сертификата");

                entity.Property(e => e.CertificateInitialDate)
                    .HasColumnName("certificate_initial_date")
                    .HasComment("Дата начала сертификата");

                entity.Property(e => e.Comment)
                    .HasColumnType("character varying")
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.ContractId)
                    .HasColumnName("contract_id")
                    .HasComment("Идентификатор договора");

                entity.Property(e => e.IgnoreDispatch)
                    .HasColumnName("ignore_dispatch")
                    .HasComment("Флаг определяет необходимость проверки наличия отправок абонента");

                entity.Property(e => e.NoDispatch)
                    .HasColumnName("no_dispatch")
                    .HasComment("Флаг определяет факт отсутствия отправок в ФНС/ПФР при наличии соответсвующих направлений");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.ReasonId)
                    .HasColumnName("reason_id")
                    .HasComment("Причина непродления абонента");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.TariffEndDate)
                    .HasColumnName("tariff_end_date")
                    .HasComment("Дата окончания тарифа");

                entity.Property(e => e.TariffInitialDate)
                    .HasColumnName("tariff_initial_date")
                    .HasComment("Дата начала тарифа");

                entity.Property(e => e.TotalSum)
                    .HasColumnName("total_sum")
                    .HasComment("Общая стоимость");

                entity.Property(e => e.TransferDate)
                    .HasColumnName("transfer_date")
                    .HasComment("Дата переноса");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.ProlongationShortData)
                    .HasForeignKey(d => d.AbonentId)
                    .HasConstraintName("ro_prolongation_short_data_abonent_fk");

                entity.HasOne(d => d.Contract)
                    .WithMany(p => p.ProlongationShortData)
                    .HasForeignKey(d => d.ContractId)
                    .HasConstraintName("ro_prolongation_short_data_contract_fk");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProlongationShortData)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("ro_prolongation_short_data_product_fk");
            });

            modelBuilder.Entity<PromotionType>(entity =>
            {
                entity.HasKey(e => e.PromotionTypeId)
                    .HasName("pk_promotion_type");

                entity.ToTable("ro_promotion_type");

                entity.HasAnnotation("Relational:Comment", "Таблица с типами рекламных акций");

                entity.HasIndex(e => e.PromotionTypeName, "sk_promotion_type_name")
                    .IsUnique();

                entity.Property(e => e.PromotionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("promotion_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PromotionTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("promotion_type_name")
                    .HasComment("Имя акции");
            });

            modelBuilder.Entity<PropDict>(entity =>
            {
                entity.HasKey(e => new { e.PropTypeId, e.PropValue })
                    .HasName("pk_prop_dict");

                entity.ToTable("ro_prop_dict");

                entity.HasAnnotation("Relational:Comment", "Таблица со словарем реквизитов");

                entity.HasIndex(e => e.PropTypeId, "prop_dict_prop_type_id_idx");

                entity.Property(e => e.PropTypeId)
                    .HasColumnName("prop_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.PropValue)
                    .HasColumnType("character varying")
                    .HasColumnName("prop_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.PropType)
                    .WithMany(p => p.PropDicts)
                    .HasForeignKey(d => d.PropTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_prop_type");
            });

            modelBuilder.Entity<PropType>(entity =>
            {
                entity.HasKey(e => e.PropTypeId)
                    .HasName("pk_prop_type");

                entity.ToTable("ro_prop_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов реквизитов");

                entity.HasIndex(e => e.PropTypeName, "sk_prop_type")
                    .IsUnique();

                entity.Property(e => e.PropTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("prop_type_id")
                    .HasComment("Код");

                entity.Property(e => e.PropTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("prop_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ProtectionClass>(entity =>
            {
                entity.HasKey(e => e.ProtectionClassId)
                    .HasName("pk_protection_class");

                entity.ToTable("ro_protection_class");

                entity.HasAnnotation("Relational:Comment", "Таблица классов защиты");

                entity.HasIndex(e => e.ProtectionClassName, "sk_protection_class_name")
                    .IsUnique();

                entity.Property(e => e.ProtectionClassId)
                    .ValueGeneratedNever()
                    .HasColumnName("protection_class_id")
                    .HasComment("Код");

                entity.Property(e => e.PolicyOid)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("policy_oid")
                    .HasComment("Объектный идентификатор");

                entity.Property(e => e.ProtectionClassName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("protection_class_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Protocol>(entity =>
            {
                entity.HasKey(e => e.ProtocolId)
                    .HasName("pk_protocol");

                entity.ToTable("ro_protocol");

                entity.HasAnnotation("Relational:Comment", "Таблица протоколов");

                entity.HasIndex(e => e.ProtocolName, "sk_protocol_name")
                    .IsUnique();

                entity.Property(e => e.ProtocolId)
                    .ValueGeneratedNever()
                    .HasColumnName("protocol_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProtocolAlias)
                    .HasMaxLength(40)
                    .HasColumnName("protocol_alias")
                    .HasComment("Псевдоним");

                entity.Property(e => e.ProtocolName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("protocol_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Provider>(entity =>
            {
                entity.HasKey(e => e.ProviderId)
                    .HasName("pk_provider");

                entity.ToTable("ro_provider");

                entity.HasAnnotation("Relational:Comment", "Таблица криптопровайдеров");

                entity.HasIndex(e => e.ProviderName, "sk_provider_name")
                    .IsUnique();

                entity.Property(e => e.ProviderId)
                    .ValueGeneratedNever()
                    .HasColumnName("provider_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ProviderName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("provider_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ProviderType)
                    .HasColumnName("provider_type")
                    .HasComment("Тип");

                entity.Property(e => e.SignTool)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("sign_tool")
                    .HasComment("Средство ЭП");
            });

            modelBuilder.Entity<ProxyAgent>(entity =>
            {
                entity.HasKey(e => e.ProxyAgentId)
                    .HasName("pk_proxy_agent");

                entity.ToTable("ro_proxy_agent");

                entity.HasAnnotation("Relational:Comment", "Таблица уполномоченных представителей");

                entity.HasIndex(e => e.AbonentId, "proxy_agent_abonent_id_idx");

                entity.HasIndex(e => e.OfficeId, "proxy_agent_office_id_idx");

                entity.HasIndex(e => e.ProductId, "proxy_agent_product_id_idx");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentId)
                    .HasColumnName("abonent_id")
                    .HasComment("Организация");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProxyAgentName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("proxy_agent_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.ProxyAgents)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.ProxyAgents)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProxyAgents)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<PurchaseType>(entity =>
            {
                entity.HasKey(e => e.PurchaseTypeId)
                    .HasName("ro_purchase_type_pkey");

                entity.ToTable("ro_purchase_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов закупок");

                entity.Property(e => e.PurchaseTypeId)
                    .HasColumnName("purchase_type_id")
                    .HasComment("Идентификатор типа закупки");

                entity.Property(e => e.PurchaseTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("purchase_type_name")
                    .HasComment("Наименование типа закупки");
            });

            modelBuilder.Entity<Ra>(entity =>
            {
                entity.HasKey(e => e.RaId)
                    .HasName("pk_ra");

                entity.ToTable("ro_ra");

                entity.HasAnnotation("Relational:Comment", "Таблица центров регистрации");

                entity.HasIndex(e => e.CaId, "ra_ca_id_idx");

                entity.HasIndex(e => e.StepId, "ra_step_id_idx");

                entity.Property(e => e.RaId)
                    .HasColumnName("ra_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Центр сертификации");

                entity.Property(e => e.FileMask)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("file_mask")
                    .HasComment("Маска имени файла c {id}");

                entity.Property(e => e.Host)
                    .HasMaxLength(100)
                    .HasColumnName("host")
                    .HasComment("Адрес");

                entity.Property(e => e.LastSending)
                    .HasPrecision(0)
                    .HasColumnName("last_sending")
                    .HasComment("Время последней отправки");

                entity.Property(e => e.Port)
                    .HasColumnName("port")
                    .HasComment("Порт");

                entity.Property(e => e.RaName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("ra_name")
                    .HasComment("Наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasDefaultValueSql("5")
                    .HasComment("Состояние");

                entity.Property(e => e.Wmail)
                    .IsRequired()
                    .HasColumnName("wmail")
                    .HasDefaultValueSql("true")
                    .HasComment("Флаг деловой почты");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.Ras)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Ras)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RaStep>(entity =>
            {
                entity.HasKey(e => new { e.RaId, e.StepId, e.LogTime })
                    .HasName("pk_ra_step");

                entity.ToTable("ro_ra_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний центров регистрации");

                entity.HasIndex(e => e.RaId, "ra_step_ra_id_idx");

                entity.HasIndex(e => e.StepId, "ra_step_step_id_idx");

                entity.Property(e => e.RaId)
                    .HasColumnName("ra_id")
                    .HasComment("Центр регистрации");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Ra)
                    .WithMany(p => p.RaSteps)
                    .HasForeignKey(d => d.RaId)
                    .HasConstraintName("fk_ra");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RaSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<RatingView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_rating_view");

                entity.Property(e => e.Abonentscount).HasColumnName("abonentscount");

                entity.Property(e => e.Partnerid).HasColumnName("partnerid");

                entity.Property(e => e.Partnername)
                    .HasColumnType("character varying")
                    .HasColumnName("partnername");
            });

            modelBuilder.Entity<Recipient>(entity =>
            {
                entity.HasKey(e => e.RecipientId)
                    .HasName("pk_recipient");

                entity.ToTable("ro_recipient");

                entity.HasAnnotation("Relational:Comment", "Таблица получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_certificate_id_idx");

                entity.HasIndex(e => e.ProtocolId, "recipient_protocol_id_idx");

                entity.HasIndex(e => e.RecipientUpdaterId, "recipient_recipient_updater_id_idx");

                entity.HasIndex(e => e.RegionId, "recipient_region_id_idx");

                entity.HasIndex(e => e.VipnetNodeId, "recipient_vipnet_node_id_idx");

                entity.HasIndex(e => e.RecipientGuid, "sk_recipient_guid")
                    .IsUnique();

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ChangeName)
                    .IsRequired()
                    .HasColumnName("change_name")
                    .HasDefaultValueSql("true")
                    .HasComment("Именение наименования");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MailBox)
                    .HasMaxLength(50)
                    .HasColumnName("mail_box")
                    .HasComment("Эл. почта");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientGuid)
                    .HasColumnName("recipient_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.RecipientName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Обновление");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Recipients)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.Recipients)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RecipientUpdater)
                    .WithMany(p => p.Recipients)
                    .HasForeignKey(d => d.RecipientUpdaterId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_recipient_updater");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.Recipients)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.Recipients)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<RecipientCertificate>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.CertificateId, e.LogTime })
                    .HasName("pk_recipient_certificate");

                entity.ToTable("ro_recipient_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_certificate_certificate_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_certificate_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RecipientCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RecipientCertificates)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RecipientDuplicate>(entity =>
            {
                entity.HasKey(e => e.DuplicateGuid)
                    .HasName("pk_recipient_duplicate");

                entity.ToTable("ro_recipient_duplicate");

                entity.HasAnnotation("Relational:Comment", "Таблица дублированных получателей");

                entity.HasIndex(e => e.RecipientId, "recipient_duplicate_recipient_id_idx");

                entity.Property(e => e.DuplicateGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("duplicate_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RecipientDuplicates)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RecipientUnit>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.Index })
                    .HasName("pk_recipient_unit");

                entity.ToTable("ro_recipient_unit");

                entity.HasAnnotation("Relational:Comment", "Таблица рабочих сертификатов получателей");

                entity.HasIndex(e => e.CertificateId, "recipient_unit_certificate_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_unit_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.RecipientUnits)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RecipientUnits)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RecipientUnitUpdater>(entity =>
            {
                entity.HasKey(e => e.RecipientUnitUpdaterId)
                    .HasName("pk_recipient_unit_updater");

                entity.ToTable("ro_recipient_unit_updater");

                entity.HasAnnotation("Relational:Comment", "Таблица обновления рабочих сертификатов получателей");

                entity.HasIndex(e => e.CertId, "recipient_unit_updater_cert_id_idx");

                entity.HasIndex(e => e.RecipientUpdaterId, "recipient_unit_updater_recipient_updater_id_idx");

                entity.Property(e => e.RecipientUnitUpdaterId)
                    .HasColumnName("recipient_unit_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.Index).HasColumnName("index");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Получатель");

                entity.HasOne(d => d.RecipientUpdater)
                    .WithMany(p => p.RecipientUnitUpdaters)
                    .HasForeignKey(d => d.RecipientUpdaterId)
                    .HasConstraintName("fk_recipient_updater");
            });

            modelBuilder.Entity<RecipientUpdater>(entity =>
            {
                entity.HasKey(e => e.RecipientUpdaterId)
                    .HasName("pk_recipient_updater");

                entity.ToTable("ro_recipient_updater");

                entity.HasAnnotation("Relational:Comment", "Таблица обновления получателей");

                entity.HasIndex(e => e.CertId, "recipient_updater_cert_id_idx");

                entity.HasIndex(e => e.OfficeId, "recipient_updater_office_id_idx");

                entity.HasIndex(e => e.ProtocolId, "recipient_updater_protocol_id_idx");

                entity.HasIndex(e => e.RecipientId, "recipient_updater_recipient_id_idx");

                entity.HasIndex(e => e.RegionId, "recipient_updater_region_id_idx");

                entity.HasIndex(e => e.UserId, "recipient_updater_user_id_idx");

                entity.HasIndex(e => e.VipnetNodeId, "recipient_updater_vipnet_node_id_idx");

                entity.Property(e => e.RecipientUpdaterId)
                    .HasColumnName("recipient_updater_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplyDate)
                    .HasPrecision(0)
                    .HasColumnName("apply_date")
                    .HasComment("Дата применения");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasComment("Дата подтверждения");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.MailBox)
                    .HasMaxLength(50)
                    .HasColumnName("mail_box")
                    .HasComment("Эл. почта");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasComment("Код");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.RecipientName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("recipient_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Регион");

                entity.Property(e => e.TurnOff)
                    .HasColumnName("turn_off")
                    .HasComment("Флаг отключения");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("СУ");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.RegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_region");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.RecipientUpdaters)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<Reflex>(entity =>
            {
                entity.HasKey(e => e.ReflexId)
                    .HasName("pk_reflex");

                entity.ToTable("ro_reflex");

                entity.HasAnnotation("Relational:Comment", "Таблица отражений БД на серверах");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DatabaseName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("database_name")
                    .HasComment("Имя БД");

                entity.Property(e => e.Host)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("host")
                    .HasComment("Адрес");

                entity.Property(e => e.IsTest)
                    .HasColumnName("is_test")
                    .HasDefaultValueSql("false")
                    .HasComment("Тестовое");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.Port)
                    .HasColumnName("port")
                    .HasDefaultValueSql("5432")
                    .HasComment("Порт");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("username")
                    .HasComment("Имя пользователя");
            });

            modelBuilder.Entity<ReflexMessenger>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.MessengerId })
                    .HasName("pk_reflex_messenger");

                entity.ToTable("ro_reflex_messenger");

                entity.HasAnnotation("Relational:Comment", "Таблица отражений для типа продукта");

                entity.HasIndex(e => e.MessengerId, "reflex_messenger_messenger_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_messenger_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_messenger_reflex_type_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.ReflexMessengers)
                    .HasForeignKey(d => d.MessengerId)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.ReflexMessengers)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexMessengers)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<ReflexProduct>(entity =>
            {
                entity.HasKey(e => new { e.ProductId, e.ReflexId, e.ReflexTypeId })
                    .HasName("pk_reflex_product");

                entity.ToTable("ro_reflex_product");

                entity.HasAnnotation("Relational:Comment", "Таблица отражений для продукта");

                entity.HasIndex(e => e.ProductId, "reflex_product_product_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_product_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_product_reflex_type_id_idx");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("База");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип базы");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ReflexProducts)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.ReflexProducts)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexProducts)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<ReflexProductType>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.ProductTypeId })
                    .HasName("pk_reflex_product_type");

                entity.ToTable("ro_reflex_product_type");

                entity.HasAnnotation("Relational:Comment", "Таблица отражений для типа продукта");

                entity.HasIndex(e => e.ProductTypeId, "reflex_product_type_product_type_id_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_product_type_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_product_type_reflex_type_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.ReflexProductTypes)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.ReflexProductTypes)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexProductTypes)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");
            });

            modelBuilder.Entity<ReflexRule>(entity =>
            {
                entity.HasKey(e => e.ReflexRuleId)
                    .HasName("pk_reflex_rule");

                entity.ToTable("ro_reflex_rule");

                entity.HasAnnotation("Relational:Comment", "Таблица правил отражений");

                entity.HasIndex(e => e.MessengerId, "reflex_rule_messenger_id_idx");

                entity.HasIndex(e => e.OfficeId, "reflex_rule_office_idx");

                entity.HasIndex(e => e.ProductTypeId, "reflex_rule_product_type_idx");

                entity.HasIndex(e => e.ReflexId, "reflex_rule_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_rule_reflex_type_idx");

                entity.HasIndex(e => e.StorageTypeId, "reflex_rule_storage_type_idx");

                entity.Property(e => e.ReflexRuleId)
                    .HasColumnName("reflex_rule_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.MessengerId)
                    .HasColumnName("messenger_id")
                    .HasComment("Курьер");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.HasOne(d => d.Messenger)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.MessengerId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_messenger");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.ReflexRules)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_storage_type");
            });

            modelBuilder.Entity<ReflexType>(entity =>
            {
                entity.HasKey(e => e.ReflexTypeId)
                    .HasName("pk_reflex_type");

                entity.ToTable("ro_reflex_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов отражений");

                entity.HasIndex(e => e.ReflexTypeName, "sk_reflex_type_name")
                    .IsUnique();

                entity.Property(e => e.ReflexTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reflex_type_id")
                    .HasComment("Код");

                entity.Property(e => e.ReflexTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("reflex_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<ReflexTypeSystem>(entity =>
            {
                entity.HasKey(e => e.ReflexTypeSystemId)
                    .HasName("pk_reflex_type_system");

                entity.ToTable("ro_reflex_type_system");

                entity.HasAnnotation("Relational:Comment", "Таблица связи типов БД рефлекса с системами");

                entity.Property(e => e.ReflexTypeSystemId)
                    .HasColumnName("reflex_type_system_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип БД рефлекс");

                entity.Property(e => e.SystemId)
                    .HasColumnName("system_id")
                    .HasComment("Система");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexTypeSystems)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type_id");

                entity.HasOne(d => d.System)
                    .WithMany(p => p.ReflexTypeSystems)
                    .HasForeignKey(d => d.SystemId)
                    .HasConstraintName("fk_system_id");
            });

            modelBuilder.Entity<ReflexUseType>(entity =>
            {
                entity.HasKey(e => new { e.ReflexId, e.ReflexTypeId, e.UseTypeId })
                    .HasName("pk_reflex_use_type");

                entity.ToTable("ro_reflex_use_type");

                entity.HasAnnotation("Relational:Comment", "Таблица отражений для типа применения");

                entity.HasIndex(e => e.ReflexId, "reflex_use_type_reflex_id_idx");

                entity.HasIndex(e => e.ReflexTypeId, "reflex_use_type_reflex_type_id_idx");

                entity.HasIndex(e => e.UseTypeId, "reflex_use_type_use_type_id_idx");

                entity.Property(e => e.ReflexId)
                    .HasColumnName("reflex_id")
                    .HasComment("Отражение");

                entity.Property(e => e.ReflexTypeId)
                    .HasColumnName("reflex_type_id")
                    .HasComment("Тип отражения");

                entity.Property(e => e.UseTypeId)
                    .HasColumnName("use_type_id")
                    .HasComment("Тип применения");

                entity.HasOne(d => d.Reflex)
                    .WithMany(p => p.ReflexUseTypes)
                    .HasForeignKey(d => d.ReflexId)
                    .HasConstraintName("fk_reflex");

                entity.HasOne(d => d.ReflexType)
                    .WithMany(p => p.ReflexUseTypes)
                    .HasForeignKey(d => d.ReflexTypeId)
                    .HasConstraintName("fk_reflex_type");

                entity.HasOne(d => d.UseType)
                    .WithMany(p => p.ReflexUseTypes)
                    .HasForeignKey(d => d.UseTypeId)
                    .HasConstraintName("fk_use_type");
            });

            modelBuilder.Entity<RoRefreshToken>(entity =>
            {
                entity.HasKey(e => e.RefreshTokenId)
                    .HasName("pk_refresh_token");

                entity.ToTable("ro_refresh_token");

                entity.HasAnnotation("Relational:Comment", "Таблица токенов обновления");

                entity.HasIndex(e => e.RefreshToken, "refresh_token_refresh_token_idx");

                entity.HasIndex(e => e.UserId, "refresh_token_user_id_idx");

                entity.Property(e => e.RefreshTokenId)
                    .HasColumnName("refresh_token_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.ExpiresIn)
                    .HasPrecision(0)
                    .HasColumnName("expires_in")
                    .HasComment("Срок действия токена");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата блокировки");

                entity.Property(e => e.RefreshToken)
                    .IsRequired()
                    .HasMaxLength(44)
                    .HasColumnName("refresh_token")
                    .IsFixedLength()
                    .HasComment("Токен");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RefreshTokens)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegBankRequest>(entity =>
            {
                entity.HasKey(e => e.RegBankRequestId)
                    .HasName("pk_reg_bank_request");

                entity.ToTable("ro_reg_bank_request");

                entity.HasAnnotation("Relational:Comment", "Таблица регистрации запросов на получение банковской гарантии");

                entity.HasIndex(e => e.AbonentTypeId, "reg_bank_request_abonent_type_id_idx");

                entity.HasIndex(e => e.AddressId, "reg_bank_request_address_id_idx");

                entity.HasIndex(e => e.Inn, "reg_bank_request_inn_idx");

                entity.HasIndex(e => e.OfficeId, "reg_bank_request_office_id_idx");

                entity.HasIndex(e => e.RequestId, "reg_bank_request_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_bank_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_bank_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "reg_bank_request_workflow_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_reg_bank_request_workflow")
                    .IsUnique();

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.AddressId)
                    .HasColumnName("address_id")
                    .HasComment("Адрес");

                entity.Property(e => e.AuctionNumber)
                    .HasMaxLength(50)
                    .HasColumnName("auction_number")
                    .HasComment("Номер аукциона");

                entity.Property(e => e.BgEndDate)
                    .HasColumnName("bg_end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.BgInitialDate)
                    .HasColumnName("bg_initial_date")
                    .HasComment("Дата начала");

                entity.Property(e => e.BgPrice)
                    .HasPrecision(18, 2)
                    .HasColumnName("bg_price")
                    .HasComment("Цена");

                entity.Property(e => e.BgRequestId)
                    .HasColumnName("bg_request_id")
                    .HasComment("Идентификатор заявления");

                entity.Property(e => e.BgSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("bg_sum")
                    .HasComment("Сумма");

                entity.Property(e => e.BgUrl)
                    .HasColumnType("character varying")
                    .HasColumnName("bg_url")
                    .HasComment("Адрес");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Адрес эл. почты");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(100)
                    .HasColumnName("program_version")
                    .HasComment("Вресия клиента");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Данные");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RegBankRequests)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.RegBankRequests)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RegBankRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegBankRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegBankRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RegBankRequest)
                    .HasForeignKey<RegBankRequest>(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");

                entity.HasMany(d => d.Docs)
                    .WithMany(p => p.RegBankRequests)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRegBankRequestDoc",
                        l => l.HasOne<Doc>().WithMany().HasForeignKey("DocId").HasConstraintName("fk_doc"),
                        r => r.HasOne<RegBankRequest>().WithMany().HasForeignKey("RegBankRequestId").HasConstraintName("fk_reg_bank_request"),
                        j =>
                        {
                            j.HasKey("RegBankRequestId", "DocId").HasName("pk_reg_bank_request_doc");

                            j.ToTable("ro_reg_bank_request_doc").HasAnnotation("Relational:Comment", "Таблица приложений к заявлению на получение банковской гарантии");

                            j.HasIndex(new[] { "DocId" }, "reg_bank_request_doc_doc_id_idx");

                            j.HasIndex(new[] { "RegBankRequestId" }, "reg_bank_request_doc_reg_bank_request_id_idx");

                            j.IndexerProperty<int>("RegBankRequestId").HasColumnName("reg_bank_request_id").HasComment("Заявление");

                            j.IndexerProperty<int>("DocId").HasColumnName("doc_id").HasComment("Документ");
                        });
            });

            modelBuilder.Entity<RegBankRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegBankRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_bank_request_step");

                entity.ToTable("ro_reg_bank_request_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний регистраций запросов на получение банковской гарантии");

                entity.HasIndex(e => e.RegBankRequestId, "reg_bank_request_step_reg_bank_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_bank_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_bank_request_step_user_id_idx");

                entity.Property(e => e.RegBankRequestId)
                    .HasColumnName("reg_bank_request_id")
                    .HasComment("Запрос");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegBankRequest)
                    .WithMany(p => p.RegBankRequestSteps)
                    .HasForeignKey(d => d.RegBankRequestId)
                    .HasConstraintName("fk_reg_bank_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegBankRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegBankRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegCertRequest>(entity =>
            {
                entity.HasKey(e => e.RegCertRequestId)
                    .HasName("pk_reg_cert_request");

                entity.ToTable("ro_reg_cert_request");

                entity.HasAnnotation("Relational:Comment", "Таблица регистрации запросов на сертификаты");

                entity.HasIndex(e => e.CaId, "reg_cert_request_ca_id_idx");

                entity.HasIndex(e => e.CertRequestId, "reg_cert_request_cert_request_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "reg_cert_request_cert_template_id_idx");

                entity.HasIndex(e => e.CertificateId, "reg_cert_request_certificate_id_idx");

                entity.HasIndex(e => e.OfficeId, "reg_cert_request_office_id_idx");

                entity.HasIndex(e => e.RequestId, "reg_cert_request_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_cert_request_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_cert_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "reg_cert_request_workflow_id_idx");

                entity.HasIndex(e => e.CertRequestId, "sk_reg_cert_request")
                    .IsUnique();

                entity.HasIndex(e => e.CertificateId, "sk_reg_cert_request_certificate")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowId, "sk_reg_cert_request_workflow")
                    .IsUnique();

                entity.Property(e => e.RegCertRequestId)
                    .HasColumnName("reg_cert_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("УЦ");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PackId)
                    .HasMaxLength(36)
                    .HasColumnName("pack_id")
                    .HasComment("Идентификатор пакета");

                entity.Property(e => e.PublicKey)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasColumnName("public_key")
                    .HasComment("Открытый ключ");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RegCertRequests)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RegCertRequests)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.RegCertRequest)
                    .HasForeignKey<RegCertRequest>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RegCertRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegCertRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegCertRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RegCertRequest)
                    .HasForeignKey<RegCertRequest>(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RegCertRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegCertRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_cert_request_step");

                entity.ToTable("ro_reg_cert_request_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний регистраций запросов на сертификат");

                entity.HasIndex(e => e.RegCertRequestId, "reg_cert_request_reg_cert_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_cert_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_cert_request_step_user_id_idx");

                entity.Property(e => e.RegCertRequestId)
                    .HasColumnName("reg_cert_request_id")
                    .HasComment("Регистрация");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegCertRequest)
                    .WithMany(p => p.RegCertRequestSteps)
                    .HasForeignKey(d => d.RegCertRequestId)
                    .HasConstraintName("fk_reg_cert_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegCertRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegCertRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegFileType>(entity =>
            {
                entity.HasKey(e => e.RegFileTypeId)
                    .HasName("pk_reg_file_type");

                entity.ToTable("ro_reg_file_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов рег-файлов");

                entity.HasIndex(e => e.RegFileTypeName, "sk_reg_file_type_name")
                    .IsUnique();

                entity.Property(e => e.RegFileTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Код");

                entity.Property(e => e.RegFileTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("reg_file_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RegRequest>(entity =>
            {
                entity.HasKey(e => e.RegRequestId)
                    .HasName("pk_reg_request");

                entity.ToTable("ro_reg_request");

                entity.HasAnnotation("Relational:Comment", "Таблица запросов на регистрацию");

                entity.HasIndex(e => e.AbonentGuid, "reg_request_abonent_guid_idx");

                entity.HasIndex(e => e.AbonentTypeId, "reg_request_abonent_type_id_idx");

                entity.HasIndex(e => e.CategoryId, "reg_request_category_id_idx");

                entity.HasIndex(e => e.CenterId, "reg_request_center_id_idx");

                entity.HasIndex(e => e.CompanyGroup2Id, "reg_request_company_group_id_idx");

                entity.HasIndex(e => e.CreationTime, "reg_request_creation_time_idx");

                entity.HasIndex(e => e.IdentPointId, "reg_request_ident_point_id_idx");

                entity.HasIndex(e => e.Inn, "reg_request_inn_idx");

                entity.HasIndex(e => e.LocationAddressId, "reg_request_location_address_id_idx");

                entity.HasIndex(e => e.CompanyGroupId, "reg_request_main_abonent_id_idx");

                entity.HasIndex(e => e.OfficeId, "reg_request_office_id_idx");

                entity.HasIndex(e => e.OkopfId, "reg_request_okopf_id_idx");

                entity.HasIndex(e => e.PostalAddressId, "reg_request_postal_address_id_idx");

                entity.HasIndex(e => e.ProductId, "reg_request_product_id_idx");

                entity.HasIndex(e => e.ProductTypeId, "reg_request_product_type_id_idx");

                entity.HasIndex(e => e.ProxyAgentId, "reg_request_proxy_agent_id_idx");

                entity.HasIndex(e => e.RegRequestTypeId, "reg_request_reg_request_type_id_idx");

                entity.HasIndex(e => e.RegistrationNumberOld, "reg_request_registration_number_old_idx");

                entity.HasIndex(e => e.RequestId, "reg_request_request_id_idx");

                entity.HasIndex(e => e.ShortName, "reg_request_short_name_idx");

                entity.HasIndex(e => e.StepId, "reg_request_step_id_idx");

                entity.HasIndex(e => e.StorageTypeId, "reg_request_storage_type_id_idx");

                entity.HasIndex(e => e.TransferPointId, "reg_request_transfer_point_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_user_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_reg_request")
                    .IsUnique();

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentGuid)
                    .HasColumnName("abonent_guid")
                    .HasComment("ГУИД абонента");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.CategoryId)
                    .HasColumnName("category_id")
                    .HasComment("Категория");

                entity.Property(e => e.CenterId)
                    .HasColumnName("center_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.CompanyGroup2Id)
                    .HasColumnName("company_group2_id")
                    .HasComment("Группа компаний");

                entity.Property(e => e.CompanyGroupId)
                    .HasColumnName("company_group_id")
                    .HasComment("Главный абонент");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. адрес");

                entity.Property(e => e.EmplParentNo)
                    .HasMaxLength(5)
                    .HasColumnName("empl_parent_no")
                    .HasComment("Код подчиненности ФСС");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version")
                    .HasComment("Версия формата");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name")
                    .HasComment("Полное наименование");

                entity.Property(e => e.IdentPointId)
                    .HasColumnName("ident_point_id")
                    .HasComment("Точка идентификации");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.IsIts)
                    .HasColumnName("is_its")
                    .HasComment("Флаг ИТС");

                entity.Property(e => e.KpFss)
                    .HasMaxLength(4)
                    .HasColumnName("kp_fss")
                    .HasComment("Код подразделения ФСС");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.LkpBill)
                    .HasColumnName("lkp_bill")
                    .HasComment("Признак отправки запроса в модуль счетов ЛКП с целью создания заказа и автоматического формирования счета");

                entity.Property(e => e.LocationAddressId)
                    .HasColumnName("location_address_id")
                    .HasComment("Фактический адрес");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.Ogrn)
                    .HasMaxLength(15)
                    .HasColumnName("ogrn")
                    .HasComment("ОГРН");

                entity.Property(e => e.OkopfId)
                    .HasColumnName("okopf_id")
                    .HasComment("ОКОПФ");

                entity.Property(e => e.Okpo)
                    .HasMaxLength(14)
                    .HasColumnName("okpo")
                    .HasComment("ОКПО");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostalAddressId)
                    .HasColumnName("postal_address_id")
                    .HasComment("Почтовый адрес");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version")
                    .HasComment("Версия программы (конфигурации)");

                entity.Property(e => e.ProxyAgentId)
                    .HasColumnName("proxy_agent_id")
                    .HasComment("УП");

                entity.Property(e => e.RegRequestTypeId)
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number")
                    .HasComment("Рег. номер продукта");

                entity.Property(e => e.RegistrationNumberOld)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number_old")
                    .HasComment("Рег номер продукта до перехода на опции");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.RnsFss)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss")
                    .HasComment("Рег. номер ФСС");

                entity.Property(e => e.RnsFssSub)
                    .HasMaxLength(10)
                    .HasColumnName("rns_fss_sub")
                    .HasComment("Рег. номер ФСС обособленного подразделения");

                entity.Property(e => e.RnsPfr)
                    .HasMaxLength(14)
                    .HasColumnName("rns_pfr")
                    .HasComment("Рег. номер ПФР");

                entity.Property(e => e.ShortName)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnName("short_name")
                    .HasComment("Краткое наименование");

                entity.Property(e => e.SmsConfirmation)
                    .HasColumnName("sms_confirmation")
                    .HasComment("СМС подтверждение");

                entity.Property(e => e.StPfr)
                    .HasColumnName("st_pfr")
                    .HasComment("ИП работодатель");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.TransferPointId)
                    .HasColumnName("transfer_point_id")
                    .HasComment("Точка выдачи");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_category");

                entity.HasOne(d => d.Center)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.CenterId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_center");

                entity.HasOne(d => d.CompanyGroup2)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.CompanyGroup2Id)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_company_group");

                entity.HasOne(d => d.CompanyGroup)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.CompanyGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_main_abonent");

                entity.HasOne(d => d.IdentPoint)
                    .WithMany(p => p.RegRequestIdentPoints)
                    .HasForeignKey(d => d.IdentPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ident_point");

                entity.HasOne(d => d.LocationAddress)
                    .WithMany(p => p.RegRequestLocationAddresses)
                    .HasForeignKey(d => d.LocationAddressId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_location_address");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Okopf)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.OkopfId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_okopf");

                entity.HasOne(d => d.PostalAddress)
                    .WithMany(p => p.RegRequestPostalAddresses)
                    .HasForeignKey(d => d.PostalAddressId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_postal_address");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.ProxyAgent)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.ProxyAgentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_proxy_agent");

                entity.HasOne(d => d.RegRequestType)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.RegRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_type");

                entity.HasOne(d => d.Request)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.RequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.TransferPoint)
                    .WithMany(p => p.RegRequestTransferPoints)
                    .HasForeignKey(d => d.TransferPointId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_transfer_point");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RegRequest)
                    .HasForeignKey<RegRequest>(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<RegRequestAccount>(entity =>
            {
                entity.HasKey(e => e.AccountId)
                    .HasName("pk_reg_request_account");

                entity.ToTable("ro_reg_request_account");

                entity.HasAnnotation("Relational:Comment", "Таблица учетных записей заявления");

                entity.HasIndex(e => e.Login, "reg_request_account_login_idx");

                entity.HasIndex(e => e.PortalTypeId, "reg_request_account_portal_type_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_account_reg_request_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.PortalTypeId }, "sk_reg_request_account")
                    .IsUnique();

                entity.Property(e => e.AccountId)
                    .HasColumnName("account_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.PortalTypeId)
                    .HasColumnName("portal_type_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Тип учетной записи");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.PortalType)
                    .WithMany(p => p.RegRequestAccounts)
                    .HasForeignKey(d => d.PortalTypeId)
                    .HasConstraintName("fk_portal_type");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestAccounts)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestChecking>(entity =>
            {
                entity.HasKey(e => e.CheckingId)
                    .HasName("pk_reg_request_checking");

                entity.ToTable("ro_reg_request_checking");

                entity.HasAnnotation("Relational:Comment", "Таблица проверок для заявлений");

                entity.HasIndex(e => e.TaskId, "idx_ro_reg_request_checking_task_id");

                entity.HasIndex(e => e.CheckingTypeId, "reg_request_checking_checking_type_id_idx");

                entity.HasIndex(e => e.ContentId, "reg_request_checking_content_id_idx");

                entity.HasIndex(e => e.MemberId, "reg_request_checking_member_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_checking_reg_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_checking_step_id_idx");

                entity.HasIndex(e => new { e.StepId, e.CheckingTypeId }, "reg_request_checking_step_id_type_id");

                entity.HasIndex(e => new { e.RegRequestId, e.MemberId, e.CheckingTypeId }, "sk_reg_request_checking")
                    .IsUnique();

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CheckingTime)
                    .HasPrecision(0)
                    .HasColumnName("checking_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата проверки");

                entity.Property(e => e.CheckingTypeId)
                    .HasColumnName("checking_type_id")
                    .HasComment("Тип проверки");

                entity.Property(e => e.ContentId)
                    .HasColumnName("content_id")
                    .HasComment("Содержание проверки");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.TaskId)
                    .HasColumnName("task_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.CheckingType)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.CheckingTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_checking_type");

                entity.HasOne(d => d.Content)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.ContentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_content");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestCheckings)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegRequestCheckingStep>(entity =>
            {
                entity.HasKey(e => new { e.CheckingId, e.StepId, e.LogTime })
                    .HasName("pk_reg_request_checking_step");

                entity.ToTable("ro_reg_request_checking_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний проверок по заявлениям");

                entity.HasIndex(e => e.CheckingId, "reg_request_checking_step_checking_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_checking_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_checking_step_user_id_idx");

                entity.Property(e => e.CheckingId)
                    .HasColumnName("checking_id")
                    .HasComment("Проверка");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Checking)
                    .WithMany(p => p.RegRequestCheckingSteps)
                    .HasForeignKey(d => d.CheckingId)
                    .HasConstraintName("fk_checking");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegRequestCheckingSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestCheckingSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegRequestComment>(entity =>
            {
                entity.HasKey(e => e.CommentId)
                    .HasName("ro_reg_request_comment_pkey");

                entity.ToTable("ro_reg_request_comment");

                entity.HasAnnotation("Relational:Comment", "Таблица с сообщениями");

                entity.Property(e => e.CommentId)
                    .HasColumnName("comment_id")
                    .HasComment("Идентификатор комментария");

                entity.Property(e => e.CommentText)
                    .HasMaxLength(128)
                    .HasColumnName("comment_text")
                    .HasComment("Текст сообщения");

                entity.Property(e => e.CreationDate)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор лида");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestComments)
                    .HasForeignKey(d => d.RegRequestId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_comment_fk_reg_requests");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestComments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_comment_fk_users");
            });

            modelBuilder.Entity<RegRequestConfirmedStep>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_reg_request_confirmed_step");

                entity.HasIndex(e => e.RegRequestId, "idx_ro_reg_request_confirmed_reg_request_id")
                    .IsUnique();

                entity.Property(e => e.ConfirmationTime)
                    .HasPrecision(0)
                    .HasColumnName("confirmation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время подтверждения");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявка");

                //entity.HasOne(d => d.)
                //    .WithOne()
                //    .HasForeignKey<RegRequestConfirmedStep>(d => d.RegRequestId)
                //    .HasConstraintName("fk_reg_request_id");
            });

            modelBuilder.Entity<RegRequestContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_reg_request_contact");

                entity.ToTable("ro_reg_request_contact");

                entity.HasAnnotation("Relational:Comment", "Контактные данные заявления");

                entity.HasIndex(e => e.RegRequestId, "reg_request_contact_reg_request_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_contact_type_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.TypeId, e.ContactValue }, "sk_reg_request_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestContacts)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RegRequestContacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RegRequestContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_reg_request_contact_use");

                entity.ToTable("ro_reg_request_contact_use");

                entity.HasAnnotation("Relational:Comment", "Использование контактов заявления");

                entity.HasIndex(e => e.ContactId, "reg_request_contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.RegRequestContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RegRequestContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RegRequestDoc>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.DocId })
                    .HasName("pk_reg_request_document");

                entity.ToTable("ro_reg_request_doc");

                entity.HasAnnotation("Relational:Comment", "Таблица документов заявлений");

                entity.HasIndex(e => e.DocId, "reg_request_doc_doc_id_idx");

                entity.HasIndex(e => e.MemberId, "reg_request_doc_member_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_doc_reg_request_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Документ");

                entity.Property(e => e.ConfirmedByUserId)
                    .HasColumnName("confirmed_by_user_id")
                    .HasComment("Подтвердивший пользователь");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("ИД сотрудника");

                entity.Property(e => e.SourceId)
                    .HasColumnName("source_id")
                    .HasComment("Источник документа: 1 - заявление, 2 - продукт");

                entity.HasOne(d => d.ConfirmedByUser)
                    .WithMany(p => p.RegRequestDocs)
                    .HasForeignKey(d => d.ConfirmedByUserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_doc_user");

                entity.HasOne(d => d.Doc)
                    .WithMany(p => p.RegRequestDocs)
                    .HasForeignKey(d => d.DocId)
                    .HasConstraintName("fk_doc");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RegRequestDocs)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member_id");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestDocs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestEgrulRequest>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_reg_request_egrul_request");

                entity.Property(e => e.EgrulRequestId)
                    .IsRequired()
                    .HasMaxLength(32)
                    .HasColumnName("egrul_request_id")
                    .HasComment("Идентификатор запроса на выписку ЕГРЮЛ");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasDefaultValueSql("NULL::timestamp with time zone")
                    .HasComment("Дата получения документа");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Идентификатор заявки");
            });

            modelBuilder.Entity<RegRequestFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedbackId)
                    .HasName("pk_reg_request_feedback");

                entity.ToTable("ro_reg_request_feedback");

                entity.HasAnnotation("Relational:Comment", "Таблица обратной связи по заявлениям");

                entity.HasIndex(e => e.RatingId, "reg_request_feedback_rating_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_feedback_reg_request_id_idx");

                entity.Property(e => e.FeedbackId)
                    .HasColumnName("feedback_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RatingId)
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.RegRequestFeedbacks)
                    .HasForeignKey(d => d.RatingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_feedback_rating");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestFeedbacks)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestGate>(entity =>
            {
                entity.HasKey(e => e.RegRequestGateId)
                    .HasName("pk_reg_request_gate");

                entity.ToTable("ro_reg_request_gate");

                entity.HasAnnotation("Relational:Comment", "Таблица гейтов заявлений");

                entity.Property(e => e.RegRequestGateId).HasColumnName("reg_request_gate_id");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.RegRequestGates)
                    .HasForeignKey(d => d.GateId)
                    .HasConstraintName("fk_gate_id");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestGates)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request_id");
            });

            modelBuilder.Entity<RegRequestMember>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("pk_reg_request_member");

                entity.ToTable("ro_reg_request_member");

                entity.HasAnnotation("Relational:Comment", "Таблица сотрудников запроса на регистрацию");

                entity.HasIndex(e => e.CaId, "reg_request_member_ca_id_idx");

                entity.HasIndex(e => e.CertId, "reg_request_member_cert_id_idx");

                entity.HasIndex(e => e.CertRequestId, "reg_request_member_cert_request_id_idx");

                entity.HasIndex(e => e.CertTemplateId, "reg_request_member_cert_template_id_idx");

                entity.HasIndex(e => e.CountryId, "reg_request_member_country_id_idx");

                entity.HasIndex(e => e.DssId, "reg_request_member_dss_id_idx");

                entity.HasIndex(e => e.DssLogin, "reg_request_member_dss_login_idx");

                entity.HasIndex(e => e.GenderId, "reg_request_member_gender_id_idx");

                entity.HasIndex(e => e.OrgUnitId, "reg_request_member_org_unit_id_idx");

                entity.HasIndex(e => e.PassportTypeId, "reg_request_member_passport_type_id_idx");

                entity.HasIndex(e => e.PostId, "reg_request_member_post_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "reg_request_member_product_person_id_idx");

                entity.HasIndex(e => e.ProviderId, "reg_request_member_provider_id_idx");

                entity.HasIndex(e => e.RegFileTypeId, "reg_request_member_reg_file_type_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_member_reg_request_id_idx");

                entity.HasIndex(e => e.SignQualificationId, "reg_request_member_sign_qualification_id_idx");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.BirthDate)
                    .HasColumnName("birth_date")
                    .HasComment("Дата рождения");

                entity.Property(e => e.BirthPlace)
                    .HasMaxLength(150)
                    .HasColumnName("birth_place")
                    .HasComment("Место рождения");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("Ссылка на УЦ");

                entity.Property(e => e.CertId)
                    .HasColumnName("cert_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CertRequestId)
                    .HasColumnName("cert_request_id")
                    .HasComment("Запрос на сертификат");

                entity.Property(e => e.CertTemplateId)
                    .HasColumnName("cert_template_id")
                    .HasComment("Шаблон сертификата");

                entity.Property(e => e.ContainerName)
                    .HasMaxLength(50)
                    .HasColumnName("container_name")
                    .HasComment("Контейнер");

                entity.Property(e => e.CountryId)
                    .HasMaxLength(3)
                    .HasColumnName("country_id")
                    .HasComment("Гражданство");

                entity.Property(e => e.DssAuthModeId)
                    .HasColumnName("dss_auth_mode_id")
                    .HasComment("Режим аутентификации в DSS");

                entity.Property(e => e.DssId)
                    .HasColumnName("dss_id")
                    .HasComment("DSS");

                entity.Property(e => e.DssKeyStorageId).HasColumnName("dss_key_storage_id");

                entity.Property(e => e.DssLogin)
                    .HasMaxLength(36)
                    .HasColumnName("dss_login")
                    .HasDefaultValueSql("NULL::character varying")
                    .HasComment("Логин DSS");

                entity.Property(e => e.DssUserId).HasColumnName("dss_user_id");

                entity.Property(e => e.Email)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Encrypt)
                    .IsRequired()
                    .HasColumnName("encrypt")
                    .HasDefaultValueSql("true")
                    .HasComment("Шифровальщик");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.ForceQrcodeGeneration)
                    .HasColumnName("force_qrcode_generation")
                    .HasComment("Переобновление QR кода");

                entity.Property(e => e.ForceUpdate)
                    .HasColumnName("force_update")
                    .HasComment("Принудительная замена сертификата");

                entity.Property(e => e.GenderId)
                    .HasColumnName("gender_id")
                    .HasComment("Пол");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН физического лица");

                entity.Property(e => e.IonOnline)
                    .HasColumnName("ion_online")
                    .HasComment("Онлайн");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Сотрудник имеет роль Администратор");

                entity.Property(e => e.IsRequestSender)
                    .HasColumnName("is_request_sender")
                    .HasComment("Флаг отправителя заявления");

                entity.Property(e => e.IsTrusted)
                    .HasColumnName("is_trusted")
                    .HasComment("Это доверенное лицо");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.MemberGuid)
                    .HasColumnName("member_guid")
                    .HasComment("ГУИД сотрудника");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный телефон");

                entity.Property(e => e.OrgUnitId)
                    .HasColumnName("org_unit_id")
                    .HasComment("Подразделение");

                entity.Property(e => e.PasportDate)
                    .HasColumnName("pasport_date")
                    .HasComment("Когда выдан документ");

                entity.Property(e => e.PassportAddon)
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан документ");

                entity.Property(e => e.PassportEndDate)
                    .HasColumnName("passport_end_date")
                    .HasComment("Дата окончания срока действия паспорта");

                entity.Property(e => e.PassportNumber)
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.PassportSeries)
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия документа");

                entity.Property(e => e.PassportTypeId)
                    .HasColumnName("passport_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.PassportUnit)
                    .HasMaxLength(7)
                    .HasColumnName("passport_unit")
                    .HasComment("Код подразделения, выдавшего паспорт");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(150)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Сотрудник продукта");

                entity.Property(e => e.ProviderId)
                    .HasColumnName("provider_id")
                    .HasComment("Криптопровайдер");

                entity.Property(e => e.RegFileTypeId)
                    .HasColumnName("reg_file_type_id")
                    .HasComment("Тип рег-файла");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Запрос");

                entity.Property(e => e.SignQualificationId)
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Квалификация подписи");

                entity.Property(e => e.Signer)
                    .IsRequired()
                    .HasColumnName("signer")
                    .HasDefaultValueSql("true")
                    .HasComment("Подписант");

                entity.Property(e => e.Snils)
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.StorageTypeId)
                    .HasColumnName("storage_type_id")
                    .HasComment("Тип хранилища");

                entity.Property(e => e.SubjectKeyId)
                    .HasMaxLength(40)
                    .HasColumnName("subject_key_id")
                    .HasComment("Идентификатор ключа субъекта");

                entity.Property(e => e.TemplateId)
                    .HasColumnName("template_id")
                    .HasComment("Шаблон УЦ");

                entity.Property(e => e.Unregister)
                    .HasColumnName("unregister")
                    .HasComment("Признак разрегистрации");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.CaId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_ca");

                entity.HasOne(d => d.CertTemplate)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.CertTemplateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_cert_template");

                entity.HasOne(d => d.Country)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.CountryId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_country");

                entity.HasOne(d => d.DssAuthMode)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.DssAuthModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss_auth_mode");

                entity.HasOne(d => d.Dss)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.DssId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_dss");

                entity.HasOne(d => d.DssKeyStorage)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.DssKeyStorageId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_member_key_storage");

                entity.HasOne(d => d.DssUser)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.DssUserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_member_dss_user");

                entity.HasOne(d => d.Gender)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.GenderId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_gender");

                entity.HasOne(d => d.OrgUnit)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.OrgUnitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_org_unit");

                entity.HasOne(d => d.PassportType)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.PassportTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_type");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.Provider)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.ProviderId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_provider");

                entity.HasOne(d => d.RegFileType)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.RegFileTypeId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_reg_file_type");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.SignQualification)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.SignQualificationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sign_qualification");

                entity.HasOne(d => d.StorageType)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.StorageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_storage_type");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.RegRequestMembers)
                    .HasForeignKey(d => d.TemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_template");

                entity.HasMany(d => d.Ekus)
                    .WithMany(p => p.RegRequestMembers)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRegRequestMemberEku",
                        l => l.HasOne<Eku>().WithMany().HasForeignKey("EkuId").HasConstraintName("fk_eku"),
                        r => r.HasOne<RegRequestMember>().WithMany().HasForeignKey("RegRequestMemberId").HasConstraintName("fk_reg_request_member"),
                        j =>
                        {
                            j.HasKey("RegRequestMemberId", "EkuId").HasName("pk_reg_request_member_eku");

                            j.ToTable("ro_reg_request_member_eku").HasAnnotation("Relational:Comment", "Таблица расширений сертификата сотрудника");

                            j.HasIndex(new[] { "EkuId" }, "reg_request_member_eku_eku_id_idx");

                            j.HasIndex(new[] { "RegRequestMemberId" }, "reg_request_member_eku_product_person_id_idx");

                            j.IndexerProperty<int>("RegRequestMemberId").HasColumnName("reg_request_member_id").HasComment("Сотрудник");

                            j.IndexerProperty<int>("EkuId").HasColumnName("eku_id").HasComment("Расширение");
                        });
            });

            modelBuilder.Entity<RegRequestMemberAvailableProtocol>(entity =>
            {
                entity.HasKey(e => e.RegRequestMemberAvailableProtocolId)
                    .HasName("ro_reg_request_member_available_protocol_pkey");

                entity.ToTable("ro_reg_request_member_available_protocol");

                entity.Property(e => e.RegRequestMemberAvailableProtocolId)
                    .HasColumnName("reg_request_member_available_protocol_id")
                    .HasDefaultValueSql("nextval('ro_reg_request_member_availab_reg_request_member_available__seq'::regclass)");

                entity.Property(e => e.IsEncryptor).HasColumnName("is_encryptor");

                entity.Property(e => e.MemberId).HasColumnName("member_id");

                entity.Property(e => e.ProtocolId).HasColumnName("protocol_id");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RegRequestMemberAvailableProtocols)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("ro_reg_request_member_available_protocol_member_id_fkey");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RegRequestMemberAvailableProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_reg_request_member_available_protocol_protocol_id_fkey");
            });

            modelBuilder.Entity<RegRequestMemberContact>(entity =>
            {
                entity.HasKey(e => e.ContactId)
                    .HasName("pk_reg_request_member_contact");

                entity.ToTable("ro_reg_request_member_contact");

                entity.HasAnnotation("Relational:Comment", "Контактные данные сотрудника");

                entity.HasIndex(e => e.RegRequestMemberId, "reg_request_member_contact_reg_request_member_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_member_contact_type_id_idx");

                entity.HasIndex(e => new { e.RegRequestMemberId, e.TypeId, e.ContactValue }, "sk_reg_request_member_contact")
                    .IsUnique();

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContactValue)
                    .IsRequired()
                    .HasColumnName("contact_value")
                    .HasComment("Данные контакта");

                entity.Property(e => e.RegRequestMemberId)
                    .HasColumnName("reg_request_member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.RegRequestMember)
                    .WithMany(p => p.RegRequestMemberContacts)
                    .HasForeignKey(d => d.RegRequestMemberId)
                    .HasConstraintName("fk_reg_request_member");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RegRequestMemberContacts)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_contact_type");
            });

            modelBuilder.Entity<RegRequestMemberContactUse>(entity =>
            {
                entity.HasKey(e => new { e.ContactId, e.TypeId })
                    .HasName("pk_reg_request_member_contact_use");

                entity.ToTable("ro_reg_request_member_contact_use");

                entity.HasAnnotation("Relational:Comment", "Использование контактов сотрудников");

                entity.HasIndex(e => e.ContactId, "reg_request_member_contact_use_contact_id_idx");

                entity.HasIndex(e => e.TypeId, "reg_request_member_contact_use_type_id_idx");

                entity.Property(e => e.ContactId)
                    .HasColumnName("contact_id")
                    .HasComment("Контакт");

                entity.Property(e => e.TypeId)
                    .HasColumnName("type_id")
                    .HasComment("Тип применения");

                entity.Property(e => e.Main)
                    .IsRequired()
                    .HasColumnName("main")
                    .HasDefaultValueSql("true")
                    .HasComment("Основной");

                entity.HasOne(d => d.Contact)
                    .WithMany(p => p.RegRequestMemberContactUses)
                    .HasForeignKey(d => d.ContactId)
                    .HasConstraintName("fk_contact");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.RegRequestMemberContactUses)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fk_type");
            });

            modelBuilder.Entity<RegRequestMemberDssApp>(entity =>
            {
                entity.HasKey(e => new { e.MemberId, e.AppId })
                    .HasName("pk_request_member_dss_app");

                entity.ToTable("ro_reg_request_member_dss_app");

                entity.HasAnnotation("Relational:Comment", "Таблица DSS-приложений владельцев ЭП");

                entity.HasIndex(e => e.MemberId, "reg_request_member_dss_app_member_idx");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Владелец ЭП");

                entity.Property(e => e.AppId)
                    .HasColumnName("app_id")
                    .HasComment("Приложение DSS");

                entity.Property(e => e.ForceAuthUpdate).HasColumnName("force_auth_update");

                entity.HasOne(d => d.App)
                    .WithMany(p => p.RegRequestMemberDssApps)
                    .HasForeignKey(d => d.AppId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_app");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RegRequestMemberDssApps)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("fk_member");
            });

            modelBuilder.Entity<RegRequestPassportChecking>(entity =>
            {
                entity.HasKey(e => e.PassportCheckingId)
                    .HasName("pk_reg_request_passport_checking");

                entity.ToTable("ro_reg_request_passport_checking");

                entity.HasAnnotation("Relational:Comment", "Таблица проверки данных паспорта для заявлений");

                entity.HasIndex(e => e.PassportDataTypeId, "reg_request_passport_checking_passport_data_type_id_idx");

                entity.HasIndex(e => e.RegRequestCheckingId, "reg_request_passport_checking_reg_request_checking_id_idx");

                entity.Property(e => e.PassportCheckingId)
                    .HasColumnName("passport_checking_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEquals)
                    .HasColumnName("is_equals")
                    .HasComment("Данные совпадают");

                entity.Property(e => e.PassportDataFromRequest)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_request")
                    .HasComment("Данные паспорта из заявки");

                entity.Property(e => e.PassportDataFromScan)
                    .HasMaxLength(200)
                    .HasColumnName("passport_data_from_scan")
                    .HasComment("Данные паспорта со скана");

                entity.Property(e => e.PassportDataTypeId)
                    .HasColumnName("passport_data_type_id")
                    .HasComment("Тип данных паспорта");

                entity.Property(e => e.RegRequestCheckingId)
                    .HasColumnName("reg_request_checking_id")
                    .HasComment("Проверка скана паспорта");

                entity.HasOne(d => d.PassportDataType)
                    .WithMany(p => p.RegRequestPassportCheckings)
                    .HasForeignKey(d => d.PassportDataTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_passport_data_type");

                entity.HasOne(d => d.RegRequestChecking)
                    .WithMany(p => p.RegRequestPassportCheckings)
                    .HasForeignKey(d => d.RegRequestCheckingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_checking");
            });

            modelBuilder.Entity<RegRequestPlugin>(entity =>
            {
                entity.HasKey(e => e.RegRequestPluginId)
                    .HasName("pk_reg_request_plugin");

                entity.ToTable("ro_reg_request_plugin");

                entity.HasAnnotation("Relational:Comment", "Таблица плагинов заявлений на регистрацию");

                entity.HasIndex(e => new { e.TariffId, e.PluginId }, "reg_request_plugin_tariff_id_plugin_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.PluginId }, "sk_reg_request_plugin")
                    .IsUnique();

                entity.Property(e => e.RegRequestPluginId)
                    .HasColumnName("reg_request_plugin_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.PluginId).HasColumnName("plugin_id");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Плагин");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Plugin)
                    .WithMany(p => p.RegRequestPlugins)
                    .HasForeignKey(d => d.PluginId)
                    .HasConstraintName("fk_plugin");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestPlugins)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.PluginTariff)
                    .WithMany(p => p.RegRequestPlugins)
                    .HasForeignKey(d => new { d.TariffId, d.PluginId })
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_plugin_tariff");
            });

            modelBuilder.Entity<RegRequestPotentialMember>(entity =>
            {
                entity.HasKey(e => e.RegRequestPotentialMemberId)
                    .HasName("pk_reg_request_potential_member");

                entity.ToTable("ro_reg_request_potential_member");

                entity.HasAnnotation("Relational:Comment", "Таблица потенциальных пользователей в заявке");

                entity.HasIndex(e => new { e.RegRequestId, e.Snils }, "sk_reg_request_potential_member_reg_request_snils")
                    .IsUnique();

                entity.Property(e => e.RegRequestPotentialMemberId)
                    .HasColumnName("reg_request_potential_member_id")
                    .HasDefaultValueSql("nextval('ro_reg_request_potential_memb_reg_request_potential_member__seq'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. адрес");

                entity.Property(e => e.IsAdministrator)
                    .HasColumnName("is_administrator")
                    .HasComment("Признак администратора");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявка");

                entity.Property(e => e.Snils)
                    .IsRequired()
                    .HasMaxLength(14)
                    .HasColumnName("snils")
                    .HasComment("СНИЛС");

                entity.Property(e => e.Unregister).HasColumnName("unregister");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestPotentialMembers)
                    .HasForeignKey(d => d.RegRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestPotentialMemberProtocol>(entity =>
            {
                entity.HasKey(e => e.RegRequestPotentialMemberProtocolId)
                    .HasName("pk_reg_request_potential_member_protocol");

                entity.ToTable("ro_reg_request_potential_member_protocol");

                entity.HasAnnotation("Relational:Comment", "Таблица потенциальных направлений для пользователей в заявке");

                entity.Property(e => e.RegRequestPotentialMemberProtocolId)
                    .HasColumnName("reg_request_potential_member_protocol_id")
                    .HasDefaultValueSql("nextval('ro_reg_request_potential_memb_reg_request_potential_member_seq1'::regclass)")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsEncryptor)
                    .HasColumnName("is_encryptor")
                    .HasComment("Признак шифровальщика");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RegRequestPotentialMemberId)
                    .HasColumnName("reg_request_potential_member_id")
                    .HasComment("Потенциальный пользователь");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RegRequestPotentialMemberProtocols)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RegRequestPotentialMember)
                    .WithMany(p => p.RegRequestPotentialMemberProtocols)
                    .HasForeignKey(d => d.RegRequestPotentialMemberId)
                    .HasConstraintName("fk_reg_request_potential_member");
            });

            modelBuilder.Entity<RegRequestRecipient>(entity =>
            {
                entity.HasKey(e => e.RecipientId)
                    .HasName("pk_reg_request_recipient");

                entity.ToTable("ro_reg_request_recipient");

                entity.HasAnnotation("Relational:Comment", "Таблица получателей запроса на регистрацию");

                entity.HasIndex(e => e.ProtocolId, "reg_request_recipient_protocol_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_recipient_reg_request_id_idx");

                entity.HasIndex(e => new { e.RegRequestId, e.ProtocolId, e.RecipientCode }, "sk_reg_request_recipient")
                    .IsUnique();

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Index)
                    .HasColumnName("index")
                    .HasComment("Номер участка");

                entity.Property(e => e.ProtocolId)
                    .HasColumnName("protocol_id")
                    .HasComment("Протокол");

                entity.Property(e => e.RecipientCode)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("recipient_code")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("Код");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Запрос");

                entity.HasOne(d => d.Protocol)
                    .WithMany(p => p.RegRequestRecipients)
                    .HasForeignKey(d => d.ProtocolId)
                    .HasConstraintName("fk_protocol");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestRecipients)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestRoute>(entity =>
            {
                entity.HasKey(e => new { e.RecipientId, e.Kpp })
                    .HasName("pk_reg_request_route");

                entity.ToTable("ro_reg_request_route");

                entity.HasAnnotation("Relational:Comment", "Таблица маршрутов запроса на регистрацию");

                entity.HasIndex(e => e.RecipientId, "reg_request_route_recipient_id_idx");

                entity.Property(e => e.RecipientId)
                    .HasColumnName("recipient_id")
                    .HasComment("Получатель");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .IsFixedLength()
                    .HasComment("КПП");

                entity.HasOne(d => d.Recipient)
                    .WithMany(p => p.RegRequestRoutes)
                    .HasForeignKey(d => d.RecipientId)
                    .HasConstraintName("fk_recipient");
            });

            modelBuilder.Entity<RegRequestService>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_reg_request_service");

                entity.ToTable("ro_reg_request_service");

                entity.HasAnnotation("Relational:Comment", "Таблица для описания доп. услуг, указанных в заявке.");

                entity.HasIndex(e => e.MemberId, "reg_request_service_member_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_service_reg_request_id_idx");

                entity.HasIndex(e => e.ServiceTypeId, "reg_request_service_service_type_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор услуги");

                entity.Property(e => e.MemberId)
                    .HasColumnName("member_id")
                    .HasComment("Сотрудник");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Ссылка на заявку");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.RegRequestServices)
                    .HasForeignKey(d => d.MemberId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_member");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestServices)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.RegRequestServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestServices)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<RegRequestStep>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.StepId, e.LogTime })
                    .HasName("pk_reg_request_step");

                entity.ToTable("ro_reg_request_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний продуктов");

                entity.HasIndex(e => e.RegRequestId, "reg_request_step_reg_request_id_idx");

                entity.HasIndex(e => e.StepId, "reg_request_step_step_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_step_user_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestSteps)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RegRequestSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestSteps)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegRequestStepProductView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_reg_request_step_product_view");

                entity.Property(e => e.AbonentGuid).HasColumnName("abonent_guid");

                entity.Property(e => e.CategoryId).HasColumnName("category_id");

                entity.Property(e => e.ClStepType).HasColumnName("cl_step_type");

                entity.Property(e => e.CompanyGroupInn).HasColumnName("company_group_inn");

                entity.Property(e => e.CompanyGroupKpp).HasColumnName("company_group_kpp");

                entity.Property(e => e.CompanyGroupName).HasColumnName("company_group_name");

                entity.Property(e => e.CrStepType).HasColumnName("cr_step_type");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email");

                entity.Property(e => e.FirstTeamPerson).HasColumnName("first_team_person");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.IrucStepType).HasColumnName("iruc_step_type");

                entity.Property(e => e.IsBonus).HasColumnName("is_bonus");

                entity.Property(e => e.IsIts).HasColumnName("is_its");

                entity.Property(e => e.IsSpecialCondition).HasColumnName("is_special_condition");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile");

                entity.Property(e => e.OfficeId).HasColumnName("office_id");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone");

                entity.Property(e => e.PostalAddressId).HasColumnName("postal_address_id");

                entity.Property(e => e.ProductGuid).HasColumnName("product_guid");

                entity.Property(e => e.ProductStepId).HasColumnName("product_step_id");

                entity.Property(e => e.ProductTypeId).HasColumnName("product_type_id");

                entity.Property(e => e.ProductTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("product_type_name");

                entity.Property(e => e.ProgramVersion)
                    .HasMaxLength(150)
                    .HasColumnName("program_version");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegRequestTypeId).HasColumnName("reg_request_type_id");

                entity.Property(e => e.RegRequestTypeName)
                    .HasMaxLength(40)
                    .HasColumnName("reg_request_type_name");

                entity.Property(e => e.RegistrationNumber)
                    .HasMaxLength(255)
                    .HasColumnName("registration_number");

                entity.Property(e => e.SecondTeamPerson).HasColumnName("second_team_person");

                entity.Property(e => e.ShortName)
                    .HasMaxLength(500)
                    .HasColumnName("short_name");

                entity.Property(e => e.SpecialConditionNumber).HasColumnName("special_condition_number");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.StepName)
                    .HasMaxLength(40)
                    .HasColumnName("step_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.Property(e => e.WorkflowTypeId).HasColumnName("workflow_type_id");
            });

            modelBuilder.Entity<RegRequestSummaryView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_reg_request_summary_view");

                entity.Property(e => e.AgentName)
                    .HasMaxLength(200)
                    .HasColumnName("agent_name");

                entity.Property(e => e.Count).HasColumnName("count");

                entity.Property(e => e.OfficeName)
                    .HasMaxLength(200)
                    .HasColumnName("office_name");
            });

            modelBuilder.Entity<RegRequestTariff>(entity =>
            {
                entity.HasKey(e => new { e.RegRequestId, e.TariffId })
                    .HasName("pk_reg_request_tariff");

                entity.ToTable("ro_reg_request_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица услуг заявлений");

                entity.HasIndex(e => e.RegRequestId, "reg_request_tariff_reg_request_id_idx");

                entity.HasIndex(e => e.SectionId, "reg_request_tariff_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "reg_request_tariff_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "reg_request_tariff_tariff_id_idx");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Услуга");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasComment("Дата окончания");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasDefaultValueSql("1")
                    .HasComment("Количество");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Цена");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция прайса");

                entity.Property(e => e.StartDate)
                    .HasColumnName("start_date")
                    .HasComment("Дата начала");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestTariffs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.RegRequestTariffs)
                    .HasForeignKey(d => d.SectionId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.RegRequestTariffs)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.PriceTariff)
                    .WithMany(p => p.RegRequestTariffs)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<RegRequestTeam>(entity =>
            {
                entity.HasKey(e => e.RegRequestId)
                    .HasName("ro_reg_request_team_pkey");

                entity.ToTable("ro_reg_request_team");

                entity.HasAnnotation("Relational:Comment", "Заявки, одобренные командами");

                entity.Property(e => e.RegRequestId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявка");

                entity.Property(e => e.OfficeTeamId)
                    .HasColumnName("office_team_id")
                    .HasComment("Команда");

                entity.HasOne(d => d.OfficeTeam)
                    .WithMany(p => p.RegRequestTeams)
                    .HasForeignKey(d => d.OfficeTeamId)
                    .HasConstraintName("fk_office_team");

                entity.HasOne(d => d.RegRequest)
                    .WithOne(p => p.RegRequestTeam)
                    .HasForeignKey<RegRequestTeam>(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");
            });

            modelBuilder.Entity<RegRequestTransferLog>(entity =>
            {
                entity.HasKey(e => e.RegRequestTransferId)
                    .HasName("pk_reg_request_transfer_log");

                entity.ToTable("ro_reg_request_transfer_log");

                entity.HasAnnotation("Relational:Comment", "Таблица логирования переноса заявлений");

                entity.HasIndex(e => e.OfficeId, "reg_request_transfer_office_id_idx");

                entity.HasIndex(e => e.PreviousOfficeId, "reg_request_transfer_previous_office_id_idx");

                entity.HasIndex(e => e.RegRequestId, "reg_request_transfer_reg_request_id_idx");

                entity.HasIndex(e => e.UserId, "reg_request_transfer_user_id_idx");

                entity.Property(e => e.RegRequestTransferId)
                    .HasColumnName("reg_request_transfer_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Офис");

                entity.Property(e => e.PreviousOfficeId)
                    .HasColumnName("previous_office_id")
                    .HasComment("Предыдущий офис");

                entity.Property(e => e.RegRequestId)
                    .HasColumnName("reg_request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.RegRequestTransferLogOffices)
                    .HasForeignKey(d => d.OfficeId)
                    .HasConstraintName("fk_office");

                entity.HasOne(d => d.PreviousOffice)
                    .WithMany(p => p.RegRequestTransferLogPreviousOffices)
                    .HasForeignKey(d => d.PreviousOfficeId)
                    .HasConstraintName("fk_previous_office");

                entity.HasOne(d => d.RegRequest)
                    .WithMany(p => p.RegRequestTransferLogs)
                    .HasForeignKey(d => d.RegRequestId)
                    .HasConstraintName("fk_reg_request");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RegRequestTransferLogs)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<RegRequestType>(entity =>
            {
                entity.HasKey(e => e.RegRequestTypeId)
                    .HasName("pk_reg_request_type");

                entity.ToTable("ro_reg_request_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов запросов на регистрацию");

                entity.HasIndex(e => e.RegRequestTypeName, "sk_reg_request_type_name")
                    .IsUnique();

                entity.Property(e => e.RegRequestTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Код");

                entity.Property(e => e.RegRequestTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("reg_request_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Region>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("pk_region");

                entity.ToTable("ro_region");

                entity.HasAnnotation("Relational:Comment", "Таблица регионов");

                entity.HasIndex(e => e.OfficeId, "region_office_id_idx");

                entity.HasIndex(e => e.RegionCode, "sk_region_code")
                    .IsUnique();

                entity.HasIndex(e => e.RegionName, "sk_region_name")
                    .IsUnique();

                entity.HasIndex(e => e.RegionPfrCode, "sk_region_pfr_code")
                    .IsUnique();

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.OfficeId)
                    .HasColumnName("office_id")
                    .HasComment("Центр компетенции");

                entity.Property(e => e.RegionCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_code")
                    .HasComment("Код ФНС");

                entity.Property(e => e.RegionName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("region_name")
                    .HasComment("Наименование");

                entity.Property(e => e.RegionPfrCode)
                    .HasMaxLength(3)
                    .HasColumnName("region_pfr_code")
                    .HasComment("Код ПФР");

                entity.HasOne(d => d.Office)
                    .WithMany(p => p.Regions)
                    .HasForeignKey(d => d.OfficeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_office");
            });

            modelBuilder.Entity<RegionStatistic>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_region_statistic");

                entity.Property(e => e.Cf).HasColumnName("cf");

                entity.Property(e => e.CountFull).HasColumnName("count_full");

                entity.Property(e => e.CountWeek).HasColumnName("count_week");

                entity.Property(e => e.ItsCount).HasColumnName("its_count");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price");

                entity.Property(e => e.RegionName)
                    .HasMaxLength(100)
                    .HasColumnName("region_name");

                entity.Property(e => e.Success).HasColumnName("success");
            });

            modelBuilder.Entity<RegionTimeZone>(entity =>
            {
                entity.HasKey(e => e.RegionId)
                    .HasName("pk_time_zone");

                entity.ToTable("ro_region_time_zone");

                entity.HasAnnotation("Relational:Comment", "Таблица временных зон регионов");

                entity.Property(e => e.RegionId)
                    .ValueGeneratedNever()
                    .HasColumnName("region_id")
                    .HasComment("Идентификатор региона");

                entity.Property(e => e.TimeOffset)
                    .HasColumnName("time_offset")
                    .HasComment("Смещение времени");

                entity.HasOne(d => d.Region)
                    .WithOne(p => p.RegionTimeZone)
                    .HasForeignKey<RegionTimeZone>(d => d.RegionId)
                    .HasConstraintName("fk_time_zone");
            });

            modelBuilder.Entity<RejectedRegRequest>(entity =>
            {
                entity.HasKey(e => e.RejectedRegRequestId)
                    .HasName("pk_rejected_reg_request");

                entity.ToTable("ro_rejected_reg_request");

                entity.HasAnnotation("Relational:Comment", "Таблица отклоненных заявлений");

                entity.HasIndex(e => e.Inn, "rejected_reg_request_inn_idx");

                entity.HasIndex(e => e.ProductTypeId, "rejected_reg_request_product_type_id_idx");

                entity.HasIndex(e => e.RegRequestTypeId, "rejected_reg_request_reg_request_type_id_idx");

                entity.HasIndex(e => e.RequestId, "rejected_reg_request_request_id_idx");

                entity.HasIndex(e => e.ShortName, "rejected_reg_request_short_name_idx");

                entity.HasIndex(e => e.StepId, "rejected_reg_request_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "sk_rejected_reg_request")
                    .IsUnique();

                entity.Property(e => e.RejectedRegRequestId)
                    .HasColumnName("rejected_reg_request_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Электронный адрес");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasComment("КПП");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(24)
                    .HasColumnName("mobile")
                    .HasComment("Мобильный");

                entity.Property(e => e.Note)
                    .HasColumnType("character varying")
                    .HasColumnName("note")
                    .HasComment("Примечание");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.ProductGuid)
                    .HasColumnName("product_guid")
                    .HasComment("Идентификатор продукта");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.RegRequestTypeId)
                    .HasColumnName("reg_request_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Заявление");

                entity.Property(e => e.ShortName)
                    .HasColumnType("character varying")
                    .HasColumnName("short_name")
                    .HasComment("Нименование");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.RejectedRegRequests)
                    .HasForeignKey(d => d.ProductTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product_type");

                entity.HasOne(d => d.RegRequestType)
                    .WithMany(p => p.RejectedRegRequests)
                    .HasForeignKey(d => d.RegRequestTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_reg_request_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.RejectedRegRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithOne(p => p.RejectedRegRequest)
                    .HasForeignKey<RejectedRegRequest>(d => d.WorkflowId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<Report>(entity =>
            {
                entity.HasKey(e => e.ReportId)
                    .HasName("ro_report_pkey");

                entity.ToTable("ro_report");

                entity.HasIndex(e => e.AgentId, "idx_ro_report_agent_id");

                entity.HasIndex(e => new { e.AgentId, e.ProductTypeId, e.Year, e.Month }, "idx_ro_report_agent_id_prod_type_id_year_month")
                    .IsUnique();

                entity.HasIndex(e => e.Month, "idx_ro_report_month");

                entity.HasIndex(e => e.ProductTypeId, "idx_ro_report_product_type_id");

                entity.HasIndex(e => e.StepId, "idx_ro_report_step_id");

                entity.HasIndex(e => e.UpdateTime, "idx_ro_report_update_time");

                entity.HasIndex(e => e.Year, "idx_ro_report_year");

                entity.Property(e => e.ReportId)
                    .HasColumnName("report_id")
                    .HasComment("Ид");

                entity.Property(e => e.ActiveCount)
                    .HasColumnName("active_count")
                    .HasComment("Кол. активных абонентов");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнёр");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasComment("Дата создания");

                entity.Property(e => e.IncCount)
                    .HasColumnName("inc_count")
                    .HasComment("Прирост за текущий период");

                entity.Property(e => e.LastYearLostCount)
                    .HasColumnName("last_year_lost_count")
                    .HasComment("Кол. непродлённых абонентов в прошлом году");

                entity.Property(e => e.LastYearLostInPeriod)
                    .HasColumnName("last_year_lost_in_period")
                    .HasComment("Отвал за период в прошлом году");

                entity.Property(e => e.LastYearToProlCount)
                    .HasColumnName("last_year_to_prol_count")
                    .HasComment("К продлению за год в прошлом году");

                entity.Property(e => e.LastYearToProlInPeriodCount)
                    .HasColumnName("last_year_to_prol_in_period_count")
                    .HasComment("К продлению за период в прошлом году");

                entity.Property(e => e.LostInPeriodCount)
                    .HasColumnName("lost_in_period_count")
                    .HasComment("Отвал за период");

                entity.Property(e => e.Month)
                    .HasColumnName("month")
                    .HasComment("Месяц");

                entity.Property(e => e.PrevMonthIncCount)
                    .HasColumnName("prev_month_inc_count")
                    .HasComment("Прирост в прошлом месяце");

                entity.Property(e => e.PrevMonthLost)
                    .HasColumnName("prev_month_lost")
                    .HasComment("Отвал в прошлом месяце");

                entity.Property(e => e.PrevMonthToProl)
                    .HasColumnName("prev_month_to_prol")
                    .HasComment("К продлению в прошлом месяце");

                entity.Property(e => e.PrevQuarterActiveCount)
                    .HasColumnName("prev_quarter_active_count")
                    .HasComment("Кол. активных абонентов в прошлом квартале");

                entity.Property(e => e.PrevQuarterIncCount)
                    .HasColumnName("prev_quarter_inc_count")
                    .HasComment("Прирост в предыдущем квартале");

                entity.Property(e => e.PrevQuarterLost)
                    .HasColumnName("prev_quarter_lost")
                    .HasComment("Отвал за прошлый квартал");

                entity.Property(e => e.PrevQuarterToProl)
                    .HasColumnName("prev_quarter_to_prol")
                    .HasComment("К продлению в прошлом квартале");

                entity.Property(e => e.PrevYearActiveCount)
                    .HasColumnName("prev_year_active_count")
                    .HasComment("Кол. активных в прошлом году");

                entity.Property(e => e.PrevYearEndActiveCount)
                    .HasColumnName("prev_year_end_active_count")
                    .HasComment("Кол. активных абонентов на конец прошлого года");

                entity.Property(e => e.ProductTypeId)
                    .HasColumnName("product_type_id")
                    .HasComment("Тип продукта");

                entity.Property(e => e.QuarterIncCount)
                    .HasColumnName("quarter_inc_count")
                    .HasComment("Прирост за текущий квартал");

                entity.Property(e => e.QuarterLost)
                    .HasColumnName("quarter_lost")
                    .HasComment("Отвал в текущем квартале");

                entity.Property(e => e.QuarterToProl)
                    .HasColumnName("quarter_to_prol")
                    .HasComment("К продлению в текущем квартале");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.ToProlInPeriodCount)
                    .HasColumnName("to_prol_in_period_count")
                    .HasComment("К продлению за период");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.Property(e => e.Year)
                    .HasColumnName("year")
                    .HasComment("Год");

                entity.Property(e => e.YearLostCount)
                    .HasColumnName("year_lost_count")
                    .HasComment("Кол. непродлённых абонентов за год");

                entity.Property(e => e.YearToProlCount)
                    .HasColumnName("year_to_prol_count")
                    .HasComment("Кол. к продлению за год");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_ro_report_agent_id");

                entity.HasOne(d => d.ProductType)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.ProductTypeId)
                    .HasConstraintName("fk_ro_report_product_type_id");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Reports)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_report_step_id");
            });

            modelBuilder.Entity<ReportQuery>(entity =>
            {
                entity.HasKey(e => e.ReportQueryId)
                    .HasName("pk_ro_report_query");

                entity.ToTable("ro_report_query");

                entity.HasAnnotation("Relational:Comment", "Таблица запросов для отчетов");

                entity.Property(e => e.ReportQueryId)
                    .HasColumnName("report_query_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.Comment)
                    .HasMaxLength(300)
                    .HasColumnName("comment")
                    .HasComment("Комментарий");

                entity.Property(e => e.SqlQuery)
                    .IsRequired()
                    .HasColumnName("sql_query")
                    .HasComment("SQL-запрос");
            });

            modelBuilder.Entity<Request1c>(entity =>
            {
                entity.HasKey(e => e.ProductGuid)
                    .HasName("product_guid_key");

                entity.ToTable("ro_request_1c");

                entity.Property(e => e.ProductGuid)
                    .ValueGeneratedNever()
                    .HasColumnName("product_guid");

                entity.Property(e => e.AbonentName)
                    .HasColumnType("character varying")
                    .HasColumnName("abonent_name");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time");

                entity.Property(e => e.FileName)
                    .HasColumnType("character varying")
                    .HasColumnName("file_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.StepId).HasColumnName("step_id");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.Request1cs)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_ro_step");
            });

            modelBuilder.Entity<RequestRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_request_region_view");

                entity.Property(e => e.CompetencyCenterId).HasColumnName("competency_center_id");

                entity.Property(e => e.CompetencyCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competency_center_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NormalizedPartnerId).HasColumnName("normalized_partner_id");

                entity.Property(e => e.NormalizedPartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("normalized_partner_name");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(200)
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RequestWithoutPartnerView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_request_without_partner_view");

                entity.Property(e => e.CompetencyCenterId).HasColumnName("competency_center_id");

                entity.Property(e => e.CompetencyCenterName)
                    .HasMaxLength(200)
                    .HasColumnName("competency_center_name");

                entity.Property(e => e.CreationTime).HasColumnName("creation_time");

                entity.Property(e => e.FullName)
                    .HasColumnType("character varying")
                    .HasColumnName("full_name");

                entity.Property(e => e.Inn)
                    .HasMaxLength(12)
                    .HasColumnName("inn");

                entity.Property(e => e.Kpp)
                    .HasMaxLength(9)
                    .HasColumnName("kpp");

                entity.Property(e => e.NormalizedPartnerId).HasColumnName("normalized_partner_id");

                entity.Property(e => e.NormalizedPartnerName)
                    .HasColumnType("character varying")
                    .HasColumnName("normalized_partner_name");

                entity.Property(e => e.PartnerId).HasColumnName("partner_id");

                entity.Property(e => e.PartnerName)
                    .HasMaxLength(200)
                    .HasColumnName("partner_name");

                entity.Property(e => e.RegRequestId).HasColumnName("reg_request_id");

                entity.Property(e => e.RegionId).HasColumnName("region_id");
            });

            modelBuilder.Entity<RevocationReason>(entity =>
            {
                entity.HasKey(e => e.ReasonId)
                    .HasName("pk_revocation_reason");

                entity.ToTable("ro_revocation_reason");

                entity.HasAnnotation("Relational:Comment", "Причина отзыва");

                entity.HasIndex(e => e.ReasonDescription, "sk_revocation_reason")
                    .IsUnique();

                entity.Property(e => e.ReasonId)
                    .ValueGeneratedNever()
                    .HasColumnName("reason_id")
                    .HasComment("Код");

                entity.Property(e => e.ReasonDescription)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("reason_description")
                    .HasComment("Описание");
            });

            modelBuilder.Entity<RewardOption>(entity =>
            {
                entity.HasKey(e => new { e.SchemeId, e.AttributeId })
                    .HasName("pk_reward_option");

                entity.ToTable("ro_reward_option");

                entity.HasAnnotation("Relational:Comment", "Таблица вознаграждений за опции");

                entity.HasIndex(e => e.AttributeId, "reward_option_attribute_id_idx");

                entity.HasIndex(e => e.SchemeId, "reward_option_scheme_id_idx");

                entity.Property(e => e.SchemeId)
                    .HasColumnName("scheme_id")
                    .HasComment("Схема");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.PercentReward)
                    .HasPrecision(5, 2)
                    .HasColumnName("percent_reward")
                    .HasComment("Процент вознаграждения");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.RewardOptions)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Scheme)
                    .WithMany(p => p.RewardOptions)
                    .HasForeignKey(d => d.SchemeId)
                    .HasConstraintName("fk_scheme");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.HasKey(e => e.leId)
                    .HasName("pk_role");

                entity.ToTable("ro_role");

                entity.HasAnnotation("Relational:Comment", "Таблица ролей пользователей");

                entity.HasIndex(e => e.leGroupId, "role_module_role_group_id_idx");

                entity.HasIndex(e => e.leName, "sk_role_name")
                    .IsUnique();

                entity.Property(e => e.leId)
                    .HasColumnName("RoleId")
                    .ValueGeneratedNever()
                    .HasColumnName("role_id")
                    .HasComment("Код");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.leGroupId)
                    .HasColumnName("RoleGroupId")
                    .HasColumnName("role_group_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Группа");

                entity.Property(e => e.leName)
                    .HasColumnName("RoleName")
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasColumnName("role_name")
                    .HasComment("Наименование");

                entity.Property(e => e.lePublicName)
                    .HasColumnName("RolePublicName")
                    .HasMaxLength(150)
                    .HasColumnName("role_public_name")
                    .HasComment("Публичное наименование роли");

                entity.HasOne(d => d.leGroup)
                    .WithMany(p => p.Roles)
                    .HasForeignKey(d => d.leGroupId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_role_group");

                entity.HasMany(d => d.AvailableRoles)
                    .WithMany(p => p.les)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRoleScheme",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("AvailableRoleId").HasConstraintName("ro_role_scheme_fk1"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("RoleId").HasConstraintName("ro_role_scheme_fk"),
                        j =>
                        {
                            j.HasKey("RoleId", "AvailableRoleId").HasName("pk_role_scheme");

                            j.ToTable("ro_role_scheme").HasAnnotation("Relational:Comment", "Таблица управления списком ролей доступных для настройки через интерфейс регистратора");

                            j.IndexerProperty<int>("RoleId").HasColumnName("role_id").HasComment("Родительская роль");

                            j.IndexerProperty<int>("AvailableRoleId").HasColumnName("available_role_id").HasComment("Доступная роль");
                        });

                entity.HasMany(d => d.les)
                    .WithMany(p => p.AvailableRoles)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoRoleScheme",
                        l => l.HasOne<Role>().WithMany().HasForeignKey("RoleId").HasConstraintName("ro_role_scheme_fk"),
                        r => r.HasOne<Role>().WithMany().HasForeignKey("AvailableRoleId").HasConstraintName("ro_role_scheme_fk1"),
                        j =>
                        {
                            j.HasKey("RoleId", "AvailableRoleId").HasName("pk_role_scheme");

                            j.ToTable("ro_role_scheme").HasAnnotation("Relational:Comment", "Таблица управления списком ролей доступных для настройки через интерфейс регистратора");

                            j.IndexerProperty<int>("RoleId").HasColumnName("role_id").HasComment("Родительская роль");

                            j.IndexerProperty<int>("AvailableRoleId").HasColumnName("available_role_id").HasComment("Доступная роль");
                        });
            });

            modelBuilder.Entity<RoleGroup>(entity =>
            {
                entity.HasKey(e => e.leGroupId)
                    .HasName("pk_role_group");

                entity.ToTable("ro_role_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп ролей");

                entity.HasIndex(e => e.leGroupName, "sk_role_group_name")
                    .IsUnique();

                entity.Property(e => e.leGroupId)
                    .HasColumnName("RoleGroupId")
                    .ValueGeneratedNever()
                    .HasColumnName("role_group_id")
                    .HasComment("Код");

                entity.Property(e => e.leGroupName)
                    .HasColumnName("RoleGroupName")
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("role_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<RoleModule>(entity =>
            {
                entity.HasKey(e => new { e.leId, e.ModuleId })
                    .HasName("pk_role_module");

                entity.ToTable("ro_role_module");

                entity.HasAnnotation("Relational:Comment", "Таблица связи ролей с модулями");

                entity.HasIndex(e => e.AccessLevelId, "role_module_access_level_id_idx");

                entity.HasIndex(e => e.ModuleId, "role_module_module_id_idx");

                entity.HasIndex(e => e.leId, "role_module_role_id_idx");

                entity.Property(e => e.leId)
                    .HasColumnName("RoleId")
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.Property(e => e.ModuleId)
                    .HasColumnName("module_id")
                    .HasComment("Модуль");

                entity.Property(e => e.AccessLevelId)
                    .HasColumnName("access_level_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Уровень доступа");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.AccessLevel)
                    .WithMany(p => p.RoleModules)
                    .HasForeignKey(d => d.AccessLevelId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_access_level");

                entity.HasOne(d => d.Module)
                    .WithMany(p => p.RoleModules)
                    .HasForeignKey(d => d.ModuleId)
                    .HasConstraintName("fk_module");

                entity.HasOne(d => d.le)
                    .WithMany(p => p.RoleModules)
                    .HasForeignKey(d => d.leId)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<RoutePfr>(entity =>
            {
                entity.HasKey(e => e.PfrCode)
                    .HasName("pk_pfr_code");

                entity.ToTable("ro_route_pfr");

                entity.HasAnnotation("Relational:Comment", "Таблица роутинга ПФР");

                entity.HasIndex(e => e.FileMaskId, "route_pfr_file_mask_id_idx");

                entity.HasIndex(e => e.utePfr, "route_pfr_route_pfr_idx");

                entity.Property(e => e.PfrCode)
                    .HasMaxLength(11)
                    .HasColumnName("pfr_code")
                    .HasComment("Код");

                entity.Property(e => e.FileMaskId)
                    .HasColumnName("file_mask_id")
                    .HasDefaultValueSql("1")
                    .HasComment("Маска файла");

                entity.Property(e => e.LayoutPfr)
                    .HasMaxLength(11)
                    .HasColumnName("layout_pfr")
                    .HasComment("Код макета");

                entity.Property(e => e.utePfr)
                    .HasColumnName("RoutePfr")
                    .HasMaxLength(11)
                    .HasColumnName("route_pfr")
                    .HasComment("Код роутинга");

                entity.HasOne(d => d.FileMask)
                    .WithMany(p => p.RoutePfrs)
                    .HasForeignKey(d => d.FileMaskId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_file_mask");

                entity.HasOne(d => d.utePfrNavigation)
                    .WithMany(p => p.InverseRoutePfrNavigation)
                    .HasForeignKey(d => d.utePfr)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_route_pfr");
            });

            modelBuilder.Entity<SalecenterRegionView>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_salecenter_region_view");

                entity.Property(e => e.AllCount).HasColumnName("all_count");

                entity.Property(e => e.RegionId).HasColumnName("region_id");

                entity.Property(e => e.SaleCenterId).HasColumnName("sale_center_id");
            });

            modelBuilder.Entity<SberbankDocument>(entity =>
            {
                entity.HasKey(e => e.DocId)
                    .HasName("pk_sberbank_document");

                entity.ToTable("ro_sberbank_document");

                entity.HasAnnotation("Relational:Comment", "Таблица подписанных документов для Сбербанка");

                entity.HasIndex(e => e.SignId, "sberbank_document_sign_id_idx");

                entity.Property(e => e.DocId)
                    .HasColumnName("doc_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DocGuid)
                    .HasColumnName("doc_guid")
                    .HasComment("Идентификатор документа");

                entity.Property(e => e.Hash)
                    .IsRequired()
                    .HasColumnName("hash")
                    .HasComment("Хеш от данных");

                entity.Property(e => e.SignId)
                    .HasColumnName("sign_id")
                    .HasComment("Файл подписи");
            });

            modelBuilder.Entity<SendedBill>(entity =>
            {
                entity.HasKey(e => e.BillId)
                    .HasName("pk_bill_id");

                entity.ToTable("ro_sended_bill");

                entity.HasAnnotation("Relational:Comment", "Выставленные счета");

                entity.HasIndex(e => e.BillNumber, "idx_sended_bill_bill_number");

                entity.HasIndex(e => e.WalletGuid, "idx_wallet_guid");

                entity.HasIndex(e => e.BillDate, "ro_sended_bill_bill_date_idx");

                entity.HasIndex(e => new { e.BillId, e.CreationDate }, "ro_sended_bill_bill_id_creation_time_idx1");

                entity.HasIndex(e => e.AgentToId, "ro_sended_bill_idx");

                entity.HasIndex(e => e.BillTotalSum, "ro_sended_bill_total_sum_idx")
                    .HasNullSortOrder(new[] { NullSortOrder.NullsFirst });

                entity.HasIndex(e => e.AbonentId, "sended_bill_abonent_id_idx");

                entity.HasIndex(e => e.DocumentId, "sended_bill_document_id_idx");

                entity.HasIndex(e => e.InvoiceReturnTypeId, "sended_bill_invoice_return_type_id_idx");

                entity.Property(e => e.BillId)
                    .HasColumnName("bill_id")
                    .HasComment("Ид счета");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.AgentFromId)
                    .HasColumnName("agent_from_id")
                    .HasComment("Агент который выставляет счет");

                entity.Property(e => e.AgentToId)
                    .HasColumnName("agent_to_id")
                    .HasComment("Агент которому выставляется счет");

                entity.Property(e => e.BillDate)
                    .HasPrecision(0)
                    .HasColumnName("bill_date")
                    .HasComment("Дата счета");

                entity.Property(e => e.BillGuid).HasColumnName("bill_guid");

                entity.Property(e => e.BillNdsSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_nds_sum")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Сумма НДС");

                entity.Property(e => e.BillNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("bill_number")
                    .HasComment("Номер счета");

                entity.Property(e => e.BillPayedSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_payed_sum");

                entity.Property(e => e.BillTotalSum)
                    .HasPrecision(15, 2)
                    .HasColumnName("bill_total_sum")
                    .HasDefaultValueSql("0.00")
                    .HasComment("Полная сумма счета (включая НДС)");

                entity.Property(e => e.BlockTime)
                    .HasPrecision(0)
                    .HasColumnName("block_time")
                    .HasComment("Дата блокировки");

                entity.Property(e => e.CancelTime)
                    .HasPrecision(0)
                    .HasColumnName("cancel_time")
                    .HasComment("Дата аннулирования счета");

                entity.Property(e => e.CreationDate)
                    .HasPrecision(0)
                    .HasColumnName("creation_date")
                    .HasComment("Дата создания заявки на счет");

                entity.Property(e => e.DocumentId)
                    .HasColumnName("document_id")
                    .HasComment("Счет");

                entity.Property(e => e.InvoiceReturnTypeId).HasColumnName("invoice_return_type_id");

                entity.Property(e => e.IsSent).HasColumnName("is_sent");

                entity.Property(e => e.Notice)
                    .HasColumnType("character varying")
                    .HasColumnName("notice")
                    .HasComment("Комментарий");

                entity.Property(e => e.PaidFor)
                    .HasColumnName("paid_for")
                    .HasComment("Оплачено или нет");

                entity.Property(e => e.WalletGuid)
                    .HasColumnName("wallet_guid")
                    .HasComment("Ид. кошелька");

                entity.HasOne(d => d.Abonent)
                    .WithMany(p => p.SendedBills)
                    .HasForeignKey(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_abonent");

                entity.HasOne(d => d.AgentFrom)
                    .WithMany(p => p.SendedBillAgentFroms)
                    .HasForeignKey(d => d.AgentFromId)
                    .HasConstraintName("fk_agent_from");

                entity.HasOne(d => d.AgentTo)
                    .WithMany(p => p.SendedBillAgentTos)
                    .HasForeignKey(d => d.AgentToId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_agent_to");

                entity.HasOne(d => d.InvoiceReturnType)
                    .WithMany(p => p.SendedBills)
                    .HasForeignKey(d => d.InvoiceReturnTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_invoice_return_type");
            });

            modelBuilder.Entity<Server>(entity =>
            {
                entity.HasKey(e => e.ServerId)
                    .HasName("pk_server");

                entity.ToTable("ro_server");

                entity.HasAnnotation("Relational:Comment", "Таблица серверов");

                entity.HasIndex(e => e.AgentId, "server_agent_id_idx");

                entity.HasIndex(e => e.DomainIn, "sk_domain_in")
                    .IsUnique();

                entity.HasIndex(e => e.DomainOut, "sk_domain_out")
                    .IsUnique();

                entity.HasIndex(e => e.ServerName, "sk_server_name")
                    .IsUnique();

                entity.Property(e => e.ServerId)
                    .HasColumnName("server_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.DomainIn)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("domain_in")
                    .HasComment("Входящий домен");

                entity.Property(e => e.DomainOut)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("domain_out")
                    .HasComment("Исходящий домен");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.PublicServer)
                    .HasColumnName("public_server")
                    .HasComment("Публичный");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("server_name")
                    .HasComment("Наименование");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Servers)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_product_service");

                entity.ToTable("ro_service");

                entity.HasAnnotation("Relational:Comment", "Таблица услуг");

                entity.HasIndex(e => e.ProductId, "service_product_id_idx");

                entity.HasIndex(e => e.ProductPersonId, "service_product_person_id_idx");

                entity.HasIndex(e => e.ServiceTypeId, "service_service_type_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор услуги");

                entity.Property(e => e.DateAdded)
                    .HasColumnName("date_added")
                    .HasDefaultValueSql("now()");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Ссылка на продукт");

                entity.Property(e => e.ProductPersonId)
                    .HasColumnName("product_person_id")
                    .HasComment("Владелец ЭП");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.ProductPerson)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ProductPersonId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product_person");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");
            });

            modelBuilder.Entity<ServiceBalanceDetail>(entity =>
            {
                entity.HasKey(e => e.ServiceBalanceDetailId)
                    .HasName("pk_service_balance_detail");

                entity.ToTable("ro_service_balance_detail");

                entity.HasAnnotation("Relational:Comment", "Дополнительные услуги в сверке между партнером и Центром продаж");

                entity.Property(e => e.ServiceBalanceDetailId)
                    .HasColumnName("service_balance_detail_id")
                    .HasComment("Идентификатор дополнительной услуги в сверке");

                entity.Property(e => e.BalanceDetailId)
                    .HasColumnName("balance_detail_id")
                    .HasComment("Позиция в сверке");

                entity.Property(e => e.ServiceNumber)
                    .HasColumnType("character varying")
                    .HasColumnName("service_number")
                    .HasComment("Номер услуги");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Тип услуги");

                entity.HasOne(d => d.BalanceDetail)
                    .WithMany(p => p.ServiceBalanceDetails)
                    .HasForeignKey(d => d.BalanceDetailId)
                    .HasConstraintName("fk_balance_detail");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.ServiceBalanceDetails)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_service_type");
            });

            modelBuilder.Entity<ServiceMode>(entity =>
            {
                entity.HasKey(e => e.ServiceModeId)
                    .HasName("pk_service_mode");

                entity.ToTable("ro_service_mode");

                entity.HasAnnotation("Relational:Comment", "Таблица с режимами услуг");

                entity.Property(e => e.ServiceModeId)
                    .ValueGeneratedNever()
                    .HasColumnName("service_mode_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание режима");

                entity.Property(e => e.Name)
                    .HasMaxLength(25)
                    .HasColumnName("name")
                    .HasComment("Название");
            });

            modelBuilder.Entity<ServiceType>(entity =>
            {
                entity.HasKey(e => e.ServiceTypeId)
                    .HasName("pk_service_type");

                entity.ToTable("ro_service_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов услуг.");

                entity.HasIndex(e => e.ServiceModeId, "service_type_service_mode_id_idx");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Идентификатор типа услуги");

                entity.Property(e => e.ServiceModeId)
                    .HasColumnName("service_mode_id")
                    .HasComment("Режим");

                entity.Property(e => e.ServiceTypeName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("service_type_name")
                    .HasComment("Наименование типа услуги");

                entity.HasOne(d => d.ServiceMode)
                    .WithMany(p => p.ServiceTypes)
                    .HasForeignKey(d => d.ServiceModeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_agent");
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.HasKey(e => e.SettingId)
                    .HasName("pk_setting");

                entity.ToTable("ro_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек");

                entity.HasIndex(e => e.ValueTypeId, "setting_value_type_id_idx");

                entity.Property(e => e.SettingId)
                    .ValueGeneratedNever()
                    .HasColumnName("setting_id")
                    .HasComment("Код");

                entity.Property(e => e.SettingName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("setting_name")
                    .HasComment("Наименование");

                entity.Property(e => e.ValueTypeId)
                    .HasColumnName("value_type_id")
                    .HasComment("Тип значения");

                entity.HasOne(d => d.ValueType)
                    .WithMany(p => p.Settings)
                    .HasForeignKey(d => d.ValueTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_value_type");
            });

            modelBuilder.Entity<SignQualification>(entity =>
            {
                entity.HasKey(e => e.SignQualificationId)
                    .HasName("pk_sign_qualification");

                entity.ToTable("ro_sign_qualification");

                entity.HasAnnotation("Relational:Comment", "Таблица квалификаций подписи");

                entity.HasIndex(e => e.SignQualificationName, "sk_sign_qualification_name")
                    .IsUnique();

                entity.Property(e => e.SignQualificationId)
                    .ValueGeneratedNever()
                    .HasColumnName("sign_qualification_id")
                    .HasComment("Код");

                entity.Property(e => e.SignQualificationName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("sign_qualification_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<SkziLicense>(entity =>
            {
                entity.HasKey(e => e.LicenseId)
                    .HasName("pk_skzi_license");

                entity.ToTable("ro_skzi_license");

                entity.HasIndex(e => e.LicenseNumber, "ro_skzi_license_license_number");

                entity.HasIndex(e => e.AgentId, "skzi_license_agent_id_idx");

                entity.HasIndex(e => e.BillId, "skzi_license_bill_id_idx");

                entity.Property(e => e.LicenseId).HasColumnName("license_id");

                entity.Property(e => e.AgentId).HasColumnName("agent_id");

                entity.Property(e => e.BillId).HasColumnName("bill_id");

                entity.Property(e => e.LicenseBlankId).HasColumnName("license_blank_id");

                entity.Property(e => e.LicenseNumber)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("license_number");

                entity.Property(e => e.LicenseTypeId)
                    .HasColumnName("license_type_id")
                    .HasComment("Тип лицензии");

                entity.Property(e => e.MerchandiseBillId).HasColumnName("merchandise_bill_id");

                entity.Property(e => e.MerchandiseId).HasColumnName("merchandise_id");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.SkziLicenses)
                    .HasForeignKey(d => d.AgentId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Bill)
                    .WithMany(p => p.SkziLicenses)
                    .HasForeignKey(d => d.BillId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_bill");

                entity.HasOne(d => d.LicenseBlank)
                    .WithMany(p => p.SkziLicenses)
                    .HasForeignKey(d => d.LicenseBlankId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("ro_skzi_license_license_blank_id_fkey");

                entity.HasOne(d => d.MerchandiseBill)
                    .WithMany(p => p.SkziLicenses)
                    .HasForeignKey(d => d.MerchandiseBillId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_skzi_license_fk_merchandise_bill");

                entity.HasOne(d => d.Merchandise)
                    .WithMany(p => p.SkziLicenses)
                    .HasForeignKey(d => d.MerchandiseId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("ro_skzi_license_fk");
            });

            modelBuilder.Entity<SmevRequestStage>(entity =>
            {
                entity.HasKey(e => e.RequestStageId)
                    .HasName("pk_smev_request");

                entity.ToTable("ro_smev_request_stage");

                entity.HasAnnotation("Relational:Comment", "Таблица стадий запроса к СМЭВ");

                entity.HasIndex(e => e.StageTime, "ro_smev_request_stage_file_id");

                entity.HasIndex(e => e.OriginalRequestId, "ro_smev_request_stage_original_request_id");

                entity.HasIndex(e => e.StageTypeId, "ro_smev_request_stage_stage_type_id");

                entity.Property(e => e.RequestStageId)
                    .HasColumnName("request_stage_id")
                    .HasComment("Идентификатор стадии");

                entity.Property(e => e.FileId)
                    .HasColumnName("file_id")
                    .HasComment("XML запроса/ответ в СМЭВ");

                entity.Property(e => e.OriginalRequestId)
                    .HasColumnName("original_request_id")
                    .HasComment("Идентификатор первоначального запроса в СМЭВ");

                entity.Property(e => e.StageTime)
                    .HasPrecision(3)
                    .HasColumnName("stage_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время запроса/ответ в СМЭВ");

                entity.Property(e => e.StageTypeId).HasColumnName("stage_type_id");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.SmevRequestStages)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_stage_file");

                entity.HasOne(d => d.StageType)
                    .WithMany(p => p.SmevRequestStages)
                    .HasForeignKey(d => d.StageTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_stage_type");
            });

            modelBuilder.Entity<SmevStageType>(entity =>
            {
                entity.HasKey(e => e.StageTypeId)
                    .HasName("pk_smev_stage_type");

                entity.ToTable("ro_smev_stage_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов стадий взаимодействия со СМЭВ");

                entity.Property(e => e.StageTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("stage_type_id")
                    .HasComment("Идентификатор типа");

                entity.Property(e => e.StageName)
                    .HasMaxLength(50)
                    .HasColumnName("stage_name")
                    .HasComment("Название стадии");
            });

            modelBuilder.Entity<So>(entity =>
            {
                entity.HasKey(e => e.SosId)
                    .HasName("pk_sos");

                entity.ToTable("ro_sos");

                entity.HasAnnotation("Relational:Comment", "Таблица спецоператоров");

                entity.HasIndex(e => e.PrefixSos, "prefix_sos");

                entity.HasIndex(e => e.AgentId, "sos_agent_id_idx");

                entity.HasIndex(e => e.CertificateId, "sos_certificate_id_idx");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.LoginSos)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("login_sos")
                    .HasComment("Логин");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OperatorName)
                    .HasColumnType("character varying")
                    .HasColumnName("operator_name")
                    .HasComment("Наименование оператора ЭДО");

                entity.Property(e => e.PrefixSos)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasColumnName("prefix_sos")
                    .HasComment("Префикс");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Учетная запись");

                entity.Property(e => e.RecipientCode)
                    .HasMaxLength(4)
                    .HasColumnName("recipient_code")
                    .HasComment("Код получателя ФНС");

                entity.Property(e => e.SystemName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("system_name")
                    .HasComment("Системное имя");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Sos)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.Sos)
                    .HasForeignKey(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Sos)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_product");
            });

            modelBuilder.Entity<Socrbase>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_socrbase");

                entity.HasAnnotation("Relational:Comment", "Таблица сокращений типов объектов адреса");

                entity.Property(e => e.KodTSt)
                    .HasColumnName("kod_t_st")
                    .HasComment("Код");

                entity.Property(e => e.Level)
                    .HasColumnName("level")
                    .HasComment("Уровень");

                entity.Property(e => e.Scname)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("scname")
                    .HasComment("Сокращение");

                entity.Property(e => e.Socrname)
                    .HasMaxLength(29)
                    .HasColumnName("socrname")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<SosCertificate>(entity =>
            {
                entity.HasKey(e => new { e.SosId, e.CertificateId })
                    .HasName("pk_sos_certificate");

                entity.ToTable("ro_sos_certificate");

                entity.HasAnnotation("Relational:Comment", "Таблица сертификатов СОС");

                entity.HasIndex(e => e.CertificateId, "sos_certificate_certificate_id_idx");

                entity.HasIndex(e => e.SosId, "sos_certificate_sos_id_idx");

                entity.Property(e => e.SosId)
                    .HasColumnName("sos_id")
                    .HasComment("СОС");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата");

                entity.HasOne(d => d.Certificate)
                    .WithMany(p => p.SosCertificates)
                    .HasForeignKey(d => d.CertificateId)
                    .HasConstraintName("fk_certificate");

                entity.HasOne(d => d.Sos)
                    .WithMany(p => p.SosCertificates)
                    .HasForeignKey(d => d.SosId)
                    .HasConstraintName("fk_sos");
            });

            modelBuilder.Entity<Soun>(entity =>
            {
                entity.HasKey(e => e.TaxCode)
                    .HasName("pk_tax_code");

                entity.ToTable("ro_soun");

                entity.HasAnnotation("Relational:Comment", "Таблица СОУН");

                entity.HasIndex(e => e.ParentTax, "soun_parent_tax_idx");

                entity.Property(e => e.TaxCode)
                    .HasMaxLength(4)
                    .HasColumnName("tax_code")
                    .IsFixedLength()
                    .HasComment("Код инспекции");

                entity.Property(e => e.ParentTax)
                    .HasMaxLength(4)
                    .HasColumnName("parent_tax")
                    .HasDefaultValueSql("NULL::bpchar")
                    .IsFixedLength()
                    .HasComment("Код предыдущей инспекции");

                entity.Property(e => e.TaxName)
                    .HasMaxLength(150)
                    .HasColumnName("tax_name")
                    .HasComment("Наименование инспекции");

                entity.HasOne(d => d.ParentTaxNavigation)
                    .WithMany(p => p.InverseParentTaxNavigation)
                    .HasForeignKey(d => d.ParentTax)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_parent_tax");
            });

            modelBuilder.Entity<StatisticProvider>(entity =>
            {
                entity.HasKey(e => e.StatisticProviderId)
                    .HasName("pk_statistic_provider");

                entity.ToTable("ro_statistic_provider");

                entity.HasAnnotation("Relational:Comment", "Таблица статистики поставщиков");

                entity.HasIndex(e => e.AbonentId, "sk_abonent_id")
                    .IsUnique();

                entity.HasIndex(e => new { e.Inn, e.Kpp }, "sk_statistic_provider_inn_kpp")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentId, "statistic_provider_abonent_id_idx");

                entity.HasIndex(e => e.Inn, "statistic_provider_inn");

                entity.Property(e => e.StatisticProviderId)
                    .HasColumnName("statistic_provider_id")
                    .HasComment("Идентификатор поставщика");

                entity.Property(e => e.AbonentId).HasColumnName("abonent_id");

                entity.Property(e => e.ContactPerson)
                    .HasMaxLength(100)
                    .HasColumnName("contact_person")
                    .HasComment("Контактное лицо");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл. почта");

                entity.Property(e => e.Inn)
                    .IsRequired()
                    .HasMaxLength(12)
                    .HasColumnName("inn")
                    .HasComment("ИНН");

                entity.Property(e => e.Kpp)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("kpp")
                    .HasDefaultValueSql("''::character varying")
                    .HasComment("КПП");

                entity.Property(e => e.MaxSum)
                    .HasPrecision(18, 2)
                    .HasColumnName("max_sum")
                    .HasComment("Максимальная сумма");

                entity.Property(e => e.Name)
                    .HasMaxLength(400)
                    .HasColumnName("name")
                    .HasComment("Наименование победителя");

                entity.Property(e => e.Phone)
                    .HasMaxLength(50)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.SumCountAuctions)
                    .HasColumnName("sum_count_auctions")
                    .HasComment("Сумма по столбцу Количество аукционов");

                entity.Property(e => e.SumCountContract)
                    .HasColumnName("sum_count_contract")
                    .HasComment("Сумма по столбцу Количество контрактов");

                entity.Property(e => e.SumCountWin)
                    .HasColumnName("sum_count_win")
                    .HasComment("Сумма по столбцу Количество побед");

                entity.HasOne(d => d.Abonent)
                    .WithOne(p => p.StatisticProvider)
                    .HasForeignKey<StatisticProvider>(d => d.AbonentId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_abonent");
            });

            modelBuilder.Entity<Step>(entity =>
            {
                entity.HasKey(e => e.StepId)
                    .HasName("pk_step");

                entity.ToTable("ro_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний");

                entity.HasIndex(e => e.StepGuid, "sk_step_guid")
                    .IsUnique();

                entity.HasIndex(e => e.StepName, "sk_step_name")
                    .IsUnique();

                entity.HasIndex(e => e.NextStepId, "step_next_step_idx");

                entity.Property(e => e.StepId)
                    .ValueGeneratedNever()
                    .HasColumnName("step_id")
                    .HasComment("Код");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следущее состояние");

                entity.Property(e => e.StepGuid)
                    .HasColumnName("step_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.StepName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("step_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.InverseNextStep)
                    .HasForeignKey(d => d.NextStepId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_next_step");
            });

            modelBuilder.Entity<StepReason>(entity =>
            {
                entity.HasKey(e => e.StepReasonId)
                    .HasName("pk_step_reason");

                entity.ToTable("ro_step_reason");

                entity.HasAnnotation("Relational:Comment", "Причины статусов");

                entity.HasIndex(e => e.StepReasonName, "sk_step_reason")
                    .IsUnique();

                entity.Property(e => e.StepReasonId)
                    .HasColumnName("step_reason_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.StepReasonName)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("step_reason_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<StorageType>(entity =>
            {
                entity.HasKey(e => e.StorageTypeId)
                    .HasName("pk_storage_type");

                entity.ToTable("ro_storage_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов хранилищ");

                entity.HasIndex(e => e.StorageTypeName, "sk_storage_type_name")
                    .IsUnique();

                entity.Property(e => e.StorageTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("storage_type_id")
                    .HasComment("Код");

                entity.Property(e => e.StorageTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("storage_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Street>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_street");

                entity.HasAnnotation("Relational:Comment", "Таблица улиц (5 уровень)");

                entity.HasIndex(e => e.Code, "ro_street_code");

                entity.Property(e => e.Code)
                    .HasMaxLength(17)
                    .HasColumnName("code")
                    .IsFixedLength();

                entity.Property(e => e.Gninmb)
                    .HasMaxLength(4)
                    .HasColumnName("gninmb")
                    .IsFixedLength()
                    .HasComment("Код ИФНС");

                entity.Property(e => e.Index)
                    .HasMaxLength(6)
                    .HasColumnName("index")
                    .IsFixedLength()
                    .HasComment("Индекс");

                entity.Property(e => e.Name)
                    .HasMaxLength(128)
                    .HasColumnName("name")
                    .HasComment("Наименование");

                entity.Property(e => e.Ocatd)
                    .HasMaxLength(11)
                    .HasColumnName("ocatd")
                    .IsFixedLength()
                    .HasComment("ОКАТО");

                entity.Property(e => e.Socr)
                    .HasMaxLength(10)
                    .HasColumnName("socr")
                    .HasComment("Сокращение");

                entity.Property(e => e.Uno)
                    .HasMaxLength(4)
                    .HasColumnName("uno")
                    .IsFixedLength()
                    .HasComment("Код тер. уч. ИФНС");
            });

            modelBuilder.Entity<SubjectType>(entity =>
            {
                entity.HasKey(e => e.SubjectTypeId)
                    .HasName("pk_subject_type");

                entity.ToTable("ro_subject_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов субъектов документооборота");

                entity.HasIndex(e => new { e.SubjectTypeName, e.WorkflowTypeId }, "sk_subject_type_name")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "subject_type_workflow_type_id_idx");

                entity.Property(e => e.SubjectTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("subject_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.SubjectTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("subject_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.SubjectTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<SubscriptionRegionCount1cFull>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_1c_full");

                entity.Property(e => e.Count1c).HasColumnName("count_1c");

                entity.Property(e => e.RegionCode)
                    .HasColumnType("character varying")
                    .HasColumnName("region_code");
            });

            modelBuilder.Entity<SubscriptionRegionCount1cWeek>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_1c_week");

                entity.Property(e => e.Count1c).HasColumnName("count_1c");

                entity.Property(e => e.RegionCode)
                    .HasColumnType("character varying")
                    .HasColumnName("region_code");
            });

            modelBuilder.Entity<SubscriptionRegionCountIt>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_subscription_region_count_its");

                entity.Property(e => e.ItsCount).HasColumnName("its_count");

                entity.Property(e => e.RegionCode).HasColumnName("region_code");
            });

            modelBuilder.Entity<Tag>(entity =>
            {
                entity.HasKey(e => e.TagId)
                    .HasName("pk_tag");

                entity.ToTable("ro_tag");

                entity.HasAnnotation("Relational:Comment", "Таблица тегов");

                entity.HasIndex(e => e.TagName, "sk_tag_name")
                    .IsUnique();

                entity.Property(e => e.TagId)
                    .HasColumnName("tag_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TagGroupId)
                    .HasColumnName("tag_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.TagName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("tag_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.TagGroup)
                    .WithMany(p => p.Tags)
                    .HasForeignKey(d => d.TagGroupId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_ro_tag_tag_group_id");
            });

            modelBuilder.Entity<TagGroup>(entity =>
            {
                entity.HasKey(e => e.TagGroupId)
                    .HasName("ro_tag_group_pkey");

                entity.ToTable("ro_tag_group");

                entity.Property(e => e.TagGroupId)
                    .ValueGeneratedNever()
                    .HasColumnName("tag_group_id")
                    .HasComment("Ид. группа");

                entity.Property(e => e.TagGroupName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("tag_group_name")
                    .HasComment("Наименование группы");
            });

            modelBuilder.Entity<Tariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("pk_tariff");

                entity.ToTable("ro_tariff");

                entity.HasAnnotation("Relational:Comment", "Таблица тарифов");

                entity.HasIndex(e => new { e.TariffName, e.TariffTypeId, e.TariffGroupId }, "sk_tariff")
                    .IsUnique();

                entity.HasIndex(e => e.TariffGuid, "sk_tariff_guid")
                    .IsUnique();

                entity.HasIndex(e => e.TariffGroupId, "tariff_tariff_group_id_idx");

                entity.HasIndex(e => e.TariffTypeId, "tariff_tariff_type_id_idx");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Article)
                    .HasMaxLength(40)
                    .HasColumnName("article")
                    .HasComment("Артикул");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.EndDate).HasColumnName("end_date");

                entity.Property(e => e.PurposeId)
                    .HasColumnName("purpose_id")
                    .HasComment("Назначение тарифа");

                entity.Property(e => e.StartDate).HasColumnName("start_date");

                entity.Property(e => e.TariffGroupId)
                    .HasColumnName("tariff_group_id")
                    .HasComment("Группа");

                entity.Property(e => e.TariffGuid)
                    .HasColumnName("tariff_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Гуид");

                entity.Property(e => e.TariffName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("tariff_name")
                    .HasComment("Наименование");

                entity.Property(e => e.TariffTypeId)
                    .HasColumnName("tariff_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.TariffGroup)
                    .WithMany(p => p.Tariffs)
                    .HasForeignKey(d => d.TariffGroupId)
                    .HasConstraintName("fk_tariff_group");

                entity.HasOne(d => d.TariffType)
                    .WithMany(p => p.Tariffs)
                    .HasForeignKey(d => d.TariffTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_type");
            });

            modelBuilder.Entity<TariffAttribute>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeId)
                    .HasName("pk_tariff_attribute_id");

                entity.ToTable("ro_tariff_attribute");

                entity.HasAnnotation("Relational:Comment", "Таблица атрибутов тарифов");

                entity.HasIndex(e => e.AttributeId, "tariff_attribute_attribute_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_attribute_tariff_id_idx");

                entity.HasIndex(e => e.ValidityUnitId, "tariff_attribute_validity_unit_id_idx");

                entity.Property(e => e.TariffAttributeId).HasColumnName("tariff_attribute_id");

                entity.Property(e => e.AttributeId)
                    .HasColumnName("attribute_id")
                    .HasComment("Атрибут");

                entity.Property(e => e.IndexNumber)
                    .HasColumnName("index_number")
                    .HasComment("Порядковый номер");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("Ограничение");

                entity.Property(e => e.MaxIndex)
                    .HasColumnName("max_index")
                    .HasComment("Максимальный порядковый номер");

                entity.Property(e => e.MaxNumber)
                    .HasColumnName("max_number")
                    .HasComment("Максимальное количество");

                entity.Property(e => e.MinIndex)
                    .HasColumnName("min_index")
                    .HasComment("Минимальный порядковый номер");

                entity.Property(e => e.MinNumber)
                    .HasColumnName("min_number")
                    .HasComment("Минимальное количество");

                entity.Property(e => e.Number)
                    .HasColumnName("number")
                    .HasComment("Количество");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.Property(e => e.Validity)
                    .HasColumnName("validity")
                    .HasComment("Срок действия");

                entity.Property(e => e.ValidityUnitId)
                    .HasColumnName("validity_unit_id")
                    .HasComment("Ед. времени срока");

                entity.Property(e => e.WaitingDays)
                    .HasColumnName("waiting_days")
                    .HasComment("Дни ожидания");

                entity.HasOne(d => d.Attribute)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.AttributeId)
                    .HasConstraintName("fk_attribute");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.LimitId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_limit");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.ValidityUnit)
                    .WithMany(p => p.TariffAttributes)
                    .HasForeignKey(d => d.ValidityUnitId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_validity_unit");
            });

            modelBuilder.Entity<TariffAttributeCa>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeCaId)
                    .HasName("pk_tariff_attribute_ca_template");

                entity.ToTable("ro_tariff_attribute_ca");

                entity.HasAnnotation("Relational:Comment", "Таблица УЦ атрибутов шаблонов тарифа");

                entity.HasIndex(e => new { e.TariffAttributeId, e.CaId, e.CaTemplateId }, "tariff_attribute_ca_ca_template_idx")
                    .IsUnique();

                entity.HasIndex(e => e.CaTemplateId, "tariff_attribute_ca_template_idx");

                entity.Property(e => e.TariffAttributeCaId)
                    .HasColumnName("tariff_attribute_ca_id")
                    .HasDefaultValueSql("nextval('ro_tariff_attribute_ca_id_seq'::regclass)")
                    .HasComment("ИД УЦ атрибута шаблона тарифа");

                entity.Property(e => e.CaId)
                    .HasColumnName("ca_id")
                    .HasComment("ИД УЦ");

                entity.Property(e => e.CaTemplateId)
                    .HasColumnName("ca_template_id")
                    .HasComment("ИД шаблона для УЦ");

                entity.Property(e => e.IsDefault)
                    .HasColumnName("is_default")
                    .HasComment("УЦ используется по умолчанию");

                entity.Property(e => e.TariffAttributeId)
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("ИД атрибута тарифа");

                entity.HasOne(d => d.Ca)
                    .WithMany(p => p.TariffAttributeCas)
                    .HasForeignKey(d => d.CaId)
                    .HasConstraintName("fk_ca_id");

                entity.HasOne(d => d.CaTemplate)
                    .WithMany(p => p.TariffAttributeCas)
                    .HasForeignKey(d => d.CaTemplateId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_ca_template");

                entity.HasOne(d => d.TariffAttribute)
                    .WithMany(p => p.TariffAttributeCas)
                    .HasForeignKey(d => d.TariffAttributeId)
                    .HasConstraintName("fk_tariff_attribute_id");
            });

            modelBuilder.Entity<TariffAttributeLimit>(entity =>
            {
                entity.HasKey(e => new { e.TariffAttributeId, e.LimitId })
                    .HasName("pk_tariff_attribute_limit");

                entity.ToTable("ro_tariff_attribute_limit");

                entity.HasAnnotation("Relational:Comment", "Таблица ограничений для атрибутов тарифов");

                entity.Property(e => e.TariffAttributeId)
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("ИД атрибута тарифа");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("ИД ограничения");

                entity.Property(e => e.LimitValue)
                    .HasMaxLength(255)
                    .HasColumnName("limit_value")
                    .HasComment("Значение ограничения");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.TariffAttributeLimits)
                    .HasForeignKey(d => d.LimitId)
                    .HasConstraintName("fk_limit_id");

                entity.HasOne(d => d.TariffAttribute)
                    .WithMany(p => p.TariffAttributeLimits)
                    .HasForeignKey(d => d.TariffAttributeId)
                    .HasConstraintName("fk_tariff_attribute_id");
            });

            modelBuilder.Entity<TariffCalcCompany>(entity =>
            {
                entity.HasKey(e => e.CompanyId)
                    .HasName("ro_tariff_calc_companies_pkey");

                entity.ToTable("ro_tariff_calc_companies");

                entity.HasAnnotation("Relational:Comment", "Таблица список компаний для тарифного калькулятора.");

                entity.HasIndex(e => e.Name, "ro_tariff_calc_companies_name_key")
                    .IsUnique();

                entity.Property(e => e.CompanyId)
                    .ValueGeneratedNever()
                    .HasColumnName("company_id")
                    .HasComment("Id компании.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Имя компании.");
            });

            modelBuilder.Entity<TariffCalcComplexPrice>(entity =>
            {
                entity.HasKey(e => new { e.PriceId, e.Desk, e.Price })
                    .HasName("ro_tariff_calc_complex_prices_pkey");

                entity.ToTable("ro_tariff_calc_complex_prices");

                entity.HasAnnotation("Relational:Comment", "Цены тарифов и доп. возможностей в сложном формате.");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Id цены которой принаджлежат условия");

                entity.Property(e => e.Desk)
                    .HasMaxLength(100)
                    .HasColumnName("desk")
                    .HasComment("Описание части сложной цены");

                entity.Property(e => e.Price)
                    .HasPrecision(18)
                    .HasColumnName("price")
                    .HasComment("Цена части сложной цены");

                entity.HasOne(d => d.PriceNavigation)
                    .WithMany(p => p.TariffCalcComplexPrices)
                    .HasForeignKey(d => d.PriceId)
                    .HasConstraintName("ro_tariff_calc_complex_prices_price_id_fkey");
            });

            modelBuilder.Entity<TariffCalcFeaturesList>(entity =>
            {
                entity.HasKey(e => e.FeatureId)
                    .HasName("ro_tariff_calc_features_list_pkey");

                entity.ToTable("ro_tariff_calc_features_list");

                entity.HasAnnotation("Relational:Comment", "Список возможностей");

                entity.HasIndex(e => e.Name, "ro_tariff_calc_features_list_name_key")
                    .IsUnique();

                entity.Property(e => e.FeatureId)
                    .HasColumnName("feature_id")
                    .HasComment("Id возможности");

                entity.Property(e => e.IsMain)
                    .HasColumnName("is_main")
                    .HasComment("Флаг основная возможность");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("name")
                    .HasComment("Описание возможности");

                entity.HasMany(d => d.Tariffs)
                    .WithMany(p => p.Features)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcFeature",
                        l => l.HasOne<TariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_features_tariff_id_fkey"),
                        r => r.HasOne<TariffCalcFeaturesList>().WithMany().HasForeignKey("FeatureId").HasConstraintName("ro_tariff_calc_features_feature_id_fkey"),
                        j =>
                        {
                            j.HasKey("FeatureId", "TariffId").HasName("ro_tariff_calc_features_pkey");

                            j.ToTable("ro_tariff_calc_features").HasAnnotation("Relational:Comment", "Возможности тарифов");

                            j.IndexerProperty<int>("FeatureId").HasColumnName("feature_id").HasComment("Id возможности");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("Id тарифа");
                        });
            });

            modelBuilder.Entity<TariffCalcOrgNalType>(entity =>
            {
                entity.HasKey(e => e.OrgnalId)
                    .HasName("ro_tariff_calc_org_nal_type_pkey");

                entity.ToTable("ro_tariff_calc_org_nal_type");

                entity.HasAnnotation("Relational:Comment", "Таблица список типов налогоорганизаций для тарифного калькулятора");

                entity.Property(e => e.OrgnalId)
                    .ValueGeneratedNever()
                    .HasColumnName("orgnal_id")
                    .HasComment("Id типов налогоорганизаций.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("name")
                    .HasComment("Описание типов налогоорганизаций");
            });

            modelBuilder.Entity<TariffCalcPrice>(entity =>
            {
                entity.HasKey(e => e.PriceId)
                    .HasName("ro_tariff_calc_prices_pkey");

                entity.ToTable("ro_tariff_calc_prices");

                entity.HasAnnotation("Relational:Comment", "Цены тарифов");

                entity.HasIndex(e => new { e.PriceTypeId, e.TariffId, e.FeatureId, e.RegionId, e.OrgNalId, e.Price }, "ro_tariff_calc_prices_price_type_id_tariff_id_feature_id_re_key")
                    .IsUnique();

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Id цены");

                entity.Property(e => e.FeatureId)
                    .HasColumnName("feature_id")
                    .HasComment("Id возможности если цена для возможности ");

                entity.Property(e => e.OrgNalId)
                    .HasColumnName("org_nal_id")
                    .HasComment("Доступ или тип налогоорганизации для которой доступен тариф");

                entity.Property(e => e.Price)
                    .HasPrecision(18)
                    .HasColumnName("price")
                    .HasComment("Цена в нормальном формате");

                entity.Property(e => e.PriceTypeId)
                    .HasColumnName("price_type_id")
                    .HasComment("Тип цены например для тарифа или для расширения");

                entity.Property(e => e.RegionId)
                    .HasColumnName("region_id")
                    .HasComment("id региона");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Id тарифа если цена для тарифа");

                entity.HasOne(d => d.Feature)
                    .WithMany(p => p.TariffCalcPrices)
                    .HasForeignKey(d => d.FeatureId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_prices_feature_id_fkey");

                entity.HasOne(d => d.OrgNal)
                    .WithMany(p => p.TariffCalcPrices)
                    .HasForeignKey(d => d.OrgNalId)
                    .HasConstraintName("ro_tariff_calc_prices_org_nal_id_fkey");

                entity.HasOne(d => d.PriceType)
                    .WithMany(p => p.TariffCalcPrices)
                    .HasForeignKey(d => d.PriceTypeId)
                    .HasConstraintName("ro_tariff_calc_prices_price_type_id_fkey");

                entity.HasOne(d => d.Region)
                    .WithMany(p => p.TariffCalcPrices)
                    .HasForeignKey(d => d.RegionId)
                    .HasConstraintName("ro_tariff_calc_prices_region_id_fkey");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.TariffCalcPrices)
                    .HasForeignKey(d => d.TariffId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_prices_tariff_id_fkey");
            });

            modelBuilder.Entity<TariffCalcPriceType>(entity =>
            {
                entity.HasKey(e => e.PriceTypeId)
                    .HasName("ro_tariff_calc_price_types_pkey");

                entity.ToTable("ro_tariff_calc_price_types");

                entity.HasAnnotation("Relational:Comment", "Типы цен");

                entity.Property(e => e.PriceTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("price_type_id")
                    .HasComment("Id типа цены");

                entity.Property(e => e.PriceDesk)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("price_desk")
                    .HasComment("Описание типа цены");
            });

            modelBuilder.Entity<TariffCalcTariff>(entity =>
            {
                entity.HasKey(e => e.TariffId)
                    .HasName("ro_tariff_calc_tariffs_pkey");

                entity.ToTable("ro_tariff_calc_tariffs");

                entity.HasAnnotation("Relational:Comment", "Таблица список тарифов для тарифного калькулятора.");

                entity.HasIndex(e => new { e.Name, e.Company }, "ro_tariff_calc_tariffs_name_company_key")
                    .IsUnique();

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Id тарифа");

                entity.Property(e => e.Company)
                    .HasColumnName("company")
                    .HasComment("Id компании");

                entity.Property(e => e.Directions)
                    .HasMaxLength(100)
                    .HasColumnName("directions")
                    .HasComment("Доступные для тарифа направления.");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .HasComment("Имя тарифа");

                entity.HasOne(d => d.CompanyNavigation)
                    .WithMany(p => p.TariffCalcTariffs)
                    .HasForeignKey(d => d.Company)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("ro_tariff_calc_tariffs_company_fkey");

                entity.HasMany(d => d.OrgNals)
                    .WithMany(p => p.Tariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcTariffOrgNal",
                        l => l.HasOne<TariffCalcOrgNalType>().WithMany().HasForeignKey("OrgNalId").HasConstraintName("ro_tariff_calc_tariff_org_nal_org_nal_id_fkey"),
                        r => r.HasOne<TariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_tariff_org_nal_tariff_id_fkey"),
                        j =>
                        {
                            j.HasKey("TariffId", "OrgNalId").HasName("ro_tariff_calc_tariff_org_nal_pkey");

                            j.ToTable("ro_tariff_calc_tariff_org_nal").HasAnnotation("Relational:Comment", "Доступы тарифа по типам организации и налогооблажения.");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("ID тарифа из ro_tariff_calc_tariffs");

                            j.IndexerProperty<int>("OrgNalId").HasColumnName("org_nal_id").HasComment("Id типа налогорганизаций из ro_tariff_calc_org_nal_type");
                        });

                entity.HasMany(d => d.Regions)
                    .WithMany(p => p.Tariffs)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTariffCalcTariffRegion",
                        l => l.HasOne<Region>().WithMany().HasForeignKey("RegionId").HasConstraintName("ro_tariff_calc_tariff_region_region_id_fkey"),
                        r => r.HasOne<TariffCalcTariff>().WithMany().HasForeignKey("TariffId").HasConstraintName("ro_tariff_calc_tariff_region_tariff_id_fkey"),
                        j =>
                        {
                            j.HasKey("TariffId", "RegionId").HasName("ro_tariff_calc_tariff_region_pkey");

                            j.ToTable("ro_tariff_calc_tariff_region").HasAnnotation("Relational:Comment", "Тарифы по регионам.");

                            j.IndexerProperty<int>("TariffId").HasColumnName("tariff_id").HasComment("ID тарифа из ro_tariff_calc_tariffs");

                            j.IndexerProperty<int>("RegionId").HasColumnName("region_id").HasComment("Id региона из public.ro_region");
                        });
            });

            modelBuilder.Entity<TariffDiscount>(entity =>
            {
                entity.HasKey(e => e.TariffDiscountId)
                    .HasName("pk_tariff_discount");

                entity.ToTable("ro_tariff_discount");

                entity.HasAnnotation("Relational:Comment", "Таблица скидок для тарифа в прайсе");

                entity.HasIndex(e => new { e.SectionId, e.TariffId, e.DiscountId }, "sk_tariff_discount")
                    .IsUnique();

                entity.HasIndex(e => e.DiscountId, "tariff_discount_discount_id_idx");

                entity.HasIndex(e => e.SectionId, "tariff_discount_section_id_idx");

                entity.HasIndex(e => new { e.SectionId, e.TariffId }, "tariff_discount_section_id_tariff_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_discount_tariff_id_idx");

                entity.Property(e => e.TariffDiscountId)
                    .HasColumnName("tariff_discount_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.DiscountId)
                    .HasColumnName("discount_id")
                    .HasComment("Скидка");

                entity.Property(e => e.EndTime)
                    .HasPrecision(0)
                    .HasColumnName("end_time")
                    .HasComment("Дата окончания действия");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasComment("Дата начала действия");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.Property(e => e.UseLimit)
                    .HasColumnName("use_limit")
                    .HasComment("Максимальное количество использований");

                entity.HasOne(d => d.Discount)
                    .WithMany(p => p.TariffDiscounts)
                    .HasForeignKey(d => d.DiscountId)
                    .HasConstraintName("fk_discount");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.TariffDiscounts)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.TariffDiscounts)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");

                entity.HasOne(d => d.PriceTariff)
                    .WithMany(p => p.TariffDiscounts)
                    .HasForeignKey(d => new { d.SectionId, d.TariffId })
                    .HasConstraintName("fk_price_tariff");
            });

            modelBuilder.Entity<TariffDiscountRule>(entity =>
            {
                entity.HasKey(e => e.RuleId)
                    .HasName("pk_tariff_discount_rule");

                entity.ToTable("ro_tariff_discount_rule");

                entity.HasAnnotation("Relational:Comment", "Таблица зависимости скидки от наличия определенного тарифа");

                entity.HasIndex(e => e.SectionId, "tariff_discount_rule_section_id_idx");

                entity.HasIndex(e => e.TariffDiscountId, "tariff_discount_rule_tariff_discount_id_idx");

                entity.HasIndex(e => e.TariffId, "tariff_discount_rule_tariff_id_idx");

                entity.Property(e => e.RuleId)
                    .HasColumnName("rule_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.SectionId)
                    .HasColumnName("section_id")
                    .HasComment("Секция");

                entity.Property(e => e.TariffDiscountId)
                    .HasColumnName("tariff_discount_id")
                    .HasComment("Cкидка для тарифа в прайсе");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("Тариф");

                entity.HasOne(d => d.Section)
                    .WithMany(p => p.TariffDiscountRules)
                    .HasForeignKey(d => d.SectionId)
                    .HasConstraintName("fk_section");

                entity.HasOne(d => d.TariffDiscount)
                    .WithMany(p => p.TariffDiscountRules)
                    .HasForeignKey(d => d.TariffDiscountId)
                    .HasConstraintName("fk_tariff_discount");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.TariffDiscountRules)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff");
            });

            modelBuilder.Entity<TariffGroup>(entity =>
            {
                entity.HasKey(e => e.TariffGroupId)
                    .HasName("pk_tariff_group");

                entity.ToTable("ro_tariff_group");

                entity.HasAnnotation("Relational:Comment", "Таблица групп тарифов");

                entity.HasIndex(e => e.TariffGroupName, "sk_tariff_group_name")
                    .IsUnique();

                entity.Property(e => e.TariffGroupId)
                    .HasColumnName("tariff_group_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TariffGroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("tariff_group_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<TariffLimit>(entity =>
            {
                entity.HasKey(e => new { e.TariffId, e.LimitId })
                    .HasName("pk_tariff_limit");

                entity.ToTable("ro_tariff_limit");

                entity.HasAnnotation("Relational:Comment", "Таблица ограничений для тарифов");

                entity.Property(e => e.TariffId)
                    .HasColumnName("tariff_id")
                    .HasComment("ИД тарифа");

                entity.Property(e => e.LimitId)
                    .HasColumnName("limit_id")
                    .HasComment("ИД ограничения");

                entity.Property(e => e.LimitValue)
                    .HasMaxLength(255)
                    .HasColumnName("limit_value")
                    .HasComment("Значение ограничения");

                entity.HasOne(d => d.Limit)
                    .WithMany(p => p.TariffLimits)
                    .HasForeignKey(d => d.LimitId)
                    .HasConstraintName("fk_limit_id");

                entity.HasOne(d => d.Tariff)
                    .WithMany(p => p.TariffLimits)
                    .HasForeignKey(d => d.TariffId)
                    .HasConstraintName("fk_tariff_id");
            });

            modelBuilder.Entity<TariffType>(entity =>
            {
                entity.HasKey(e => e.TariffTypeId)
                    .HasName("pk_tariff_type");

                entity.ToTable("ro_tariff_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов тарифов");

                entity.HasIndex(e => e.TariffTypeName, "sk_tariff_type_name")
                    .IsUnique();

                entity.Property(e => e.TariffTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_type_id")
                    .HasComment("Код");

                entity.Property(e => e.TariffTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("tariff_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<TariffZone>(entity =>
            {
                entity.HasKey(e => e.TariffZoneId)
                    .HasName("pk_tariff_zone");

                entity.ToTable("ro_tariff_zone");

                entity.HasAnnotation("Relational:Comment", "Таблица тарифных зон");

                entity.HasIndex(e => e.TariffZoneName, "sk_tariff_zone_name")
                    .IsUnique();

                entity.Property(e => e.TariffZoneId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_zone_id")
                    .HasComment("Код");

                entity.Property(e => e.Price)
                    .HasPrecision(18, 2)
                    .HasColumnName("price")
                    .HasComment("Стоимость");

                entity.Property(e => e.PriceId)
                    .HasColumnName("price_id")
                    .HasComment("Прайс");

                entity.Property(e => e.TariffZoneName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("tariff_zone_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.PriceNavigation)
                    .WithMany(p => p.TariffZones)
                    .HasForeignKey(d => d.PriceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_price");
            });

            modelBuilder.Entity<TaxSystem>(entity =>
            {
                entity.HasKey(e => e.TaxSystemId)
                    .HasName("ro_tax_system_pkey");

                entity.ToTable("ro_tax_system");

                entity.HasAnnotation("Relational:Comment", "Таблица систем налогообложения");

                entity.HasIndex(e => e.Alias, "ro_tax_system_alias_key")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "ro_tax_system_name_key")
                    .IsUnique();

                entity.Property(e => e.TaxSystemId)
                    .ValueGeneratedNever()
                    .HasColumnName("tax_system_id")
                    .HasComment("Идентификатор системы налогообложения");

                entity.Property(e => e.Alias)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("alias")
                    .HasComment("Обозначение системы налогообложения");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("name")
                    .HasComment("Название системы налогообложения");
            });

            modelBuilder.Entity<Token>(entity =>
            {
                entity.HasKey(e => e.TokenId)
                    .HasName("pk_token");

                entity.ToTable("ro_token");

                entity.HasAnnotation("Relational:Comment", "Таблица токенов");

                entity.HasIndex(e => e.ApplicationId, "token_application_idx");

                entity.HasIndex(e => e.ProductId, "token_product_id_idx");

                entity.HasIndex(e => e.TokenTypeId, "token_token_type_idx");

                entity.HasIndex(e => e.UserId, "token_user_id_idx");

                entity.Property(e => e.TokenId)
                    .HasColumnName("token_id")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.InitialTime)
                    .HasPrecision(0)
                    .HasColumnName("initial_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время начала");

                entity.Property(e => e.LifeTime)
                    .HasColumnName("life_time")
                    .HasComment("Время жизни в секундах");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Продукт");

                entity.Property(e => e.TokenTypeId)
                    .HasColumnName("token_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.Value)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.TokenType)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.TokenTypeId)
                    .HasConstraintName("fk_token_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Tokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_user");

                entity.HasMany(d => d.Gates)
                    .WithMany(p => p.Tokens)
                    .UsingEntity<Dictionary<string, object>>(
                        "RoTokenGate",
                        l => l.HasOne<Gate>().WithMany().HasForeignKey("GateId").HasConstraintName("fk_gate_id"),
                        r => r.HasOne<Token>().WithMany().HasForeignKey("TokenId").HasConstraintName("fk_token_id"),
                        j =>
                        {
                            j.HasKey("TokenId", "GateId").HasName("pk_token_gate_id");

                            j.ToTable("ro_token_gate").HasAnnotation("Relational:Comment", "Таблица для опредления гейта токена");

                            j.IndexerProperty<Guid>("TokenId").HasColumnName("token_id").HasComment("Токен");

                            j.IndexerProperty<Guid>("GateId").HasColumnName("gate_id").HasComment("Гейт");
                        });
            });

            modelBuilder.Entity<TokenType>(entity =>
            {
                entity.HasKey(e => e.TokenTypeId)
                    .HasName("pk_token_type");

                entity.ToTable("ro_token_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов токенов");

                entity.HasIndex(e => e.TokenTypeName, "sk_token_type_name")
                    .IsUnique();

                entity.Property(e => e.TokenTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("token_type_id")
                    .HasComment("Код");

                entity.Property(e => e.LifeTime)
                    .HasColumnName("life_time")
                    .HasComment("Время жизни в секундах");

                entity.Property(e => e.TokenTypeName)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("token_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<TradingPlatformRegistrationRequest>(entity =>
            {
                entity.HasKey(e => e.RequestId)
                    .HasName("pk_request_id");

                entity.ToTable("ro_trading_platform_registration_request");

                entity.HasAnnotation("Relational:Comment", "Таблица запросов на регистрацию сертификата в торговой площадке");

                entity.HasIndex(e => e.KeyId, "ro_trading_platform_registration_request_key_id");

                entity.HasIndex(e => e.ProductId, "ro_trading_platform_registration_request_product_id");

                entity.HasIndex(e => e.TradingPlatformTariffAttributeId, "ro_trading_platform_registration_request_tariff_attribute_id");

                entity.HasIndex(e => e.StepId, "ro_trading_platform_registration_request_tariff_step_id");

                entity.Property(e => e.RequestId)
                    .HasColumnName("request_id")
                    .HasComment("Идентификатор запроса");

                entity.Property(e => e.Error)
                    .HasMaxLength(300)
                    .HasColumnName("error")
                    .HasComment("Ошибка регистрации сертификата");

                entity.Property(e => e.ExternalRequestId)
                    .HasMaxLength(40)
                    .HasColumnName("external_request_id")
                    .HasComment("Идентификатор запроса в торговой площадке");

                entity.Property(e => e.KeyId)
                    .HasColumnName("key_id")
                    .HasComment("Идентификатор регистрируемого ключа");

                entity.Property(e => e.ProductId)
                    .HasColumnName("product_id")
                    .HasComment("Идентификатор регистрируемого продукта");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Статус регистрации");

                entity.Property(e => e.TradingPlatformTariffAttributeId)
                    .HasColumnName("trading_platform_tariff_attribute_id")
                    .HasComment("Идентификатор связи атрибута тарифа и торговой площадки");

                entity.HasOne(d => d.Key)
                    .WithMany(p => p.TradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.KeyId)
                    .HasConstraintName("fk_key");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.TradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("fk_product");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.TradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.TradingPlatformTariffAttribute)
                    .WithMany(p => p.TradingPlatformRegistrationRequests)
                    .HasForeignKey(d => d.TradingPlatformTariffAttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_trading_platform_tariff_attribute");
            });

            modelBuilder.Entity<TradingPlatformTariffAttribute>(entity =>
            {
                entity.HasKey(e => e.TariffAttributeId)
                    .HasName("pk_trading_platform_tariff_attribute_id");

                entity.ToTable("ro_trading_platform_tariff_attribute");

                entity.HasAnnotation("Relational:Comment", "Таблица связей идентификаторов тарифов торговых площадок с внутренними тарифами");

                entity.HasIndex(e => e.TariffAttributeId, "ro_trading_platform_tariff_attribute_tariff_attribute_idx");

                entity.Property(e => e.TariffAttributeId)
                    .ValueGeneratedNever()
                    .HasColumnName("tariff_attribute_id")
                    .HasComment("Идентификатор внутреннего атрибута тарифа");

                entity.Property(e => e.TradingPlatformExternalTariffId)
                    .HasMaxLength(50)
                    .HasColumnName("trading_platform_external_tariff_id")
                    .HasComment("Идентификатор тарифа в торговой площадке");

                entity.HasOne(d => d.TariffAttribute)
                    .WithOne(p => p.TradingPlatformTariffAttribute)
                    .HasForeignKey<TradingPlatformTariffAttribute>(d => d.TariffAttributeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_tariff_attribute");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasKey(e => e.TransactionId)
                    .HasName("pk_transaction");

                entity.ToTable("ro_transaction");

                entity.HasAnnotation("Relational:Comment", "Таблица транзакций документооборотов");

                entity.HasIndex(e => new { e.WorkflowId, e.TransactionTypeId }, "sk_transaction")
                    .IsUnique();

                entity.HasIndex(e => e.PacketId, "transaction_packet_id_idx");

                entity.HasIndex(e => e.RecipientTypeId, "transaction_recipient_type_id_idx");

                entity.HasIndex(e => e.SenderTypeId, "transaction_sender_type_id_idx");

                entity.HasIndex(e => e.TransactionTypeId, "transaction_transaction_type_id_idx");

                entity.HasIndex(e => e.WorkflowId, "transaction_workflow_id_idx");

                entity.Property(e => e.TransactionId)
                    .HasColumnName("transaction_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.FormatVersion)
                    .HasMaxLength(10)
                    .HasColumnName("format_version")
                    .HasComment("Версия формата");

                entity.Property(e => e.FormationTime)
                    .HasPrecision(0)
                    .HasColumnName("formation_time")
                    .HasComment("Дата формирования");

                entity.Property(e => e.PacketId)
                    .HasColumnName("packet_id")
                    .HasComment("Пакет");

                entity.Property(e => e.ReceiveTime)
                    .HasPrecision(0)
                    .HasColumnName("receive_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата получения");

                entity.Property(e => e.RecipientName)
                    .HasMaxLength(40)
                    .HasColumnName("recipient_name")
                    .HasComment("Получатель");

                entity.Property(e => e.RecipientTypeId)
                    .HasColumnName("recipient_type_id")
                    .HasComment("Тип получателя");

                entity.Property(e => e.SenderName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("sender_name")
                    .HasComment("Отправитель");

                entity.Property(e => e.SenderTypeId)
                    .HasColumnName("sender_type_id")
                    .HasComment("Тип отправителя");

                entity.Property(e => e.TransactionTypeId)
                    .HasColumnName("transaction_type_id")
                    .HasComment("Тип");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.RecipientType)
                    .WithMany(p => p.TransactionRecipientTypes)
                    .HasForeignKey(d => d.RecipientTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_recipient_type");

                entity.HasOne(d => d.SenderType)
                    .WithMany(p => p.TransactionSenderTypes)
                    .HasForeignKey(d => d.SenderTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_sender_type");

                entity.HasOne(d => d.TransactionType)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.TransactionTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_transaction_type");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<TransactionType>(entity =>
            {
                entity.HasKey(e => e.TransactionTypeId)
                    .HasName("pk_transaction_type");

                entity.ToTable("ro_transaction_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов транзакций документооборота");

                entity.HasIndex(e => new { e.TransactionTypeName, e.WorkflowTypeId }, "sk_transaction_type_name")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "transaction_type_workflow_type_id_idx");

                entity.Property(e => e.TransactionTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("transaction_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.TransactionTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("transaction_type_name")
                    .HasComment("Наименование");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.TransactionTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<TransferTariffLog>(entity =>
            {
                entity.HasKey(e => e.TransferTariffId)
                    .HasName("pk_transfer_tariff_log");

                entity.ToTable("ro_transfer_tariff_log");

                entity.HasAnnotation("Relational:Comment", "Таблица логирования переноса лицензий");

                entity.HasIndex(e => e.ContractTariffId, "transfer_tariff_log_contract_tariff_id_idx");

                entity.HasIndex(e => e.PreviousContractTariffId, "transfer_tariff_log_previous_contract_tariff_id_idx");

                entity.HasIndex(e => e.ProductTransferId, "transfer_tariff_log_product_transfer_id_idx");

                entity.Property(e => e.TransferTariffId)
                    .HasColumnName("transfer_tariff_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ContractTariffId)
                    .HasColumnName("contract_tariff_id")
                    .HasComment("Лицензия");

                entity.Property(e => e.PreviousContractTariffId)
                    .HasColumnName("previous_contract_tariff_id")
                    .HasComment("Предыдущая лицензия");

                entity.Property(e => e.ProductTransferId)
                    .HasColumnName("product_transfer_id")
                    .HasComment("Лог переноса продукта");

                entity.HasOne(d => d.ContractTariff)
                    .WithMany(p => p.TransferTariffLogContractTariffs)
                    .HasForeignKey(d => d.ContractTariffId)
                    .HasConstraintName("fk_contract_tariff");

                entity.HasOne(d => d.PreviousContractTariff)
                    .WithMany(p => p.TransferTariffLogPreviousContractTariffs)
                    .HasForeignKey(d => d.PreviousContractTariffId)
                    .HasConstraintName("fk_previous_contract_tariff");

                entity.HasOne(d => d.ProductTransfer)
                    .WithMany(p => p.TransferTariffLogs)
                    .HasForeignKey(d => d.ProductTransferId)
                    .HasConstraintName("fk_product_transfer");
            });

            modelBuilder.Entity<Transition>(entity =>
            {
                entity.HasKey(e => e.TransitionId)
                    .HasName("pk_transition");

                entity.ToTable("ro_transition");

                entity.HasAnnotation("Relational:Comment", "Таблица переходов");

                entity.HasIndex(e => e.ApplicationId, "transition_application_id_idx");

                entity.HasIndex(e => e.ConditionId, "transition_condition_id_idx");

                entity.HasIndex(e => e.NextStepId, "transition_next_step_id_idx");

                entity.HasIndex(e => e.ObjectId, "transition_object_id_idx");

                entity.HasIndex(e => e.ObjectTypeId, "transition_object_type_id_idx");

                entity.HasIndex(e => e.StepId, "transition_step_id_idx");

                entity.Property(e => e.TransitionId)
                    .HasColumnName("transition_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.ApplicationId)
                    .HasColumnName("application_id")
                    .HasComment("Приложение");

                entity.Property(e => e.ConditionId)
                    .HasColumnName("condition_id")
                    .HasComment("Условие");

                entity.Property(e => e.NextStepId)
                    .HasColumnName("next_step_id")
                    .HasComment("Следующее состояние");

                entity.Property(e => e.ObjectId)
                    .HasColumnName("object_id")
                    .HasComment("Объект");

                entity.Property(e => e.ObjectTypeId)
                    .HasColumnName("object_type_id")
                    .HasComment("Тип объекта");

                entity.Property(e => e.Priority)
                    .HasColumnName("priority")
                    .HasComment("Приоритет");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Transitions)
                    .HasForeignKey(d => d.ApplicationId)
                    .HasConstraintName("fk_application");

                entity.HasOne(d => d.Condition)
                    .WithMany(p => p.Transitions)
                    .HasForeignKey(d => d.ConditionId)
                    .HasConstraintName("fk_condition");

                entity.HasOne(d => d.NextStep)
                    .WithMany(p => p.TransitionNextSteps)
                    .HasForeignKey(d => d.NextStepId)
                    .HasConstraintName("fk_next_step");

                entity.HasOne(d => d.Object)
                    .WithMany(p => p.Transitions)
                    .HasForeignKey(d => d.ObjectId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fk_object");

                entity.HasOne(d => d.ObjectType)
                    .WithMany(p => p.Transitions)
                    .HasForeignKey(d => d.ObjectTypeId)
                    .HasConstraintName("fk_object_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.TransitionSteps)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.HasKey(e => e.UnitId)
                    .HasName("pk_unit");

                entity.ToTable("ro_unit");

                entity.HasAnnotation("Relational:Comment", "Таблица ед. измерения");

                entity.HasIndex(e => new { e.UnitTypeId, e.UnitName }, "sk_unit")
                    .IsUnique();

                entity.HasIndex(e => e.UnitTypeId, "unit_unit_type_id_idx");

                entity.Property(e => e.UnitId)
                    .HasColumnName("unit_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("unit_name")
                    .HasComment("Наименование");

                entity.Property(e => e.UnitTypeId)
                    .HasColumnName("unit_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.UnitType)
                    .WithMany(p => p.Units)
                    .HasForeignKey(d => d.UnitTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_unit_type");
            });

            modelBuilder.Entity<UnitType>(entity =>
            {
                entity.HasKey(e => e.UnitTypeId)
                    .HasName("pk_unit_type");

                entity.ToTable("ro_unit_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов ед. измерений");

                entity.HasIndex(e => e.UnitTypeName, "sk_unit_type_name")
                    .IsUnique();

                entity.Property(e => e.UnitTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("unit_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UnitTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("unit_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<UpdateSystem>(entity =>
            {
                entity.HasKey(e => e.SystemId)
                    .HasName("pk_update_system");

                entity.ToTable("ro_update_system");

                entity.HasAnnotation("Relational:Comment", "Таблица систем обновлений");

                entity.Property(e => e.SystemId)
                    .HasColumnName("system_id")
                    .HasComment("ИД записи");

                entity.Property(e => e.SystemDescription)
                    .IsRequired()
                    .HasMaxLength(256)
                    .HasColumnName("system_description")
                    .HasComment("Название системы");

                entity.Property(e => e.SystemName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("system_name")
                    .HasComment("Название системы");
            });

            modelBuilder.Entity<UseType>(entity =>
            {
                entity.HasKey(e => e.UseTypeId)
                    .HasName("pk_use_type");

                entity.ToTable("ro_use_type");

                entity.HasAnnotation("Relational:Comment", "Тип применения");

                entity.Property(e => e.UseTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("use_type_id")
                    .HasComment("Код");

                entity.Property(e => e.UseTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("use_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_user");

                entity.ToTable("ro_user");

                entity.HasAnnotation("Relational:Comment", "Таблица пользователей");

                entity.HasIndex(e => e.CertificateId, "idx_user_certificate_id")
                    .IsUnique();

                entity.HasIndex(e => e.UserGuid, "ro_user_user_guid_key")
                    .IsUnique();

                entity.HasIndex(e => e.UserName, "sk_user_name")
                    .IsUnique();

                entity.HasIndex(e => e.AgentId, "user_agent_id_idx");

                entity.HasIndex(e => e.OfficeWorkId, "user_office_work_id_idx");

                entity.HasIndex(e => e.PostId, "user_post_id_idx");

                entity.HasIndex(e => e.leId, "user_role_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AgentId)
                    .HasColumnName("agent_id")
                    .HasComment("Партнер");

                entity.Property(e => e.AuthorizationName)
                    .HasMaxLength(100)
                    .HasColumnName("authorization_name")
                    .HasComment("ФИО по доверенности");

                entity.Property(e => e.CertificateId)
                    .HasColumnName("certificate_id")
                    .HasComment("Сертификат пользователя");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.Property(e => e.Description)
                    .HasColumnType("character varying")
                    .HasColumnName("description")
                    .HasComment("Описание");

                entity.Property(e => e.Document)
                    .HasMaxLength(100)
                    .HasColumnName("document")
                    .HasComment("Документ");

                entity.Property(e => e.DocumentDate)
                    .HasColumnName("document_date")
                    .HasComment("Дата документа");

                entity.Property(e => e.DocumentNumber)
                    .HasMaxLength(11)
                    .HasColumnName("document_number")
                    .HasComment("Номер документа");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .HasColumnName("email")
                    .HasComment("Эл почта");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .HasColumnName("name")
                    .HasComment("ФИО");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения");

                entity.Property(e => e.OfficeWorkId)
                    .HasColumnName("office_work_id")
                    .HasComment("Офис");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.PasswordPhrase)
                    .HasMaxLength(100)
                    .HasColumnName("password_phrase")
                    .HasComment("Парольная фраза");

                entity.Property(e => e.Phone)
                    .HasMaxLength(24)
                    .HasColumnName("phone")
                    .HasComment("Телефон");

                entity.Property(e => e.PostId)
                    .HasColumnName("post_id")
                    .HasComment("Должность");

                entity.Property(e => e.leId)
                    .HasColumnName("RoleId")
                    .HasColumnName("role_id")
                    .HasComment("Группа");

                entity.Property(e => e.UserGuid)
                    .HasColumnName("user_guid")
                    .HasDefaultValueSql("uuid_generate_v4()")
                    .HasComment("Ид. гуид");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("user_name")
                    .HasComment("Имя");

                entity.HasOne(d => d.Agent)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.AgentId)
                    .HasConstraintName("fk_agent");

                entity.HasOne(d => d.Certificate)
                    .WithOne(p => p.User)
                    .HasForeignKey<User>(d => d.CertificateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_certificate");

                //entity.HasOne(d => d.OfficeWork)
                //    .WithMany(p => p.Users)
                //    .HasForeignKey(d => d.OfficeWorkId)
                //    .HasConstraintName("fk_office");

                entity.HasOne(d => d.Post)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.PostId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_post");

                entity.HasOne(d => d.le)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.leId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_role");
            });

            modelBuilder.Entity<UserEmailRegistered>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_user_email_registered");

                entity.HasAnnotation("Relational:Comment", "Временная таблица для подтверждения наличия e-mail у пользователя");

                entity.HasIndex(e => e.UserId, "ro_user_email_registered_user_id_key")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("идентификатор пользователя с подтверждённым e-mail");
            });

            modelBuilder.Entity<UserFintender>(entity =>
            {
                entity.HasKey(e => e.UserId)
                    .HasName("pk_user_fintender");

                entity.ToTable("ro_user_fintender");

                entity.HasAnnotation("Relational:Comment", "Таблица пользователей финтендера");

                entity.HasIndex(e => e.Login, "sk_user_fintender")
                    .IsUnique();

                entity.Property(e => e.UserId)
                    .ValueGeneratedNever()
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.IsAdmin)
                    .HasColumnName("is_admin")
                    .HasComment("Администратор");

                entity.Property(e => e.Login)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("login")
                    .HasComment("Логин");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.HasOne(d => d.User)
                    .WithOne(p => p.UserFintender)
                    .HasForeignKey<UserFintender>(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<UserPassword>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("ro_user_password");

                entity.HasIndex(e => e.UserId, "idx_ro_user_password_user_id");

                entity.Property(e => e.CreationTime)
                    .HasPrecision(0)
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Время создания");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("password")
                    .HasComment("Пароль");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                //entity.HasOne(d => d.)
                //    .WithMany()
                //    .HasForeignKey(d => d.UserId)
                //    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<UserPromotionConfirmed>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.PromotionTypeId })
                    .HasName("pk_user_promotion_confirmed");

                entity.ToTable("ro_user_promotion_confirmed");

                entity.HasAnnotation("Relational:Comment", "Таблица со списком потдтверждённых пользователями акций");

                entity.HasIndex(e => e.PromotionTypeId, "user_promotion_confirmed_promotion_type_id_idx");

                entity.HasIndex(e => e.UserId, "user_promotion_confirmed_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Идентификатор пользователя");

                entity.Property(e => e.PromotionTypeId)
                    .HasColumnName("promotion_type_id")
                    .HasComment("Идентификатор рекламной акции");

                entity.Property(e => e.ConfirmDate)
                    .HasPrecision(0)
                    .HasColumnName("confirm_date")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата подтверждения");

                entity.HasOne(d => d.PromotionType)
                    .WithMany(p => p.UserPromotionConfirmeds)
                    .HasForeignKey(d => d.PromotionTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_promotion_type");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserPromotionConfirmeds)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.leId })
                    .HasName("pk_user_role");

                entity.ToTable("ro_user_role");

                entity.HasAnnotation("Relational:Comment", "Таблица ролей пользователей");

                entity.HasIndex(e => e.leId, "user_role_role_id_idx");

                entity.HasIndex(e => e.UserId, "user_role_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.leId)
                    .HasColumnName("RoleId")
                    .HasColumnName("role_id")
                    .HasComment("Роль");

                entity.Property(e => e.CreationTime)
                    .HasColumnType("timestamp(0) without time zone")
                    .HasColumnName("creation_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата создания");

                entity.HasOne(d => d.le)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.leId)
                    .HasConstraintName("fk_role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRoles)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<UserRoleAccessInformation>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("ro_user_role_access_information");

                entity.Property(e => e.AccessLevelId).HasColumnName("access_level_id");

                entity.Property(e => e.AccessLevelName)
                    .HasMaxLength(100)
                    .HasColumnName("access_level_name");

                entity.Property(e => e.LevelPriority).HasColumnName("level_priority");

                entity.Property(e => e.ModuleId).HasColumnName("module_id");

                entity.Property(e => e.ModuleName)
                    .HasMaxLength(150)
                    .HasColumnName("module_name");

                entity.Property(e => e.UserId).HasColumnName("user_id");
            });

            modelBuilder.Entity<UserSetting>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.SettingId })
                    .HasName("pk_user_setting");

                entity.ToTable("ro_user_setting");

                entity.HasAnnotation("Relational:Comment", "Таблица настроек пользователей");

                entity.HasIndex(e => e.SettingId, "user_setting_setting_id_idx");

                entity.HasIndex(e => e.UserId, "user_setting_user_id_idx");

                entity.Property(e => e.UserId)
                    .HasColumnName("user_id")
                    .HasComment("Пользователь");

                entity.Property(e => e.SettingId)
                    .HasColumnName("setting_id")
                    .HasComment("Настройка");

                entity.Property(e => e.SettingValue)
                    .IsRequired()
                    .HasColumnType("character varying")
                    .HasColumnName("setting_value")
                    .HasComment("Значение");

                entity.HasOne(d => d.Setting)
                    .WithMany(p => p.UserSettings)
                    .HasForeignKey(d => d.SettingId)
                    .HasConstraintName("fk_setting_id");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserSettings)
                    .HasForeignKey(d => d.UserId)
                    .HasConstraintName("fk_user_id");
            });

            modelBuilder.Entity<UserTrust>(entity =>
            {
                entity.HasKey(e => e.UserTrustId)
                    .HasName("pk_user_trust");

                entity.ToTable("ro_user_trust");

                entity.HasAnnotation("Relational:Comment", "Таблица доверенностей пользователей");

                entity.HasIndex(e => e.FileId, "user_trust_file_idx");

                entity.HasIndex(e => e.OffTime, "user_trust_off_time_idx");

                entity.HasIndex(e => e.UserId, "user_trust_user_idx");

                entity.Property(e => e.UserTrustId)
                    .HasColumnName("user_trust_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.EndDate)
                    .HasColumnName("end_date")
                    .HasDefaultValueSql("(('now'::text)::date + '1 year'::interval)")
                    .HasComment("Дата окончания доверенности");

                entity.Property(e => e.FileId).HasColumnName("file_id");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("first_name")
                    .HasComment("Имя");

                entity.Property(e => e.InitialDate)
                    .HasColumnName("initial_date")
                    .HasDefaultValueSql("('now'::text)::date")
                    .HasComment("Дата начала доверенности");

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("last_name")
                    .HasComment("Фамилия");

                entity.Property(e => e.OffTime)
                    .HasPrecision(0)
                    .HasColumnName("off_time")
                    .HasComment("Дата отключения доверенности");

                entity.Property(e => e.PassportAddon)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("passport_addon")
                    .HasComment("Кем выдан паспорт");

                entity.Property(e => e.PassportDate)
                    .HasColumnName("passport_date")
                    .HasComment("Когда выдан паспорт");

                entity.Property(e => e.PassportNumber)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("passport_number")
                    .HasComment("Номер паспорта");

                entity.Property(e => e.PassportSeries)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasColumnName("passport_series")
                    .HasComment("Серия паспорта");

                entity.Property(e => e.Patronymic)
                    .HasMaxLength(64)
                    .HasColumnName("patronymic")
                    .HasComment("Отчество");

                entity.Property(e => e.UserId).HasColumnName("user_id");

                entity.HasOne(d => d.File)
                    .WithMany(p => p.UserTrusts)
                    .HasForeignKey(d => d.FileId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_file");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserTrusts)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_user");
            });

            modelBuilder.Entity<ValueType>(entity =>
            {
                entity.HasKey(e => e.ValueTypeId)
                    .HasName("pk_value_type");

                entity.ToTable("ro_value_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов значений");

                entity.HasIndex(e => e.CodeName, "sk_value_type_code_name")
                    .IsUnique();

                entity.HasIndex(e => e.ValueTypeName, "sk_value_type_name")
                    .IsUnique();

                entity.Property(e => e.ValueTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("value_type_id")
                    .HasComment("Код");

                entity.Property(e => e.CodeName)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasColumnName("code_name")
                    .HasComment("Кодовое имя");

                entity.Property(e => e.ValueTypeName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnName("value_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<Version>(entity =>
            {
                entity.HasKey(e => e.VersionNumber)
                    .HasName("pk_version");

                entity.ToTable("ro_version");

                entity.HasAnnotation("Relational:Comment", "Таблица версий БД");

                entity.Property(e => e.VersionNumber)
                    .HasMaxLength(10)
                    .HasColumnName("version_number")
                    .HasComment("Номер");

                entity.Property(e => e.UpdateTime)
                    .HasPrecision(0)
                    .HasColumnName("update_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата обновления");
            });

            modelBuilder.Entity<VipnetNode>(entity =>
            {
                entity.HasKey(e => e.VipnetNodeId)
                    .HasName("pk_vipnet_node");

                entity.ToTable("ro_vipnet_node");

                entity.HasAnnotation("Relational:Comment", "Таблица сетевых узлов ViPNet");

                entity.Property(e => e.VipnetNodeId)
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("Идентификатор");

                entity.Property(e => e.VipnetNodeName)
                    .HasMaxLength(150)
                    .HasColumnName("vipnet_node_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<VipnetUser>(entity =>
            {
                entity.HasKey(e => e.VipnetUserId)
                    .HasName("pk_vipnet_user");

                entity.ToTable("ro_vipnet_user");

                entity.HasAnnotation("Relational:Comment", "Таблица пользователей ViPNet");

                entity.HasIndex(e => e.VipnetNodeId, "vipnet_user_vipnet_node_id_idx");

                entity.Property(e => e.VipnetUserId)
                    .HasMaxLength(8)
                    .HasColumnName("vipnet_user_id")
                    .IsFixedLength()
                    .HasComment("Идентификатор");

                entity.Property(e => e.VipnetNodeId)
                    .IsRequired()
                    .HasMaxLength(9)
                    .HasColumnName("vipnet_node_id")
                    .IsFixedLength()
                    .HasComment("Сетевой узел");

                entity.Property(e => e.VipnetUserName)
                    .HasMaxLength(56)
                    .HasColumnName("vipnet_user_name")
                    .HasComment("Наименование");

                entity.HasOne(d => d.VipnetNode)
                    .WithMany(p => p.VipnetUsers)
                    .HasForeignKey(d => d.VipnetNodeId)
                    .HasConstraintName("fk_vipnet_node");
            });

            modelBuilder.Entity<VisibilityType>(entity =>
            {
                entity.HasKey(e => e.VisibilityTypeId)
                    .HasName("pk_visibility_type");

                entity.ToTable("ro_visibility_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов видимости");

                entity.HasIndex(e => e.VisibilityTypeName, "sk_visibility_type_name")
                    .IsUnique();

                entity.Property(e => e.VisibilityTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("visibility_type_id")
                    .HasComment("Код");

                entity.Property(e => e.VisibilityTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("visibility_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.Entity<WorkCalendar>(entity =>
            {
                entity.HasKey(e => e.WorkDay)
                    .HasName("ro_work_calendar_pkey");

                entity.ToTable("ro_work_calendar");

                entity.Property(e => e.WorkDay)
                    .HasColumnName("work_day")
                    .HasComment("Рабочий день");

                entity.Property(e => e.IsHoliday)
                    .HasColumnName("is_holiday")
                    .HasComment("Признак праздничного дня");
            });

            modelBuilder.Entity<Workflow>(entity =>
            {
                entity.HasKey(e => e.WorkflowId)
                    .HasName("pk_workflow");

                entity.ToTable("ro_workflow");

                entity.HasAnnotation("Relational:Comment", "Таблица документооборотов");

                entity.HasIndex(e => e.WorkflowGuid, "sk_workflow")
                    .IsUnique();

                entity.HasIndex(e => e.WorkflowTypeId, "workflow_workflow_type_id_idx");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("callback_address")
                    .HasComment("Адрес ответа");

                entity.Property(e => e.CompletedTime)
                    .HasPrecision(0)
                    .HasColumnName("completed_time")
                    .HasComment("Дата завершения");

                entity.Property(e => e.StartedTime)
                    .HasPrecision(0)
                    .HasColumnName("started_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата начала");

                entity.Property(e => e.WorkflowGuid)
                    .HasColumnName("workflow_guid")
                    .HasComment("ГУИД");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.Workflows)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<WorkflowDocType>(entity =>
            {
                entity.HasKey(e => e.WorkflowDocTypeId)
                    .HasName("pk_workflow_doc_type");

                entity.ToTable("ro_workflow_doc_type");

                entity.HasAnnotation("Relational:Comment", "Таблица приложений документооборота");

                entity.HasIndex(e => new { e.WorkflowTypeId, e.AbonentTypeId, e.DocTypeId }, "sk_workflow_doc_type")
                    .IsUnique();

                entity.HasIndex(e => e.AbonentTypeId, "workflow_doc_type_abonent_type_id_idx");

                entity.HasIndex(e => e.DocTypeId, "workflow_doc_type_doc_type_id_idx");

                entity.HasIndex(e => e.WorkflowTypeId, "workflow_doc_type_workflow_type_id_idx");

                entity.Property(e => e.WorkflowDocTypeId)
                    .HasColumnName("workflow_doc_type_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.AbonentTypeId)
                    .HasColumnName("abonent_type_id")
                    .HasComment("Тип абонента");

                entity.Property(e => e.DocTypeId)
                    .HasColumnName("doc_type_id")
                    .HasComment("Тип документа");

                entity.Property(e => e.Required)
                    .HasColumnName("required")
                    .HasComment("Обязательный");

                entity.Property(e => e.WorkflowTypeId)
                    .HasColumnName("workflow_type_id")
                    .HasComment("Тип документооборота");

                entity.HasOne(d => d.AbonentType)
                    .WithMany(p => p.WorkflowDocTypes)
                    .HasForeignKey(d => d.AbonentTypeId)
                    .HasConstraintName("fk_abonent_type");

                entity.HasOne(d => d.DocType)
                    .WithMany(p => p.WorkflowDocTypes)
                    .HasForeignKey(d => d.DocTypeId)
                    .HasConstraintName("fk_doc_type");

                entity.HasOne(d => d.WorkflowType)
                    .WithMany(p => p.WorkflowDocTypes)
                    .HasForeignKey(d => d.WorkflowTypeId)
                    .HasConstraintName("fk_workflow_type");
            });

            modelBuilder.Entity<WorkflowFeedback>(entity =>
            {
                entity.HasKey(e => e.FeedbackId)
                    .HasName("pk_workflow_feedback");

                entity.ToTable("ro_workflow_feedback");

                entity.HasAnnotation("Relational:Comment", "Таблица обратной связи по документооборотам");

                entity.HasIndex(e => e.RatingId, "workflow_feedback_rating_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_feedback_workflow_id_idx");

                entity.Property(e => e.FeedbackId)
                    .HasColumnName("feedback_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.RatingId)
                    .HasColumnName("rating_id")
                    .HasComment("Оценка");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.HasOne(d => d.Rating)
                    .WithMany(p => p.WorkflowFeedbacks)
                    .HasForeignKey(d => d.RatingId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_feedback_rating");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowFeedbacks)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow_id");
            });

            modelBuilder.Entity<WorkflowService>(entity =>
            {
                entity.HasKey(e => e.ServiceId)
                    .HasName("pk_workflow_service");

                entity.ToTable("ro_workflow_service");

                entity.HasAnnotation("Relational:Comment", "Таблица для описания доп. услуг, связанных с документооборотом");

                entity.HasIndex(e => new { e.WorkflowId, e.ServiceTypeId, e.GateId }, "sk_workflow_service")
                    .IsUnique();

                entity.HasIndex(e => e.ServiceTypeId, "workflow_service_service_type_id_idx");

                entity.HasIndex(e => e.StepId, "workflow_service_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_service_workflow_id_idx");

                entity.Property(e => e.ServiceId)
                    .HasColumnName("service_id")
                    .HasComment("Идентификатор");

                entity.Property(e => e.CallbackAddress)
                    .HasColumnType("character varying")
                    .HasColumnName("callback_address")
                    .HasComment("Адрес ответа");

                entity.Property(e => e.GateId)
                    .HasColumnName("gate_id")
                    .HasComment("Гейт");

                entity.Property(e => e.Message)
                    .HasColumnType("character varying")
                    .HasColumnName("message")
                    .HasComment("Сообщение");

                entity.Property(e => e.ServiceTypeId)
                    .HasColumnName("service_type_id")
                    .HasComment("Ссылка на тип услуги");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Ссылка на состояние");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Ссылка на документооборот");

                entity.HasOne(d => d.Gate)
                    .WithMany(p => p.WorkflowServices)
                    .HasForeignKey(d => d.GateId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("fk_gate");

                entity.HasOne(d => d.ServiceType)
                    .WithMany(p => p.WorkflowServices)
                    .HasForeignKey(d => d.ServiceTypeId)
                    .HasConstraintName("fk_service_type");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.WorkflowServices)
                    .HasForeignKey(d => d.StepId)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowServices)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<WorkflowServiceStep>(entity =>
            {
                entity.HasKey(e => new { e.WorkflowId, e.StepId, e.LogTime })
                    .HasName("pk_workflow_service_step");

                entity.ToTable("ro_workflow_service_step");

                entity.HasAnnotation("Relational:Comment", "Таблица состояний услуг, связанных с документооборотом");

                entity.HasIndex(e => e.StepId, "workflow_service_step_step_id_idx");

                entity.HasIndex(e => e.WorkflowId, "workflow_service_step_workflow_id_idx");

                entity.Property(e => e.WorkflowId)
                    .HasColumnName("workflow_id")
                    .HasComment("Документооборот");

                entity.Property(e => e.StepId)
                    .HasColumnName("step_id")
                    .HasComment("Состояние");

                entity.Property(e => e.LogTime)
                    .HasPrecision(0)
                    .HasColumnName("log_time")
                    .HasDefaultValueSql("now()")
                    .HasComment("Дата записи");

                entity.HasOne(d => d.Step)
                    .WithMany(p => p.WorkflowServiceSteps)
                    .HasForeignKey(d => d.StepId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fk_step");

                entity.HasOne(d => d.Workflow)
                    .WithMany(p => p.WorkflowServiceSteps)
                    .HasForeignKey(d => d.WorkflowId)
                    .HasConstraintName("fk_workflow");
            });

            modelBuilder.Entity<WorkflowType>(entity =>
            {
                entity.HasKey(e => e.WorkflowTypeId)
                    .HasName("pk_workflow_type");

                entity.ToTable("ro_workflow_type");

                entity.HasAnnotation("Relational:Comment", "Таблица типов документооборота");

                entity.HasIndex(e => e.WorkflowTypeName, "sk_workflow_type_name")
                    .IsUnique();

                entity.Property(e => e.WorkflowTypeId)
                    .ValueGeneratedNever()
                    .HasColumnName("workflow_type_id")
                    .HasComment("Код");

                entity.Property(e => e.WorkflowTypeName)
                    .IsRequired()
                    .HasMaxLength(40)
                    .HasColumnName("workflow_type_name")
                    .HasComment("Наименование");
            });

            modelBuilder.HasSequence("ro_issuer_issuer_id_seq");

            modelBuilder.HasSequence("ro_log_type_log_type_id_seq").HasMax(2147483647);

            modelBuilder.HasSequence("ro_potential_abonent_trading_platform_id_seq");

            modelBuilder.HasSequence("ro_potential_abonent_trading_platform_type_id_seq");

            modelBuilder.HasSequence("ro_price_tax_price_id_seq");

            modelBuilder.HasSequence("ro_tariff_tariff_id_seq");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
